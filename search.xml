<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[♏️  AnimationLib-Hammer.js基本用法]]></title>
      <url>http://yoursite.com/AnimationLib-Hammer-js%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>version: 2.0.8<br>HammerJS的基本用法，更多详细内容可参考官网API<br>传送门：<a href="http://hammerjs.github.io/" target="_blank" rel="external">http://hammerjs.github.io/</a></p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>完美实现移动端大多数事件：点击、滑动、拖动、多点触控等</li>
</ul>
<a id="more"></a>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul>
<li><p>Pan - 拖动事件</p>
<blockquote>
<p>Panstart: 拖动开始<br>Panmove: 拖动过程<br>Panend: 拖动结束<br>Pancancel: 拖动开始<br>Panleft: 向左拖动<br>Panright: 向右拖动<br>Panup: 向上拖动<br>Pandown: 线下拖动</p>
</blockquote>
</li>
<li><p>Pinch - 两个手指的拉近拉远</p>
<blockquote>
<p>Pinchstart: 多点触控开始<br>Pinchmove: 多点触控过程<br>Pinchend: 多点触控结束<br>Pinchcancel: 多点触控取消<br>Pinchin: 多点触控时两手指距离越来越近<br>Pinchout: 多点触控时两手指距离越来越远</p>
</blockquote>
</li>
<li><p>Press - 相当于Click</p>
<blockquote>
<p>Pressup: 点击离开时触发</p>
</blockquote>
</li>
<li><p>Rotate - 两个或多个手指旋转</p>
<blockquote>
<p>Rotatestart: 旋转开始<br>Rotatemove: 旋转过程<br>Rotateend: 旋转结束<br>Rotatecancel: 旋转取消</p>
</blockquote>
</li>
<li><p>Swipe - 滑动事件</p>
<blockquote>
<p>Swipeleft: 向左滑动<br>Swiperight: 向右滑动<br>Swipeup: 向上滑动<br>Swipedown: 向下滑动</p>
</blockquote>
</li>
<li><p>Tap - 相当于Click，最大点击时间为250ms，超过则按Press处理</p>
</li>
</ul>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> oh = hammertime.on(<span class="string">'panmove'</span>, function(ev)&#123;</div><div class="line">    <span class="keyword">if</span>(ev<span class="selector-class">.direction</span> == <span class="number">8</span>)&#123;</div><div class="line">        <span class="comment">//下滑, <span class="doctag">Todo:</span>......</span></div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ev<span class="selector-class">.direction</span> == <span class="number">16</span>)&#123;</div><div class="line">        <span class="comment">//上滑, <span class="doctag">Todo:</span>......</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>常用的ev的属性</p>
</blockquote>
<ul>
<li>ev.type: 事件类型</li>
<li>ev.deltaX: X偏移量</li>
<li>ev.deltaY: Y偏移量</li>
<li>ev.direction: 方向</li>
<li>ev.distance: 移动的距离</li>
</ul>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><blockquote>
<p>♏️  监听 Pinch、Rotate、Swipe 时要为该demo元素指定触屏移动事件</p>
</blockquote>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hammertime.<span class="keyword">add</span>(<span class="keyword">new</span> Hammer.Pinch());</div><div class="line">hammertime.<span class="keyword">add</span>(<span class="keyword">new</span> Hammer.Rotate());</div></pre></td></tr></table></figure>
<blockquote>
<p>♏️  添加识别方向：DIRECTION_HORIZONTAL、DIRECTION_VERTICAL、DIRECTION_ALL</p>
</blockquote>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hammertime.get(<span class="string">'swipe'</span>)<span class="meta">.set</span>(&#123; <span class="keyword">direction: </span>Hammer.<span class="keyword">DIRECTION_VERTICAL </span>&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>♏️  多个事件监听</p>
</blockquote>
<ul>
<li><p>1.创建管理器</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="markdown">/**</span></span></div><div class="line"><span class="bullet">* </span>创建管理器</div><div class="line"><span class="bullet">* </span>@param &#123;String&#125; myElement [dom]</div><div class="line"><span class="bullet">* </span>@param &#123;String&#125; myOptions [配置参数] eg: inputTarget/touchAction/recognizers</div><div class="line">*/</div><div class="line"><span class="keyword">var</span> mc = <span class="keyword">new</span> Hammer.Manager(myElement, myOptions)</div></pre></td></tr></table></figure>
</li>
<li><p>2.给Manager添加识别器，重名的会被下面的覆盖</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">mc</span><span class="selector-class">.add</span>(<span class="selector-tag">new</span> <span class="selector-tag">Hammer</span><span class="selector-class">.Pan</span>(&#123;&#125;));</div><div class="line"><span class="selector-tag">mc</span><span class="selector-class">.add</span>(<span class="selector-tag">new</span> <span class="selector-tag">Hammer</span><span class="selector-class">.Tap</span>(&#123;&#125;));</div></pre></td></tr></table></figure>
</li>
<li><p>3.绑定事件</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mc.on(<span class="string">'pan'</span>, <span class="keyword">handler</span>);</div><div class="line">mc.on(<span class="string">'tap'</span>, <span class="keyword">handler</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>4.触发某个事件，把data发送给监听者（ data 是自定义数据 Object )</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">mc</span>.emit('pan', <span class="class"><span class="keyword">data</span>);</span></div></pre></td></tr></table></figure>
</li>
<li><p>5.解绑事件</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mc.off(<span class="string">'pan'</span>, <span class="keyword">handler</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>6.销毁 Manager ,并且解除所有绑定的事件</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mc.destroy()<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[♏️  AnimationLib-TweenLineMax基本用法]]></title>
      <url>http://yoursite.com/AnimationLib-TweenLineMax%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>version: 1.18.6<br>TweenLineMax的基本用法，更多详细内容可参考官网API<br>传送门：<a href="http://greensock.com/timelinemax" target="_blank" rel="external">http://greensock.com/timelinemax</a></p>
</blockquote>
<a id="more"></a>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建实例</span></div><div class="line">var motion = <span class="keyword">new</span> TimelineMax();</div><div class="line"></div><div class="line"><span class="comment">//添加动画</span></div><div class="line">motion.add(TweenMax.from(<span class="string">'.p1'</span>, <span class="number">1</span>, &#123;<span class="string">scale:</span><span class="number">1.2</span>, <span class="string">alpha:</span><span class="number">0</span>, <span class="string">ease:</span>Linear.easeInout, <span class="string">onStart:</span> function()&#123;&#125;&#125;));</div><div class="line">motion.add(TweenMax.to(<span class="string">'.p2'</span>, <span class="number">1</span>, &#123;<span class="string">scale:</span><span class="number">1.2</span>, <span class="string">alpha:</span><span class="number">0</span>, <span class="string">ease:</span>Linear.easeInout, <span class="string">onComplete:</span> function()&#123;&#125;&#125;));</div><div class="line">motion.pause();</div><div class="line"></div><div class="line"><span class="comment">//动画操作</span></div><div class="line">motion.play(); <span class="comment">//播放动画</span></div><div class="line">motion.pause(); <span class="comment">//暂停动画</span></div><div class="line">motion.restart(); <span class="comment">//重新播放动画</span></div></pre></td></tr></table></figure>
<h3 id="API详解"><a href="#API详解" class="headerlink" title="API详解"></a>API详解</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><blockquote>
<p>♏️  构造函数 TweenMax(target:Object, duration:Number, vars:Object)</p>
</blockquote>
<ul>
<li>target: Object – 需要缓动的对象</li>
<li>duration: Number – 缓动持续时间</li>
<li>vars: Object – 其它参数(特有属性29个，插件17个，公共属性10个，公共方法20个)</li>
</ul>
<h4 id="第三个参数（vars）的特有属性"><a href="#第三个参数（vars）的特有属性" class="headerlink" title="第三个参数（vars）的特有属性"></a>第三个参数（vars）的特有属性</h4><blockquote>
<p>♏️ 第三个参数（vars）的特有属性</p>
</blockquote>
<ol>
<li>delay : Number：延迟开始，在TweenMax动画开始前延迟的秒数。</li>
<li>useFrames : Boolean：当设置为True时，对这个TweenMax Object的时间计算方式就是基于帧frame的。</li>
<li>ease : Function：缓动方式。可以使用com.greensock.easing包下的缓动函数。</li>
<li>easeParams : Array：缓动函数参数。某些缓动函数需要传入一些参数来进行额外的控制。</li>
<li>onInit : Function：初始化函数。在TweenMax开始前，所有参数还没被传入TweenMax Object时触发。可以用来初始化运动对象的状态。</li>
<li>onInitParams : Array：初始化函数参数。</li>
<li>onStart : Function：开始函数。跟初始化函数不同，开始函数在TweenMax Object的值改变之后才触发，而且不同于初始化函数。开始函数可以被触发多次。</li>
<li>onStartParams : Array：开始函数参数。</li>
<li>onUpdate : Function：更新函数。当每次TweenMax Object数值更新的时候触发。</li>
<li>onUpdateParams : Array：更新函数参数。</li>
<li>onComplete : Function：完成函数。当TweenMax Object完成缓动后触发。</li>
<li><p>onCompleteParams : Array：完成函数参数。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attribute">x</span>:<span class="number">333</span>, y:<span class="number">333</span>, onComplete:onCompleteHander, onCompleteParam:[<span class="string">"wn"</span>,<span class="string">"334"</span>]&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">function</span> <span class="selector-tag">onCompletHandler</span>(<span class="selector-tag">value1</span><span class="selector-pseudo">:Object</span>,<span class="selector-tag">value2</span><span class="selector-pseudo">:objet)</span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>onReverseComplete : Function：回放完成函数。当TweenMax Object处于回放状态，并且回到起点时触发。</p>
</li>
<li>onReverseCompleteParams : Array：回放完成函数参数。</li>
<li>onRepeat : Function：重放函数。当TweenMax Object每次重放的时候触发。</li>
<li>onRepeatParams : Array：重放函数参数。</li>
<li>immediateRender : Boolean：立即渲染。一般来说，TweenMax Object会在下一个渲染周期（也就是下一帧）被渲染到场景中。如果想强制立即渲染，可以把这个参数设为true。另外如果想阻止一个运动周期为0的运动物体被渲染，也可以把这个参数设为false。</li>
<li>paused : Boolean：暂停。这个很好理解，设为true时TweenMax Object就会暂停缓动。</li>
<li>reversed : Boolean：反转。不知道为什么跟说明文档里的不同。我的理解是将TweenMax Object的缓动反过来播放。</li>
<li>overwrite : int：覆盖处理。定义了当对同一个物体使用TweenMax时发生冲突的处理方法。有6种模式。</li>
</ol>
<ul>
<li>模式0：NONE。不做任何处理。性能Excellent。</li>
<li>模式1：ALL_IMMEDIATE。设为该模式的TweenMax Object运动具有最高的优先级，会覆盖掉运动物体之前所有的缓动。新的TweenMax Object创建时覆盖旧的TweenMax Object。性能Excellent。</li>
<li>模式2：AUTO。是TweenMax的默认模式（原来我之前的痛苦都是因为它···）。在新的TweenMax Object第一次渲染时覆盖重复的属性（模式1是覆盖掉全部属性）。只要不是具有太多的属性需要覆盖，性能还是不错的。</li>
<li>模式3：CONCURRENT。这个单词的意思是“同时发生”。跟模式1很相似。唯一的不同是他只覆盖掉正在运行的TweenMax Object。而放过其他的没有启动的TweenMax Object。性能Very Good。</li>
<li>模式4：ALL_ONSTART。也是跟模式1非常像。两点不同是他是在TweenMax Object第一次渲染时才覆盖掉其他所有的TweenMax Object，而且这个会把在他之后创建的TweenMax Object也覆盖掉。性能Very Good。</li>
<li>模式5：PREEXISTING。这个单词一看上去很迷糊，其实是pre-existing，囧。唯一的不同是他是在TweenMax Object第一次渲染时才覆盖掉其他所有的TweenMax Object。性能Very Good。</li>
<li>如果想改变全局的TweenMax Object默认overwrite属性，可以调用哪个OverWriteManager类的全局方法init()。<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">OverwriteManager</span><span class="selector-class">.init</span>(<span class="selector-tag">OverwriteManager</span><span class="selector-class">.XXXX</span>);]</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>repeat : int：循环次数。设置为-1为无限循环。</li>
<li>repeatDelay : Number：循环延迟的时间。</li>
<li>yoyo : Boolean：YOYO球。另外一种循环的方式。像我们玩的YOYO球一样，从头到尾，再从尾到头的往返运动。PS:要与repeat同时设置。</li>
<li>onStartListener : Function：注册一个TweenEvent的监听，跟开始函数在同一时刻派发（不影响效果）。</li>
<li>onUpdateListener : Function：注册一个TweenEvent的监听，跟更新函数在同一时刻派发（不影响效果）。</li>
<li>onCompleteListener : Function：注册一个TweenEvent的监听，跟完成函数在同一时刻派发（不影响效果）。</li>
<li>onReverseCompleteListener : Function：注册一个TweenEvent的监听，跟回放完成函数在同一时刻派发（不影响效果）。</li>
<li>onRepeatListener : Function：注册一个TweenEvent的监听，跟重放函数在同一时刻派发（不影响效果）。</li>
<li>startAt : Object：重设初始值。一般TweenMax Object使用运动物体的当前状态来做初始值。但是可以使用这个参数重新设置运动物体的初始状态。</li>
</ol>
<h4 id="公共属性"><a href="#公共属性" class="headerlink" title="公共属性"></a>公共属性</h4><blockquote>
<p>♏️ 公共属性</p>
</blockquote>
<ol>
<li>动画进度<br>　　currentProgress : Number<br>　　缓动动画的进度，从0～1。</li>
<li>动画时间<br>　　currentTime : Number<br>　　与totalDuartion不同，currentTime只表示了一个TweenMax周期的时间。</li>
<li>全局缓动速度倍数<br>　　globalTimeScale : Number<br>　　类似与按XX倍速播放缓动动画，用法：TweenMax.globalTimeScale = XXX;</li>
<li>取消作用在运动物体上的所有TweenMax动画<br>　　killTweensOf : Function<br>　　这是一个对TweenLite中killTweensOf函数的引用，可以直接使用。</li>
<li>重放次数<br>　　repeat : int<br>　　跟直接在TweenMax的构造函数中传入效果一样。</li>
<li>重放延迟时间<br>　　repeatDelay : Number<br>　　跟直接在TweenMax的构造函数中传入效果一样。</li>
<li>个体缓动速度倍数<br>　　timeScale : Number<br>　　与globalTimeScale用法一样，只是这个是对单个TweenMax Object调用的。</li>
<li>总缓动进度<br>　　totalProgress : Number<br>　　这个计算的是总的缓动时间，包含了重放和重放延迟的时间。从0～1。</li>
<li>总缓动时间<br>　　totalDuration : Number<br>　　这个计算的是总的缓动时间，包含了重放和重放延迟的时间。</li>
<li>yoyo<br>　　yoyo : Boolean<br>　　跟直接在TweenMax的构造函数中传入效果一样。</li>
</ol>
<h4 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h4><blockquote>
<p>♏️ 公共方法</p>
</blockquote>
<ol>
<li><p>构造方法。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//三个参数分别是运动物体，周期，参数。</span></div><div class="line"><span class="selector-tag">TweenMax</span>(<span class="attribute">target</span>:Object, <span class="attribute">duration</span>:Number, <span class="attribute">vars</span>:Object)</div></pre></td></tr></table></figure>
</li>
<li><p>allTo（静态方法）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//头三个参数分别是：1个数组保存了多个要进行缓动的对象，周期，参数；</span></div><div class="line"><span class="comment">//后三个参数为可选，分别是：间隔时间，完成调用的函数，函数参数。</span></div><div class="line"><span class="comment">//返回的是一个数组保存了创建的所有TweenMax Object。</span></div><div class="line">allTo(</div><div class="line">    targets:<span class="built_in">Array</span>,</div><div class="line">    <span class="attr">duration</span>:<span class="built_in">Number</span>,</div><div class="line">    <span class="attr">vars</span>:<span class="built_in">Object</span>,</div><div class="line">    <span class="attr">stagger</span>:<span class="built_in">Number</span> = <span class="number">0</span>,</div><div class="line">    <span class="attr">onCompleteAll</span>:<span class="built_in">Function</span> = <span class="literal">null</span>,</div><div class="line">    <span class="attr">onCompleteAllParams</span>:<span class="built_in">Array</span> = <span class="literal">null</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>allFromTo（静态方法）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//跟allTo一样，只是多了一个参数对象可以用与定义起始状态。</span></div><div class="line">allFromTo(</div><div class="line">    targets:<span class="built_in">Array</span>,</div><div class="line">    <span class="attr">duration</span>:<span class="built_in">Number</span>,</div><div class="line">    <span class="attr">fromVars</span>:<span class="built_in">Object</span>,</div><div class="line">    <span class="attr">toVars</span>:<span class="built_in">Object</span>,</div><div class="line">    <span class="attr">stagger</span>:<span class="built_in">Number</span> = <span class="number">0</span>,</div><div class="line">    <span class="attr">onCompleteAll</span>:<span class="built_in">Function</span> = <span class="literal">null</span>,</div><div class="line">    <span class="attr">onCompleteAllParams</span>:<span class="built_in">Array</span> = <span class="literal">null</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>allFrom（静态方法）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//跟allTo一样，只是定义的是运动对象的初始状态，运动到当前状态。</span></div><div class="line">allFrom(</div><div class="line">    targets:<span class="built_in">Array</span>,</div><div class="line">    <span class="attr">duration</span>:<span class="built_in">Number</span>,</div><div class="line">    <span class="attr">vars</span>:<span class="built_in">Object</span>,</div><div class="line">    <span class="attr">stagger</span>:<span class="built_in">Number</span> = <span class="number">0</span>,</div><div class="line">    <span class="attr">onCompleteAll</span>:<span class="built_in">Function</span> = <span class="literal">null</span>,</div><div class="line">    <span class="attr">onCompleteAllParams</span>:<span class="built_in">Array</span> = <span class="literal">null</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>to（静态方法）</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//是allTo的简化版，也是很多人用TweenMax的主要目的，定义了运动物体，周期，和参数。</span></div><div class="line"><span class="comment">//返回一个TweenMax Object。</span></div><div class="line"><span class="selector-tag">to</span>(<span class="attribute">target</span>:Object, <span class="attribute">duration</span>:Number, <span class="attribute">vars</span>:Object)</div></pre></td></tr></table></figure>
</li>
<li><p>fromTo（静态方法）</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//与to一样，不过多了一个参数定义运动物体的初始状态。</span></div><div class="line"><span class="selector-tag">fromTo</span>(<span class="attribute">target</span>:Object, <span class="attribute">duration</span>:Number, <span class="attribute">fromVars</span>:Object, <span class="attribute">toVars</span>:Object)</div></pre></td></tr></table></figure>
</li>
<li><p>from（静态方法）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//跟to一样，只是定义的是运动对象的初始状态，运动到当前状态。</span></div><div class="line"><span class="keyword">from</span>(target:<span class="built_in">Object</span>, <span class="attr">duration</span>:<span class="built_in">Number</span>, <span class="attr">vars</span>:<span class="built_in">Object</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>强制完成</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//强制TweenMax到最后结束部分。如果第一个参数设为true，则不会渲染，TweenMax将停在调用那一刻。</span></div><div class="line"><span class="comment">//如果第二个参数设为true则不会触发onCompelte,onUpdate等事件。</span></div><div class="line">complete(skipRender:<span class="keyword">Boolean</span> = <span class="keyword">false</span>, suppressEvents:<span class="keyword">Boolean</span> = <span class="keyword">false</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>延迟执行函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//跟AS3自带的setTimeout几乎一样，是他们的AS3版。</span></div><div class="line">delayedCall(</div><div class="line">    delay:<span class="built_in">Number</span>,</div><div class="line">    <span class="attr">onComplete</span>:<span class="built_in">Function</span>,</div><div class="line">    <span class="attr">onCompleteParams</span>:<span class="built_in">Array</span> = <span class="literal">null</span>,</div><div class="line">    <span class="attr">useFrames</span>:<span class="built_in">Boolean</span> = <span class="literal">false</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>返回正在运行的的所有TweenMax Object（静态方法）</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　<span class="selector-tag">getAllTweens</span>()</div></pre></td></tr></table></figure>
</li>
<li><p>返回运动物体正在运行的的TweenMax Object（静态方法）</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　getTweensOf(<span class="name">target</span><span class="symbol">:Object</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>清除初始值</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当从新播放一段TweenMax Object时（即调用restart()方法），</span></div><div class="line"><span class="comment">//如果想从新设置新的初始值，可以调用此方法清空原有初始值。</span></div><div class="line"><span class="comment">//调用后此TweenMax Object会将当前位置作为新的初始值。</span></div><div class="line"><span class="function"><span class="title">invalidate</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>判断是否正在缓动（静态方法）</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//正在缓动返回true,否则false。</span></div><div class="line"><span class="selector-tag">isTweening</span>(<span class="attribute">target</span>:Object)<span class="selector-pseudo">:Boolean</span></div></pre></td></tr></table></figure>
</li>
<li><p>清除所有TweenMax Object（静态方法）　　</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//三个参数，第一个设为true可以强制先完成再清除，</span></div><div class="line"><span class="comment">//第二个是清除所有的缓动，</span></div><div class="line"><span class="comment">//第三个是清除所有的函数延迟执行。</span></div><div class="line">killAll(</div><div class="line">    complete:<span class="keyword">Boolean</span> = <span class="keyword">false</span>,</div><div class="line">    tweens:<span class="keyword">Boolean</span> = <span class="keyword">true</span>,</div><div class="line">    delayedCalls:<span class="keyword">Boolean</span> = <span class="keyword">true</span>):<span class="keyword">void</span></div></pre></td></tr></table></figure>
</li>
<li><p>清除所有子对象的TweenMax Object（静态方法）</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将一个DisplayObjectContainer的所有子对象的TweenMax Object。可以选择先强制完成。</span></div><div class="line">killChildTweensOf(parentisplayObjectContainer, complete:<span class="keyword">Boolean</span> = <span class="keyword">false</span>):<span class="keyword">void</span></div></pre></td></tr></table></figure>
</li>
<li><p>清除某个属性的缓动</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//传入的是一个数组，以字符串的形式。</span></div><div class="line"><span class="comment">//例：_tweenMax.killProperties(["x"]);</span></div><div class="line"><span class="selector-tag">killProperties</span>(<span class="attribute">names</span>:Array)<span class="selector-pseudo">:void</span></div></pre></td></tr></table></figure>
</li>
<li><p>全部暂停（静态方法）</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//全部暂停TweenMax Object(可选)，函数延迟执行（可选）。</span></div><div class="line">pauseAll(tweens:<span class="keyword">Boolean</span> = <span class="keyword">true</span>, delayedCalls:<span class="keyword">Boolean</span> = <span class="keyword">true</span>):<span class="keyword">void</span></div></pre></td></tr></table></figure>
</li>
<li><p>全部恢复（静态方法）<br>全部恢复TweenMax Object(可选)，函数延迟执行（可选）。</p>
</li>
<li><p>重定向终点</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一个参数是对应的属性值，</span></div><div class="line"><span class="comment">//第二个是要设置的新值，</span></div><div class="line"><span class="comment">//第三个参数是是否要对应调整起点，让转变看起来没那么 skipping/jerking（意会吧，突兀？），</span></div><div class="line"><span class="comment">//就是要注意如果是要反播缓动动画的话可能会无法重定向到起点。一般不建议和updateTo一起用。</span></div><div class="line"><span class="selector-tag">setDestination</span>(</div><div class="line">    <span class="attribute">property</span>:String, <span class="attribute">value</span>:*,</div><div class="line">    <span class="attribute">adjustStartValues</span>:Boolen = true)<span class="selector-pseudo">:void</span></div></pre></td></tr></table></figure>
</li>
<li><p>重定向属性</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//可以在运行中新增或改变原有的属性变化值。</span></div><div class="line"><span class="comment">//第二个参数设为false时将不重播缓动，而继续缓动到新的值；</span></div><div class="line"><span class="comment">//设为true将中断并重播缓动。</span></div><div class="line">updateTo(<span class="string">vars:</span>Object, <span class="string">resetDuration:</span>Boolean = <span class="literal">false</span>):<span class="keyword">void</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Ease动画效果"><a href="#Ease动画效果" class="headerlink" title="Ease动画效果"></a>Ease动画效果</h4><blockquote>
<p>♏️ Ease动画效果</p>
</blockquote>
<ol>
<li>Linear线性变化<br>字面意思就很好理解，线性变化，就是匀速。<br> <img src="/images/Animation/1.jpg" alt="1"></li>
<li>Back变化<br>不知道怎么解释好，Back有回来的意思，在缓动前，会先往回运动一段距离。<br> <img src="/images/Animation/2.jpg" alt="2"></li>
<li>Bounce弹跳变化<br>顾名思义，在变化前会几次回归原点，好像在弹一样。<br> <img src="/images/Animation/3.jpg" alt="3"></li>
<li>Circ圆形变化<br>这个翻译···我…将就吧…，运动的曲线是一个圆形的弧度。<br> <img src="/images/Animation/4.jpg" alt="4"></li>
<li>Cubic立方体变化<br>这个更晕，跟圆形变化差不多，不过更平滑些。<br> <img src="/images/Animation/5.jpg" alt="5"></li>
<li>Elastic橡皮圈变化<br>这个···翻译，我麻木了···跟Back变化有点像，但是会有一个很强的波动。在EaseIn和EaseOut时尤为明显。<br> <img src="/images/Animation/6.jpg" alt="6"></li>
<li>Expo爆炸变化<br>一直很平缓，在最后一点完成所有变化。<br> <img src="/images/Animation/7.jpg" alt="7"></li>
<li>Quad变化<br>不知道Quad代表什么意思，不过是比较普通的缓动。Quadratic平方缓动？？。<br> <img src="/images/Animation/8.jpg" alt="8"></li>
<li>Quart四分之一变化。<br>我猜Quart是Quarter的意思，有1/4的时间是没有缓动。<br> <img src="/images/Animation/9.jpg" alt="9"></li>
<li>Quint变化<br>百度一下是什么五胞胎之一？晕了，是1/5时间没有缓动吗？<br><img src="/images/Animation/10.jpg" alt="10"></li>
<li>Sine正弦变化<br>像正弦一样的变化～？猜得····<br><img src="/images/Animation/11.jpg" alt="11"></li>
<li>Strong变化。<br>这个没有图···因为他没有图···汗···字面意思理解就是很强的变化。<hr>
以上是12种内置的变化，所以准确来说是有36种的，那剩下的4个类是做什么的呢。<hr>
</li>
<li><p>EaseLookup<br>包含一个静态方法fine(),可以通过字符串String直接取得ease的实例。方便一些反射操作的需要。例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">TweenMax</span><span class="selector-class">.to</span>(<span class="selector-tag">ball</span>, 1, &#123; <span class="attribute">x</span>:<span class="number">200</span>,ease:EaseLookup.<span class="built_in">find</span>(<span class="string">"backEaseInOut"</span>) &#125; );</div></pre></td></tr></table></figure>
</li>
<li><p>FastEase<br>AS3的TweenMax版本有内置的算法可以加速缓动效果。需要用这个类的静态方法activate()手动打开。可以提高35%～80%的缓动计算，提高2%～15%的整个缓动效率。<br>可以被加速的缓动变化包括：Linear Quad Cubic Quart Quint Strong这六种而已。打开方法，例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">FastEase</span><span class="selector-class">.activate</span>(<span class="selector-attr">[Strong, Linear, Quad]</span>);</div></pre></td></tr></table></figure>
<p>还有另外一个静态方法activateEase(ease:Function, type:int, power:uint):void，是用来把这种优化方法用在非com.greensock的缓动上的，例如用在AS3自带的缓动类。</p>
</li>
<li><p>RoughEase</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">RoughEase(</div><div class="line">    strength:Number = <span class="number">1</span>,</div><div class="line">    points:uint = <span class="number">20</span>,</div><div class="line">    restrictMaxAndMin:<span class="built_in">Boolean</span> = <span class="literal">false</span>,</div><div class="line">    templateEase:Function = <span class="built_in">null</span>,</div><div class="line">    taper:<span class="built_in">String</span> = <span class="string">"none"</span>,</div><div class="line">    randomize:<span class="built_in">Boolean</span> = <span class="literal">true</span>,</div><div class="line">    name:<span class="built_in">String</span> = <span class="string">""</span>)</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 通常的缓动变化都是很平滑的，如果想要一个不平滑的效果，就可以使用RoughEase。</div><div class="line"> * 这里列出的是他的构造方法，其中：</div><div class="line"> * strength:Number：随机点的幅度。</div><div class="line"> * points:uint：随机点的数量。</div><div class="line"> * restrictMaxAndMin:Boolean: 当设为true时，随机数的变化会在初始值和终点值之间波动。</div><div class="line"> * 							  当为false时，随机数的变化可能会超过这个区间。</div><div class="line"> * templateEase:Function：随机点作用的缓动模板。默认是Linear.easeNone。</div><div class="line"> * taper:String：随机变化趋向那一端，"in”的话趋向于起点，"out"的话趋向于终点。默认是"none"。</div><div class="line"> * randomize:Boolean：设为true时，缓动位置将会随机变化。如果为false时，缓动位置将会锯齿型变化。</div><div class="line"> * name:String ：为roughEase实例命名，这样以后可以使用静态方法byName()获取引用。</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">//用法：</span></div><div class="line"></div><div class="line"><span class="comment">//例1，直接使用：</span></div><div class="line"></div><div class="line">TweenLite.<span class="keyword">to</span>(ball, <span class="number">2</span>, &#123;y:<span class="number">0</span>, ease:RoughEase.create(<span class="number">1</span>, <span class="number">20</span>, <span class="literal">true</span>, Bounce.easeInOut)&#125;);</div><div class="line"></div><div class="line"><span class="comment">//例2，生成实例调用：</span></div><div class="line"></div><div class="line"><span class="built_in">var</span> _roughEase:RoughEase = <span class="literal">new</span> RoughEase(<span class="number">1</span>,<span class="number">20</span>,<span class="literal">true</span>, Strong.easeOut, <span class="string">"none"</span>, <span class="literal">true</span>, <span class="string">"superRoughEase"</span>);</div><div class="line"></div><div class="line"><span class="comment">//然后直接调用：</span></div><div class="line"></div><div class="line">TweenLite.<span class="keyword">to</span>(mc, <span class="number">3</span>, &#123;y:<span class="number">300</span>, ease:rough.ease&#125;);</div><div class="line"></div><div class="line"><span class="comment">//或者：</span></div><div class="line"></div><div class="line">TweenLite.<span class="keyword">to</span>(mc, <span class="number">3</span>, &#123;y:<span class="number">300</span>, ease:RoughEase.byName(<span class="string">"superRoughEase"</span>)&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>CustumEase<br>自建缓动效果。基本不能直接编写。需要登录这个网址 (<a href="http://blog.greensock.com/customease/" target="_blank" rel="external">http://blog.greensock.com/customease/</a>) 使用图形界面工具生成代码。然后COPY代码到你的项目中应用。例：<br>创建：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">CustomEase.create(</div><div class="line">    <span class="string">"myCustomEase"</span>,</div><div class="line">    [</div><div class="line">        &#123;<span class="string">s:</span><span class="number">0</span>,<span class="string">cp:</span><span class="number">0.814</span>,<span class="string">e:</span><span class="number">0.908</span>&#125;,</div><div class="line">        &#123;<span class="string">s:</span><span class="number">0.908</span>,<span class="string">cp:</span><span class="number">1.002</span>,<span class="string">e:</span><span class="number">0.376</span>&#125;,</div><div class="line">        &#123;<span class="string">s:</span><span class="number">0.376</span>,<span class="string">cp:</span><span class="number">-0.25</span>,<span class="string">e:</span><span class="number">1</span>&#125;</div><div class="line">    ]</div><div class="line">);</div><div class="line"><span class="comment">//使用：</span></div><div class="line">TweenMax.to(mc, <span class="number">2</span>, &#123;<span class="string">x:</span><span class="string">"250"</span>, <span class="string">ease:</span>CustomEase.byName(<span class="string">"myCustomEase"</span>)&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>这一篇有点长。感兴趣的同学可以耐心看一下。有什么问题和建议可以随时和我聊一聊 ♏️</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[♏️  AnimationLib-PreloadJS基本用法]]></title>
      <url>http://yoursite.com/AnimationLib-PreloadJS%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>version: 0.6.2<br>PreloadJS的基本用法，更多详细内容可参考官网API<br>传送门：<a href="http://createjs.com/docs/preloadjs/modules/PreloadJS.html" target="_blank" rel="external">http://createjs.com/docs/preloadjs/modules/PreloadJS.html</a></p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>PreloadJS提供了一个一致的方式预先加载在HTML应用的内容，以及预加载可以使用HTML标签作为XHR完成。</li>
<li>默认， PreloadJS 将尝试使用XHR加载内容，因为它提供了进度和完成事件方面的更好支持， 然而由于跨域的问题，它可能仍然是优选使用基于标签的负载代替。 请注意，某些内容要求XHR工作（纯文本，网页音频）和一些需要的标签（HTML音频）。请注意，在可能的情况下它是自动处理的。</li>
</ul>
<a id="more"></a>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建实例</span></div><div class="line"><span class="keyword">var</span> queue = <span class="keyword">new</span> createjs.LoadQueue();</div><div class="line"></div><div class="line"><span class="comment">// 绑定事件</span></div><div class="line">queue.on(<span class="string">"progress"</span>, handelProgress, <span class="keyword">this</span>);</div><div class="line">queue.on(<span class="string">"complete"</span>, handleComplete, <span class="keyword">this</span>);</div><div class="line"></div><div class="line"><span class="comment">//加载资源</span></div><div class="line">queue.loadFile(&#123;<span class="attr">id</span>:<span class="string">"sound"</span>, <span class="attr">src</span>:<span class="string">"http://path/to/sound.mp3"</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">//资源数组</span></div><div class="line">queue.loadManifest([</div><div class="line">    &#123;<span class="attr">id</span>: <span class="string">"myImage"</span>, <span class="attr">src</span>:<span class="string">"path/to/myImage.jpg"</span>&#125;</div><div class="line">]);</div><div class="line"></div><div class="line"><span class="comment">//callback函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handelProgress</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="comment">//<span class="doctag">Todo:</span> 加载过程可以显示加载进度......</span></div><div class="line">    $(<span class="string">'.loadingText'</span>).text(<span class="built_in">Math</span>.ceil(e.loaded * <span class="number">100</span>) + <span class="string">'%'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleComplete</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="comment">//<span class="doctag">Todo:</span> 预加载结束后......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="事件的种类"><a href="#事件的种类" class="headerlink" title="事件的种类"></a>事件的种类</h3><ul>
<li>complete: 当队列完成加载所有文件时</li>
<li>error: 当队列与任何文件遇到错误时</li>
<li>progress: 对于整个队列进展已经改变</li>
<li>fileload: 单个文件已完成加载</li>
<li>fileprogress: 单个文件进度的变化</li>
</ul>
<h3 id="PreloadJS的主类：LoadQueue"><a href="#PreloadJS的主类：LoadQueue" class="headerlink" title="PreloadJS的主类：LoadQueue"></a>PreloadJS的主类：LoadQueue</h3><ul>
<li>LoadQueue类是预加​​载内容的主要API。 LoadQueue是负载管理器，可以预载单个文件或文件队列。</li>
</ul>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">LoadQueue</span>([preferXHR=true], [basePath=<span class="string">''</span>], [crossOrigin=<span class="string">''</span>]);</div></pre></td></tr></table></figure>
<blockquote>
<p>preferXHR: 这个表明是用 XHR 还是 HTML 标签来加载。默认是 true ,也就是 XHR 方式。<br>basePath: 一个基本的路径。加载资源时会把 basePath 加到 url 前面。<br>crossOrigin: 建议不要使用，用 LoadItem.crossOrigin 来替代。</p>
</blockquote>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>1.设置并发数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">queue</span>.maintainScriptOrder = <span class="literal">true</span>;</div><div class="line"><span class="built_in">queue</span>.setMaxConnections(<span class="number">100</span>);</div></pre></td></tr></table></figure></p>
<p>2.某个资源加载完后的获取<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> img = queue.getResult(<span class="string">'myImage'</span>);</div><div class="line"><span class="built_in">document</span>.body.appendChild(img);</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Canvas的基本用法]]></title>
      <url>http://yoursite.com/Canvas%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>canvas系列</p>
</blockquote>
<h3 id="canvas元素"><a href="#canvas元素" class="headerlink" title="canvas元素"></a>canvas元素</h3><ul>
<li>当不使用元素属性设置canvas的宽高时，默认初始化宽度300px和高度150px</li>
<li>可以通过css定义canvas的大小，但css指定的尺寸和canvas初始比例不一致时，会出现扭曲，因此建议始终通过width和height属性来指定canvas大小</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="selector-tag">canvas</span> id=<span class="string">"demo"</span> <span class="attribute">width</span>=<span class="string">"300"</span> height=<span class="string">"150"</span>&gt;</div><div class="line">    您使用的浏览器不支持canvas，请升级浏览器</div><div class="line">&lt;/canvas&gt;</div></pre></td></tr></table></figure>
<h3 id="获取渲染上下文"><a href="#获取渲染上下文" class="headerlink" title="获取渲染上下文"></a>获取渲染上下文</h3><ul>
<li>canvas元素创造了一个固定大小的画布</li>
<li>并提供了一个渲染上下文，用来绘制或处理需要展示的内容</li>
<li>如何获取渲染上下文</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> demo = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>)</div><div class="line"><span class="keyword">let</span> ctx = demo.getContext(<span class="string">'2d'</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>检查浏览器支持情况</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">if</span><span class="params">(demo.getContext)</span></span>&#123;</div><div class="line">    ctx = demo.getContext(<span class="string">'2d'</span>)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h3><ul>
<li>坐标原点：左上角</li>
<li>X轴向右为正方向</li>
<li>Y轴向下为正方向</li>
</ul>
<h4 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h4><blockquote>
<p>canvas唯一支持的不通过路径进行绘制的图形</p>
</blockquote>
<h5 id="ctx-fillRect-x-y-width-height"><a href="#ctx-fillRect-x-y-width-height" class="headerlink" title="ctx.fillRect(x, y, width, height)"></a>ctx.fillRect(x, y, width, height)</h5><blockquote>
<p>绘制填充的矩形</p>
</blockquote>
<ul>
<li>x: x轴坐标</li>
<li>y: y轴坐标</li>
<li>width: 矩形的宽度</li>
<li>height: 矩形的高度</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ctx.fillStyle = 'green'</div><div class="line">ctx.fillRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>) <span class="comment">// 在坐标(0, 0)的位置开始绘制一个宽高都是100px的矩形</span></div></pre></td></tr></table></figure>
<p><img src="http://i2.buimg.com/1949/7aab1d95d8c92bed.jpg" alt="矩形"></p>
<h5 id="ctx-strokeRect-x-y-width-height"><a href="#ctx-strokeRect-x-y-width-height" class="headerlink" title="ctx.strokeRect(x, y, width, height)"></a>ctx.strokeRect(x, y, width, height)</h5><blockquote>
<p>绘制一个矩形的边框</p>
</blockquote>
<ul>
<li>参数同fillRect()</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ctx.strokeStyle = 'blue'</div><div class="line">ctx.strokeRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>) <span class="comment">// 为前面绘制的矩形用蓝色进行描边</span></div></pre></td></tr></table></figure>
<p><img src="http://i2.buimg.com/1949/87a445c38e90807c.jpg" alt="xx"></p>
<h5 id="ctx-clearRect-x-y-width-height"><a href="#ctx-clearRect-x-y-width-height" class="headerlink" title="ctx.clearRect(x, y, width, height)"></a>ctx.clearRect(x, y, width, height)</h5><blockquote>
<p>清除指定矩形区域，让清楚的部分完全透明</p>
</blockquote>
<ul>
<li>参数同fillRect()</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.clearRect(<span class="number">15</span>, <span class="number">15</span>, <span class="number">90</span>, <span class="number">90</span>)</div></pre></td></tr></table></figure>
<p><img src="http://i2.buimg.com/1949/14c248b6ba9fc2ce.jpg" alt="xx"></p>
<h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><blockquote>
<p>图形的基本元素是路径<br>创建路径需要如下步骤  </p>
</blockquote>
<ul>
<li>创建路径的起点</li>
<li>使用画图命令画出路径</li>
<li>把路径封闭(非必需)</li>
<li>通过路径来渲染图形</li>
</ul>
<h5 id="ctx-beginPath"><a href="#ctx-beginPath" class="headerlink" title="ctx.beginPath()"></a>ctx.beginPath()</h5><blockquote>
<p>开始绘制路径  </p>
</blockquote>
<h5 id="ctx-moveTo-x-y"><a href="#ctx-moveTo-x-y" class="headerlink" title="ctx.moveTo(x, y)"></a>ctx.moveTo(x, y)</h5><blockquote>
<p>将🖌️移动到指定的坐标点<br>准备开始绘制路径<br>可以在绘制路径过程中不断执行此方法，从而绘制出不连续的路径  </p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath()</div><div class="line">ctx.arc(<span class="number">75</span>, <span class="number">75</span>, <span class="number">50</span>, <span class="number">0</span>, Math.<span class="literal">PI</span> * <span class="number">2</span>, true) <span class="comment">// arc方法请往下看</span></div><div class="line">ctx.moveTo(<span class="number">110</span>, <span class="number">75</span>)</div><div class="line">ctx.arc(<span class="number">75</span>, <span class="number">75</span>, <span class="number">35</span>, <span class="number">0</span>, Math.<span class="literal">PI</span>, false)</div><div class="line">ctx.moveTo(<span class="number">65</span>, <span class="number">65</span>)</div><div class="line">ctx.arc(<span class="number">60</span>, <span class="number">65</span>, <span class="number">5</span>, <span class="number">0</span>, Math.<span class="literal">PI</span> * <span class="number">2</span>, true)</div><div class="line">ctx.moveTo(<span class="number">95</span>, <span class="number">65</span>)</div><div class="line">ctx.arc(<span class="number">90</span>, <span class="number">65</span>, <span class="number">5</span>, <span class="number">0</span>, Math.<span class="literal">PI</span> * <span class="number">2</span>, true)</div><div class="line">ctx.strokeStyle = 'green'</div><div class="line">ctx.stroke()</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/1949/6c37dfb5af1ea051.jpg" alt="xx"></p>
<h5 id="ctx-lineTo-x-y"><a href="#ctx-lineTo-x-y" class="headerlink" title="ctx.lineTo(x, y)"></a>ctx.lineTo(x, y)</h5><blockquote>
<p>绘制一条从当前位置到指定坐标点的直线</p>
</blockquote>
<ul>
<li>x, y: 结束位置的坐标点</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath()</div><div class="line">ctx.moveTo(<span class="number">10</span>, <span class="number">10</span>)</div><div class="line">ctx.lineTo(<span class="number">110</span>, <span class="number">110</span>)</div><div class="line">ctx.lineTo(<span class="number">110</span>, <span class="number">10</span>)</div><div class="line">ctx.closePath()</div><div class="line">ctx.fillStyle = 'red'</div><div class="line">ctx.fill()</div><div class="line">ctx.stroke()</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/1949/ebe4581785363ee5.jpg" alt="xx"></p>
<h5 id="ctx-arc-x-y-radius-startAngle-endAngle-anticlockwise"><a href="#ctx-arc-x-y-radius-startAngle-endAngle-anticlockwise" class="headerlink" title="ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise)"></a>ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise)</h5><ul>
<li>x, y: 圆弧的圆心的坐标</li>
<li>radius: 圆弧的半径</li>
<li>startAngle: 从startAngle的<code>弧度</code>开始，以x轴为基准</li>
<li>endAngle: 到endAngle的<code>弧度</code>结束，以x轴为基准</li>
<li>anticlockwise: 绘制的方向，默认顺时针。<code>true 逆时针</code>，<code>false 顺时针</code></li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">for(let i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</div><div class="line">    for(let j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</div><div class="line">        let raduis = <span class="number">10</span></div><div class="line">        let x = (raduis + <span class="number">2</span>) * (j + <span class="number">1</span>) * <span class="number">2</span></div><div class="line">        let y = (raduis + <span class="number">2</span>) * (i + <span class="number">1</span>) * <span class="number">2</span></div><div class="line">        let startAngle = <span class="number">0</span></div><div class="line">        let endAngle = (Math.<span class="literal">PI</span> / <span class="number">180</span>) * (i + <span class="number">1</span>) * (j + <span class="number">1</span>) * <span class="number">10</span></div><div class="line">        ctx.beginPath()</div><div class="line">        ctx.arc(x, y, raduis, startAngle, endAngle)</div><div class="line">        ctx.strokeStyle = 'green'</div><div class="line">        ctx.stroke()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i2.buimg.com/574382/cf830b62408422dd.jpg" alt="xx"></p>
<h5 id="ctx-quadraticCurveTo-cp1x-cp1y-x-y"><a href="#ctx-quadraticCurveTo-cp1x-cp1y-x-y" class="headerlink" title="ctx.quadraticCurveTo(cp1x, cp1y, x, y)"></a>ctx.quadraticCurveTo(cp1x, cp1y, x, y)</h5><ul>
<li>从当前位置开始绘制二次贝赛尔曲线</li>
<li>cp1x, cp1y: 控制点的坐标</li>
<li>x, y: 结束点的坐标</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>)</div><div class="line">ctx.quadraticCurveTo(<span class="number">0</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">100</span>)</div><div class="line">ctx.quadraticCurveTo(<span class="number">100</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">50</span>)</div><div class="line">ctx.fill()</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/574382/0bd26d3e169855be.jpg" alt="xx"></p>
<h5 id="ctx-bezierCurveTo-cp1x-cp1y-cp2x-cp2y-x-y"><a href="#ctx-bezierCurveTo-cp1x-cp1y-cp2x-cp2y-x-y" class="headerlink" title="ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)"></a>ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</h5><ul>
<li>绘制三次贝赛尔曲线</li>
<li>三次贝赛尔曲线有两个控制点(cp1x, cp1y)/(cp2x, cp2y)</li>
</ul>
<h5 id="ctx-rect-x-y-width-height"><a href="#ctx-rect-x-y-width-height" class="headerlink" title="ctx.rect(x, y, width, height)"></a>ctx.rect(x, y, width, height)</h5><ul>
<li>绘制一条矩形的路径</li>
<li>和fillRect和strokeRect的区别是: rect画的仅仅是一条路径，没有渲染！！！</li>
<li>绘制圆角矩形</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function roundedRect(ctx, x, y, <span class="built_in">width</span>, <span class="built_in">height</span>, <span class="built_in">radius</span>)&#123;</div><div class="line">    ctx.beginPath()</div><div class="line">    ctx.moveTo(x, y + <span class="built_in">radius</span>)</div><div class="line">    ctx.lineTo(x, y + <span class="built_in">height</span> - <span class="built_in">radius</span>)</div><div class="line">    ctx.quadraticCurveTo(x, y + <span class="built_in">height</span>, x + <span class="built_in">radius</span>, y + <span class="built_in">height</span>)</div><div class="line">    ctx.lineTo(x + <span class="built_in">width</span> - <span class="built_in">radius</span>, y + <span class="built_in">height</span>)</div><div class="line">    ctx.quadraticCurveTo(x + <span class="built_in">width</span>, y + <span class="built_in">height</span>, x + <span class="built_in">width</span>, y + <span class="built_in">height</span> - <span class="built_in">radius</span>)</div><div class="line">    ctx.lineTo(x + <span class="built_in">width</span>, y + <span class="built_in">radius</span>)</div><div class="line">    ctx.quadraticCurveTo(x + <span class="built_in">width</span>, y, x + <span class="built_in">width</span> - <span class="built_in">radius</span>, y)</div><div class="line">    ctx.lineTo(x + <span class="built_in">radius</span>, y)</div><div class="line">    ctx.quadraticCurveTo(x, y, x, y + <span class="built_in">radius</span>)</div><div class="line">    ctx.stroke()</div><div class="line">&#125;</div><div class="line">roundedRect(ctx, <span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">10</span>)</div></pre></td></tr></table></figure>
<p><img src="http://i2.buimg.com/574382/7b3db1e31500096c.jpg" alt="xx"></p>
<h5 id="ctx-path2D"><a href="#ctx-path2D" class="headerlink" title="ctx.path2D()"></a>ctx.path2D()</h5><blockquote>
<p>用于缓存或记录绘画命令<br>方便快速的回顾路径<br>所有的路径方法都可以在path2D的实例中使用  </p>
</blockquote>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let rectangle = new Path2D()</div><div class="line">rectangle.rect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">50</span>)</div><div class="line"></div><div class="line">let circle = new Path2D()</div><div class="line">circle.moveTo(<span class="number">125</span>, <span class="number">35</span>)</div><div class="line">circle.arc(<span class="number">100</span>, <span class="number">35</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">2</span> * Math.<span class="literal">PI</span>)</div><div class="line"></div><div class="line">ctx.stroke(rectangle)</div><div class="line">ctx.fill(circle)</div></pre></td></tr></table></figure>
<p><img src="http://i4.piimg.com/574382/567f82ae195b55a2.jpg" alt="xx"></p>
<h3 id="样式和颜色"><a href="#样式和颜色" class="headerlink" title="样式和颜色"></a>样式和颜色</h3><h4 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h4><h5 id="ctx-fillStyle"><a href="#ctx-fillStyle" class="headerlink" title="ctx.fillStyle"></a>ctx.fillStyle</h5><ul>
<li>设置填充颜色</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ctx<span class="selector-class">.fillStyle</span> = <span class="string">'green'</span></div><div class="line">ctx<span class="selector-class">.fillStyle</span> = <span class="string">'#00ff00'</span></div><div class="line">ctx<span class="selector-class">.fillStyle</span> = <span class="string">'rgb(0, 255, 0)'</span></div><div class="line">ctx<span class="selector-class">.fillStyle</span> = <span class="string">'rgba(0, 255, 0, 0.5)'</span></div></pre></td></tr></table></figure>
<h5 id="ctx-strokeStyle"><a href="#ctx-strokeStyle" class="headerlink" title="ctx.strokeStyle"></a>ctx.strokeStyle</h5><ul>
<li>设置描边颜色</li>
</ul>
<h4 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h4><h5 id="ctx-globalAlpha"><a href="#ctx-globalAlpha" class="headerlink" title="ctx.globalAlpha"></a>ctx.globalAlpha</h5><ul>
<li>设置图形和图片的透明度</li>
<li>取值在0-1之间，默认值为1，即不透明</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ctx.fillStyle = 'blue'</div><div class="line">ctx.fillRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>)</div><div class="line">ctx.globalAlpha = <span class="number">0.5</span></div><div class="line">ctx.fillStyle = 'green'</div><div class="line">ctx.fillRect(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>)</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/574382/0cf50444001a3184.jpg" alt="xx"></p>
<h4 id="线型"><a href="#线型" class="headerlink" title="线型"></a>线型</h4><h5 id="ctx-lineWidth"><a href="#ctx-lineWidth" class="headerlink" title="ctx.lineWidth"></a>ctx.lineWidth</h5><ul>
<li>设置或获取线段的粗细</li>
<li>取值正数，默认为1</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">5</span></div><div class="line">ctx.fillStyle = 'gray'</div><div class="line">ctx.fillRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>)</div><div class="line">ctx.strokeRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>)</div></pre></td></tr></table></figure>
<h5 id="ctx-lineCap"><a href="#ctx-lineCap" class="headerlink" title="ctx.lineCap"></a>ctx.lineCap</h5><ul>
<li>设置线段末端的样式</li>
<li>枚举值：<code>butt(默认)</code> <code>round</code> <code>square</code></li>
<li>绘制相同长度的线段时，不同lineCap的长度不同，<code>round</code>和<code>square</code>比<code>butt</code>长出<code>lineWidth/2</code></li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="comment">// 绘制lineCap为butt的线段</span></div><div class="line">ctx.beginPath()</div><div class="line">ctx.moveTo(<span class="number">10</span>, <span class="number">10</span>)</div><div class="line">ctx.lineTo(<span class="number">10</span>, <span class="number">100</span>)</div><div class="line">ctx.stroke()</div><div class="line"></div><div class="line"><span class="comment">// 绘制lineCap为round的线段</span></div><div class="line">ctx.lineCap = 'round'</div><div class="line">ctx.beginPath()</div><div class="line">ctx.moveTo(<span class="number">40</span>, <span class="number">10</span>)</div><div class="line">ctx.lineTo(<span class="number">40</span>, <span class="number">100</span>)</div><div class="line">ctx.stroke()</div><div class="line"></div><div class="line"><span class="comment">// 绘制lineCap为square的线段</span></div><div class="line">ctx.lineCap = 'square'</div><div class="line">ctx.beginPath()</div><div class="line">ctx.moveTo(<span class="number">80</span>, <span class="number">10</span>)</div><div class="line">ctx.lineTo(<span class="number">80</span>, <span class="number">100</span>)</div><div class="line">ctx.stroke()</div></pre></td></tr></table></figure>
<h5 id="ctx-lineJoin"><a href="#ctx-lineJoin" class="headerlink" title="ctx.lineJoin"></a>ctx.lineJoin</h5><ul>
<li>指定两个相连路径的连接部分的样式</li>
<li>枚举值: <code>bevel</code> <code>round</code> <code>miter(默认)</code></li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">10</span></div><div class="line">ctx.beginPath()</div><div class="line">ctx.moveTo(<span class="number">10</span>, <span class="number">10</span>)</div><div class="line">ctx.lineTo(<span class="number">60</span>, <span class="number">60</span>)</div><div class="line">ctx.lineTo(<span class="number">110</span>, <span class="number">10</span>)</div><div class="line">ctx.stroke()</div><div class="line"></div><div class="line">ctx.lineJoin = 'round'</div><div class="line">ctx.beginPath()</div><div class="line">ctx.moveTo(<span class="number">150</span>, <span class="number">10</span>)</div><div class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">60</span>)</div><div class="line">ctx.lineTo(<span class="number">250</span>, <span class="number">10</span>)</div><div class="line">ctx.stroke()</div><div class="line"></div><div class="line">ctx.lineJoin = 'bevel'</div><div class="line">ctx.beginPath()</div><div class="line">ctx.moveTo(<span class="number">300</span>, <span class="number">10</span>)</div><div class="line">ctx.lineTo(<span class="number">350</span>, <span class="number">60</span>)</div><div class="line">ctx.lineTo(<span class="number">400</span>, <span class="number">10</span>)</div><div class="line">ctx.stroke()</div></pre></td></tr></table></figure>
<h5 id="ctx-miterLimit"><a href="#ctx-miterLimit" class="headerlink" title="ctx.miterLimit"></a>ctx.miterLimit</h5><ul>
<li>当lineJoin被设置为<code>miter</code>时，两条线段的外侧会延伸，直至相交</li>
<li>miterLimit是设置向外延伸的最大值，一旦超过这个最大值，这不再延伸，而是lineJoin变为<code>bevel</code>模式</li>
</ul>
<h4 id="虚线"><a href="#虚线" class="headerlink" title="虚线"></a>虚线</h4><h5 id="ctx-setLineDash-arr"><a href="#ctx-setLineDash-arr" class="headerlink" title="ctx.setLineDash(arr)"></a>ctx.setLineDash(arr)</h5><ul>
<li>设置虚线样式</li>
<li>arr: 虚线线段长度和间距长度的数组，数组长度可为2或者3。如<code>[10, 20]</code> <code>[10, 20, 30]</code></li>
<li>如果数组元素的数量是奇数，数组元素会被复制并重复一次</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ctx.lineWidth = <span class="number">10</span></div><div class="line">ctx.setLineDash([<span class="number">10</span>, <span class="number">20</span>， <span class="number">30</span>])</div><div class="line">ctx.beginPath()</div><div class="line">ctx.moveTo(<span class="number">20</span>, <span class="number">20</span>)</div><div class="line">ctx.lineTo(<span class="number">500</span>, <span class="number">500</span>)</div><div class="line">ctx.stroke()</div></pre></td></tr></table></figure>
<h5 id="ctx-getLineDash"><a href="#ctx-getLineDash" class="headerlink" title="ctx.getLineDash()"></a>ctx.getLineDash()</h5><ul>
<li>返回值：一组描述交替绘制线段和间距（坐标空间单位）长度的数字</li>
</ul>
<h5 id="ctx-lineDashOffset"><a href="#ctx-lineDashOffset" class="headerlink" title="ctx.lineDashOffset"></a>ctx.lineDashOffset</h5><ul>
<li>设置虚线偏移量</li>
</ul>
<h4 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h4><h5 id="ctx-createLinearGradient-x0-y0-x1-y1"><a href="#ctx-createLinearGradient-x0-y0-x1-y1" class="headerlink" title="ctx.createLinearGradient(x0, y0, x1, y1)"></a>ctx.createLinearGradient(x0, y0, x1, y1)</h5><ul>
<li>创建沿参数坐标指定的直线的渐变</li>
<li>x0, y0: 起点坐标</li>
<li>x1, y1: 重点坐标</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let gradient = ctx.createLinearGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>)</div><div class="line">gradient.addColorStop(<span class="number">0</span>, 'red')</div><div class="line">gradient.addColorStop(<span class="number">0.5</span>, 'green')</div><div class="line">gradient.addColorStop(<span class="number">1</span>, 'blue')</div><div class="line">ctx.fillStyle = gradient</div><div class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>)</div></pre></td></tr></table></figure>
<h5 id="ctx-createRadialGradient-x1-y1-r1-x2-y2-r2"><a href="#ctx-createRadialGradient-x1-y1-r1-x2-y2-r2" class="headerlink" title="ctx.createRadialGradient(x1, y1, r1, x2, y2, r2)"></a>ctx.createRadialGradient(x1, y1, r1, x2, y2, r2)</h5><ul>
<li>根据参数确定两个圆的坐标，绘制放射性渐变</li>
<li>r1: 第一个圆的半径</li>
<li>r2: 第二个圆的半径</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="ctx-addColorStop-position-color"><a href="#ctx-addColorStop-position-color" class="headerlink" title="ctx.addColorStop(position, color)"></a>ctx.addColorStop(position, color)</h5><ul>
<li>设置渐变过程中某个位置的颜色</li>
<li>postion: 位置。取值<code>0-1</code>之间</li>
<li>color: 有效的颜色的字符串，如<code>&#39;#fff&#39;</code> <code>&#39;rgba(255, 255, 255, 0.1)&#39;</code></li>
</ul>
<h4 id="图案样式"><a href="#图案样式" class="headerlink" title="图案样式"></a>图案样式</h4><h5 id="ctx-createPattern-image-type"><a href="#ctx-createPattern-image-type" class="headerlink" title="ctx.createPattern(image, type)"></a>ctx.createPattern(image, type)</h5><ul>
<li>创建模式</li>
<li>image: 如下类型的元素<ul>
<li>HTMLImageElement(img)</li>
<li>HTMLVideoElement(video)</li>
<li>HTMLCanvasElement(canvas)</li>
<li>ImageBitmap</li>
<li>ImageData</li>
<li>Blob</li>
</ul>
</li>
<li>type: 枚举值<code>repeat(默认)</code> <code>repeat-x</code> <code>repeat-y</code> <code>no-repeat</code></li>
</ul>
<h5 id="ctx-shadowOffsetX-ctx-shadowOffsetY"><a href="#ctx-shadowOffsetX-ctx-shadowOffsetY" class="headerlink" title="ctx.shadowOffsetX / ctx.shadowOffsetY"></a>ctx.shadowOffsetX / ctx.shadowOffsetY</h5><ul>
<li>设置阴影在水平和垂直方向的偏移距离</li>
</ul>
<h5 id="ctx-shadowBlur"><a href="#ctx-shadowBlur" class="headerlink" title="ctx.shadowBlur"></a>ctx.shadowBlur</h5><ul>
<li>设置阴影模糊的程度</li>
<li>取值：非负数，默认值为0</li>
</ul>
<h5 id="ctx-shadowColor"><a href="#ctx-shadowColor" class="headerlink" title="ctx.shadowColor"></a>ctx.shadowColor</h5><ul>
<li>设置阴影的颜色</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ctx<span class="selector-class">.shadowOffsetX</span> = <span class="number">10</span></div><div class="line">ctx<span class="selector-class">.shadowOffsetY</span> = <span class="number">10</span></div><div class="line">ctx<span class="selector-class">.shadowBlur</span> = <span class="number">10</span></div><div class="line">ctx<span class="selector-class">.shadowColor</span> = <span class="string">'green'</span></div><div class="line">ctx.strokeRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>)</div></pre></td></tr></table></figure>
<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><h4 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h4><h5 id="ctx-fillText-text-x-y-maxWidth"><a href="#ctx-fillText-text-x-y-maxWidth" class="headerlink" title="ctx.fillText(text, x, y[, maxWidth])"></a>ctx.fillText(text, x, y[, maxWidth])</h5><ul>
<li>以填充的方式绘制文字</li>
<li>text: 被绘制的文字</li>
<li>x, y: 绘制的起点</li>
<li>maxWidth: 最大宽度，可选</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ctx</span><span class="selector-class">.fillText</span>(<span class="string">'Canvas'</span>, <span class="number">50</span>, <span class="number">50</span>)</div></pre></td></tr></table></figure>
<h5 id="ctx-strokeText-text-x-y-maxWidth"><a href="#ctx-strokeText-text-x-y-maxWidth" class="headerlink" title="ctx.strokeText(text, x, y[, maxWidth])"></a>ctx.strokeText(text, x, y[, maxWidth])</h5><ul>
<li>以描边的方式绘制文字</li>
<li>参数同fillText</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ctx</span><span class="selector-class">.strokeText</span>(<span class="string">'Canvas'</span>, <span class="number">50</span>, <span class="number">50</span>)</div></pre></td></tr></table></figure>
<h4 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h4><h5 id="ctx-font"><a href="#ctx-font" class="headerlink" title="ctx.font"></a>ctx.font</h5><ul>
<li>设置文字字体。默认：10px sans-serif</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx<span class="selector-class">.font</span> = <span class="string">'50px 微软雅黑'</span></div></pre></td></tr></table></figure>
<h5 id="ctx-textAlign"><a href="#ctx-textAlign" class="headerlink" title="ctx.textAlign"></a>ctx.textAlign</h5><ul>
<li>设置文字的对齐方式</li>
<li>对齐是指当执行fillText或者strokeText时，相对于参数X的位置，如取值为<code>center</code>时，文本的开始位置将是<code>x - 文字的长度 * 50%</code></li>
<li>取值: 枚举<code>start(默认)</code> <code>end</code> <code>left</code> <code>right</code> <code>center</code></li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ctx<span class="selector-class">.textAlign</span> = <span class="string">'end'</span> <span class="comment">// 从文字的结束位置开始绘制文字</span></div><div class="line">ctx<span class="selector-class">.textAlign</span> = <span class="string">'left'</span> <span class="comment">// 文本左对齐</span></div><div class="line">ctx<span class="selector-class">.textAlign</span> = <span class="string">'center'</span> <span class="comment">// 绘制文字时，从中间向两边绘制</span></div></pre></td></tr></table></figure>
<h5 id="ctx-textBaseline"><a href="#ctx-textBaseline" class="headerlink" title="ctx.textBaseline"></a>ctx.textBaseline</h5><ul>
<li>设置文字的基线，即文字垂直方向的绘制基准</li>
<li>取值: 枚举<code>top</code> <code>hanging</code> <code>middle</code> <code>alphabetic(默认)</code> <code>ideographic</code> <code>bottom</code></li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ctx<span class="selector-class">.textBaseline</span> = <span class="string">'top'</span> <span class="comment">// 文本基线位于文本的顶部</span></div><div class="line">ctx<span class="selector-class">.textBaseline</span> = <span class="string">'hanging'</span> <span class="comment">// 文本基线是悬挂基线？</span></div><div class="line">ctx<span class="selector-class">.textBaseline</span> = <span class="string">'middle'</span> <span class="comment">// 基线位于文本中间</span></div><div class="line">ctx<span class="selector-class">.textBaseline</span> = <span class="string">'alphabetic'</span> <span class="comment">// 基线位于文字的基线</span></div></pre></td></tr></table></figure>
<h5 id="ctx-direction"><a href="#ctx-direction" class="headerlink" title="ctx.direction"></a>ctx.direction</h5><ul>
<li>设置文字的方向</li>
<li>取值: ltr 从左向右(默认) / rtl 从右向左</li>
</ul>
<h4 id="文本测量"><a href="#文本测量" class="headerlink" title="文本测量"></a>文本测量</h4><h5 id="ctx-measureText-text"><a href="#ctx-measureText-text" class="headerlink" title="ctx.measureText(text)"></a>ctx.measureText(text)</h5><ul>
<li>测量文本并获取当前文本相关属性的对象</li>
<li>测量相同文本的返回值会根据前期设置的不同而返回值不同</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ctx<span class="selector-class">.font</span> = <span class="string">'20px 微软雅黑'</span></div><div class="line">ctx.measureText(<span class="string">'Canvas'</span>) <span class="comment">// &#123;width: 74.61994934082031&#125;</span></div><div class="line"></div><div class="line">ctx<span class="selector-class">.font</span> = <span class="string">'50px 微软雅黑'</span></div><div class="line">ctx.measureText(<span class="string">'Canvas'</span>) <span class="comment">// &#123;width: 186.54995727539062&#125;</span></div></pre></td></tr></table></figure>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><h4 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h4><h5 id="drawImage-image-x-y-width-height"><a href="#drawImage-image-x-y-width-height" class="headerlink" title="drawImage(image, x, y, width, height)"></a>drawImage(image, x, y, width, height)</h5><ul>
<li>绘制图片到画布上</li>
<li>x, y: 绘制的起点</li>
<li>width, height: 绘制的宽高(压缩图片)</li>
</ul>
<h5 id="drawImage-image-sourceX-sourceY-sourceWidth-sourceHeight-distX-distY-distWidth-distHeight"><a href="#drawImage-image-sourceX-sourceY-sourceWidth-sourceHeight-distX-distY-distWidth-distHeight" class="headerlink" title="drawImage(image, sourceX, sourceY, sourceWidth, sourceHeight, distX, distY, distWidth, distHeight)"></a>drawImage(image, sourceX, sourceY, sourceWidth, sourceHeight, distX, distY, distWidth, distHeight)</h5><ul>
<li>对图片进行切片之后绘制到画布上</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let <span class="selector-tag">img</span> = new Image()</div><div class="line"><span class="comment">// img.setAttribute('crossOrigin', '')</span></div><div class="line"><span class="selector-tag">img</span><span class="selector-class">.onload</span> = () =&gt; &#123;</div><div class="line">    ctx.drawImage(<span class="selector-tag">img</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>)</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">img</span><span class="selector-class">.src</span> = <span class="string">'http://i1.piimg.com/574382/0cf50444001a3184.jpg'</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[原生DOM系列-Storage对象]]></title>
      <url>http://yoursite.com/%E5%8E%9F%E7%94%9FDOM%E7%B3%BB%E5%88%97-Storage%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本系列文章中所指的DOM，都是纯纯的HTML DOM，不包括XML DOM等<br>Stroage包含两种机制：localStorage和sessionStorage  </p>
</blockquote>
<h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><blockquote>
<p>在当前域名下存取数据<br>隐私模式下不可用<br>长期保存数据，页面关闭也不消失无过期时间(但可自行实现过期逻辑)  </p>
</blockquote>
<h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><ul>
<li>整数</li>
<li>存储在localStorage中的数据项的数量</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localStorage.<span class="built_in">length</span></div></pre></td></tr></table></figure>
<h4 id="key-index"><a href="#key-index" class="headerlink" title="key(index)"></a>key(index)</h4><ul>
<li>从localStorage中获取第index个数据项的键名</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">localStorage.<span class="type">key</span>(<span class="number">0</span>) <span class="comment">// 获取localStorage中第一个元素</span></div><div class="line">localStorage.<span class="type">key</span>(localStorage.length - <span class="number">1</span>) <span class="comment">// 获取localStorage中最后一个元素</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="getItem-key"><a href="#getItem-key" class="headerlink" title="getItem(key)"></a>getItem(key)</h4><ul>
<li>从localStorage中取出键名为key的值</li>
</ul>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localStorage.getItem<span class="comment">('a')</span> <span class="comment">// 拿到a的值，如果没有则返回null</span></div></pre></td></tr></table></figure>
<h4 id="setItem-key-val"><a href="#setItem-key-val" class="headerlink" title="setItem(key, val)"></a>setItem(key, val)</h4><ul>
<li>将键名为key，值为val的数据项添加到localStorage中</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">local</span>Storage.setItem(<span class="string">'a'</span>, 1) // <span class="built_in">local</span>Storage中将在最后面添加此键值</div></pre></td></tr></table></figure>
<h4 id="removeItem-key"><a href="#removeItem-key" class="headerlink" title="removeItem(key)"></a>removeItem(key)</h4><ul>
<li>从localStorage中删除键名为key的数据项</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">local</span>Storage.removeItem(<span class="string">'a'</span>) // <span class="built_in">local</span>Storage中的key为<span class="string">'a'</span>的数据将被删除</div></pre></td></tr></table></figure>
<h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><ul>
<li>清空localStorage</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localStorage.<span class="built_in">clear</span>() <span class="comment">// localStorage中的所有数据都将被删除</span></div></pre></td></tr></table></figure>
<h4 id="storage事件"><a href="#storage事件" class="headerlink" title="storage事件"></a>storage事件</h4><ul>
<li>当storage中存储的数据发生变化时，会在window对象上触发storage事件。</li>
<li>重复设置相同的键值对不会触发</li>
<li>做出改变的当前页面也不会触发</li>
<li>storage事件是实现跨页面通信的一种方式(postMessage大家也可以试试)</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">window.addEventListener(<span class="string">'storage'</span>, (e) =&gt; &#123;</div><div class="line">    e<span class="selector-class">.key</span> <span class="comment">// 改变的键</span></div><div class="line">    e<span class="selector-class">.oldValue</span> <span class="comment">// 旧值，如果是第一次设置，则为null</span></div><div class="line">    e<span class="selector-class">.newValue</span> <span class="comment">// 新值</span></div><div class="line">    e<span class="selector-class">.url</span> <span class="comment">// 做出改变的页面url</span></div><div class="line">    e<span class="selector-class">.storageArea</span> <span class="comment">// localStorage中的所有键值对</span></div><div class="line">&#125;, false)</div></pre></td></tr></table></figure>
<h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><blockquote>
<p>仅作用于当前页面<br>页面刷新不会导致数据丢失<br>页面跳转之后又返回也不会导致数据丢失<br>页面关闭后数据消失<br>除不会触发storage事件外，sessionStorage存在同localStorage相同的属性和方法(都继承自Stroage对象)  </p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[原生DOM系列-History对象]]></title>
      <url>http://yoursite.com/%E5%8E%9F%E7%94%9FDOM%E7%B3%BB%E5%88%97-History%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本系列文章中所指的DOM，都是纯纯的HTML DOM，不包括XML DOM等<br>提供操作浏览器会话历史的接口<br>历史记录中包括当前页面中通过iframe加载的页面的历史记录  </p>
</blockquote>
<h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><ul>
<li>返回一个整形</li>
<li>历史纪录的数量</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> <span class="built_in">length</span> = history.<span class="built_in">length</span></div></pre></td></tr></table></figure>
<h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><ul>
<li>调用pushState和replaceState方法时，同页面一起被写入到history中的数据</li>
<li>可用于保存当前页面的一些状态信息</li>
<li>可以直接通过history.state获取</li>
<li>也可以在事件触发时获取</li>
</ul>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">history.<span class="keyword">state</span></div><div class="line"></div><div class="line">window.addEventListener('popstate', (e) =&gt; &#123;</div><div class="line">    e.<span class="keyword">state</span></div><div class="line">&#125;, false)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="back"><a href="#back" class="headerlink" title="back()"></a>back()</h3><ul>
<li>与点击浏览器上的返回按钮相同</li>
<li>如果不是在最早的历史记录页面中执行(也就是还存在可以返回的页面)，可触发popstate事件</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">history.<span class="keyword">back</span>()</div></pre></td></tr></table></figure>
<h3 id="forward"><a href="#forward" class="headerlink" title="forward()"></a>forward()</h3><ul>
<li>与点击浏览器上的前进按钮相同</li>
<li>如果不是在最近的历史记录页面中执行(也就是还存在可以前进的页面)，可触发popstate事件</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">history</span><span class="selector-class">.forward</span>()</div></pre></td></tr></table></figure>
<h3 id="go-num"><a href="#go-num" class="headerlink" title="go(num)"></a>go(num)</h3><ul>
<li>页面跳转到历史记录的第n个页面</li>
<li>num &gt; 0 则向前跳转</li>
<li>num &lt; 0 则向后跳转</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">history</span>.<span class="keyword">go</span>(-<span class="number">1</span>) // 等同于<span class="keyword">history</span>.back()</div><div class="line"><span class="keyword">history</span>.<span class="keyword">go</span>(<span class="number">1</span>) // 等同于<span class="keyword">history</span>.forward()</div></pre></td></tr></table></figure>
<h3 id="pushState-state-title-url"><a href="#pushState-state-title-url" class="headerlink" title="pushState(state, title, url)"></a>pushState(state, title, url)</h3><ul>
<li>state：需要存储到history中的信息</li>
<li>title：存入history中的页面的title</li>
<li>url：要跳转的url地址，<code>不能跨域</code></li>
<li>当前页面路径和url所指定的路径都会被存入history中，使用url代替当前页面的路径</li>
<li>pushState并不触发事件</li>
<li>页面不会刷新</li>
</ul>
<figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">history</span>.pushState(&#123;</div><div class="line">    <span class="string">'a'</span>: <span class="string">'a'</span></div><div class="line">&#125;, <span class="string">'页面标题(可传空字符串)'</span>, <span class="string">'相同域名和端口下的不同地址'</span>)</div></pre></td></tr></table></figure>
<h3 id="replaceState-state-title-url"><a href="#replaceState-state-title-url" class="headerlink" title="replaceState(state, title, url)"></a>replaceState(state, title, url)</h3><ul>
<li>当前页面的路径不会被存入history中，只有replaceState中指定的url存在于history中</li>
<li>地址栏中当前页面的路径被替换掉</li>
<li>页面不会重新刷新</li>
<li>也不触发事件</li>
</ul>
<figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">history</span>.pushState(&#123;</div><div class="line">    <span class="string">'a'</span>: <span class="string">'a'</span></div><div class="line">&#125;, <span class="string">'页面标题(可传空字符串)'</span>, <span class="string">'相同域名和端口下的不同地址'</span>)</div></pre></td></tr></table></figure>
<h3 id="popstate事件"><a href="#popstate事件" class="headerlink" title="popstate事件"></a>popstate事件</h3><ul>
<li>用户点击前进后退时触发</li>
<li>调用history的back()/forward()/go()时触发</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, <span class="function"><span class="params">(e)</span> =&gt;</span> &#123;</div><div class="line">    let curState = history.state <span class="regexp">//</span> e.state</div><div class="line">    <span class="built_in">console</span>.log(e)</div><div class="line">&#125;, <span class="literal">false</span>)</div><div class="line"></div><div class="line"><span class="built_in">window</span>.onpopstate = <span class="function"><span class="params">(e)</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(e)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[原生DOM系列-Window对象]]></title>
      <url>http://yoursite.com/%E5%8E%9F%E7%94%9FDOM%E7%B3%BB%E5%88%97-Window%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本系列文章中所指的DOM，都是纯纯的HTML DOM，不包括XML DOM等<br>Window对象包含window、document等属性<br>也就是说window属性和document属性同属于Window对象<br>该文档中过滤掉了部分特别常用的属性或方法，如alert/console等<br>同时也过滤掉了部分特别不常用的属性或方法<br>内容尚不完整，请下周继续收看！！  </p>
</blockquote>
<h3 id="window属性"><a href="#window属性" class="headerlink" title="window属性"></a>window属性</h3><ul>
<li>window属性指向当前Window对象</li>
<li>全局环境下window属性同其它属性和this的关系</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span> === <span class="keyword">this</span> <span class="regexp">//</span> <span class="keyword">this</span>和<span class="built_in">window</span>同指向Window对象</div><div class="line"><span class="built_in">window</span>.<span class="keyword">this</span> <span class="regexp">//</span> <span class="literal">undefined</span>。<span class="keyword">this</span>并非Window对象的属性</div><div class="line"><span class="built_in">window</span> === parent <span class="regexp">//</span> 顶层<span class="built_in">window</span>中，parent属性指向当前Window对象</div><div class="line"><span class="built_in">window</span>.parent === <span class="built_in">window</span> <span class="regexp">//</span> parent是Window对象的属性</div><div class="line"><span class="built_in">window</span> === top <span class="regexp">//</span> 顶层<span class="built_in">window</span>中，top属性都指向当前Window对象</div><div class="line"><span class="built_in">window</span>.top === top <span class="regexp">//</span> top是Window对象的属性</div><div class="line"><span class="built_in">window</span> === self <span class="regexp">//</span> self和<span class="built_in">window</span>一样指向当前Window对象</div><div class="line"><span class="built_in">window</span>.self === self <span class="regexp">//</span> self是Window对象的属性</div><div class="line"><span class="built_in">window</span> === <span class="built_in">document</span>.defaultView</div><div class="line"><span class="built_in">window</span> === frames <span class="regexp">//</span> 是不是很奇怪。其实iframes会被解析挂载到<span class="built_in">window</span>对象上，<span class="built_in">window</span>对象是一个类数组对象</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="self"><a href="#self" class="headerlink" title="self"></a>self</h3><ul>
<li>指向当前window对象</li>
</ul>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">self</span> === window</div></pre></td></tr></table></figure>
<h3 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h3><ul>
<li>parent属性指向包含当前Window对象的Window对象</li>
</ul>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设当前html文档中包含一个name等于frame1的iframe</span></div><div class="line">frames[<span class="string">'frame1'</span>].<span class="keyword">parent</span> === <span class="keyword">window</span></div></pre></td></tr></table></figure>
<h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><ul>
<li>top属性指向最顶层Window对象</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设当前html文档中包含一个name等于frame1的iframe</span></div><div class="line"><span class="comment">// frame1文档中有包含frmae2文档</span></div><div class="line">frames.frame1.top === frames.frame1.frames.frame2.top</div></pre></td></tr></table></figure>
<h3 id="frames"><a href="#frames" class="headerlink" title="frames"></a>frames</h3><ul>
<li>当前文档中所有包含的iframe的集合</li>
<li>frames对象指向当前Window对象，真正的iframe集合以数组和Window对象属性的形式挂载到Window对象上。</li>
</ul>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 假设当前html文档中包含一个name等于frame1的iframe</div><div class="line">frames[<span class="number">0</span>] === frames[<span class="string">'frame1'</span>]</div><div class="line">frames[<span class="number">0</span>] === window[<span class="number">0</span>]</div><div class="line">frames[<span class="number">0</span>] === window[<span class="string">'frame1'</span>]</div></pre></td></tr></table></figure>
<h3 id="closed"><a href="#closed" class="headerlink" title="closed"></a>closed</h3><ul>
<li>返回窗口是否已被关闭</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打开一个窗口</span></div><div class="line"><span class="selector-tag">var</span> demo = window.open(<span class="string">''</span>, <span class="string">''</span>, <span class="string">'width=200,height=100'</span>)</div><div class="line">demo<span class="selector-class">.closed</span> <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">// 关闭打开的窗口</span></div><div class="line">demo<span class="selector-class">.closed</span> <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="document"><a href="#document" class="headerlink" title="document"></a>document</h3><ul>
<li>对Document对象的只读引用</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.<span class="built_in">document</span> = <span class="number">1</span> <span class="comment">// 不会报错，但不生效</span></div><div class="line"><span class="built_in">document</span> <span class="comment">// Document对象</span></div></pre></td></tr></table></figure>
<ul>
<li>详见<code>原生DOM系列-Document对象</code></li>
</ul>
<h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><ul>
<li>对History对象的只读引用</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">window<span class="selector-class">.history</span> = <span class="number">1</span> <span class="comment">// 不会报错，但不生效</span></div><div class="line">history <span class="comment">// History对象</span></div></pre></td></tr></table></figure>
<ul>
<li>详见<code>原生DOM系列-History对象</code></li>
</ul>
<h3 id="innerHeight-amp-innerWidth"><a href="#innerHeight-amp-innerWidth" class="headerlink" title="innerHeight &amp; innerWidth"></a>innerHeight &amp; innerWidth</h3><ul>
<li>只读属性</li>
<li>返回窗口的文档显示区高度和宽度，不包括菜单栏、工具栏和滚动条等高度</li>
<li>IE不支持该属性，以clientHeight &amp; clientWidth代替</li>
</ul>
<h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><ul>
<li>设置或返回窗口中得iframe数量</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设当前html文档中包含一个name等于frame1的iframe</span></div><div class="line">window<span class="selector-class">.length</span> <span class="comment">// 1</span></div><div class="line">length = <span class="number">10</span></div><div class="line">window<span class="selector-class">.lenght</span> <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><ul>
<li>对Location对象的引用</li>
<li>详见<code>原生DOM系列-Location对象</code></li>
</ul>
<h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><ul>
<li>设置或返回窗口的名称</li>
</ul>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">window.<span class="keyword">name</span> == <span class="string">'123'</span></div><div class="line"><span class="keyword">name</span> <span class="comment">// '123'</span></div></pre></td></tr></table></figure>
<h3 id="navigatory"><a href="#navigatory" class="headerlink" title="navigatory"></a>navigatory</h3><ul>
<li>对Navigator对象的引用</li>
<li>详见<code>原生DOM系列-Navigator对象</code></li>
</ul>
<h3 id="opener"><a href="#opener" class="headerlink" title="opener"></a>opener</h3><ul>
<li>返回对创建该窗口的Window对象的引用</li>
<li>可以通过该属性调用创建者Window对象的属性和方法，从而控制创建者窗口的内容变化</li>
<li>如果被打开的页面和当前页面不在同一个域下，被打开的页面中opener为空</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当前窗口(open.html)中执行</span></div><div class="line">let demo = open(<span class="string">'opened.html'</span>, <span class="string">''</span>, <span class="string">'width=200,height=100'</span>)</div><div class="line"></div><div class="line"><span class="comment">// opened.html中执行</span></div><div class="line">opener<span class="selector-class">.document</span><span class="selector-class">.write</span>(<span class="string">'haha'</span>)</div><div class="line"></div><div class="line"><span class="comment">// open.html中的内容会变成'haha'</span></div></pre></td></tr></table></figure>
<h3 id="outerHeight-amp-outerWidth"><a href="#outerHeight-amp-outerWidth" class="headerlink" title="outerHeight &amp; outerWidth"></a>outerHeight &amp; outerWidth</h3><ul>
<li>返回整个窗口的高度和宽度</li>
<li>IE中不支持，也不存在替代属性</li>
<li>移动端这些属性会一直返回0</li>
</ul>
<h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><ul>
<li>对Screen对象的只读引用</li>
<li>Screen对象获取打开当前浏览器的屏幕的相关信息</li>
</ul>
<h3 id="screenLeft-amp-screenTop-amp-screenX-amp-screenY"><a href="#screenLeft-amp-screenTop-amp-screenX-amp-screenY" class="headerlink" title="screenLeft &amp; screenTop &amp; screenX &amp; screenY"></a>screenLeft &amp; screenTop &amp; screenX &amp; screenY</h3><ul>
<li>只读属性</li>
<li>返回浏览器窗口在屏幕上的x坐标和y坐标</li>
<li>移动端无实际意义，因为移动端浏览器窗口始终是全屏幕打开的，这些数据会一直都是0</li>
</ul>
<h3 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h3><ul>
<li>仅能对通过js打开的窗口有用</li>
<li>移动端无效</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let demo = <span class="built_in">open</span>(<span class="string">''</span>, <span class="string">''</span>, <span class="string">'widht=200,height=100'</span>)</div><div class="line">demo.<span class="built_in">close</span>() <span class="comment">// demo窗口打开之后立即被关闭</span></div></pre></td></tr></table></figure>
<h3 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h3><ul>
<li>打开一个新的浏览器窗口或查找一个已命名的窗口</li>
<li>移动端无效</li>
</ul>
<h3 id="scrollBy-xnum-ynum"><a href="#scrollBy-xnum-ynum" class="headerlink" title="scrollBy(xnum, ynum)"></a>scrollBy(xnum, ynum)</h3><ul>
<li>按x/y轴滚动指定的像素数</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">scrollBy</span><span class="params">(<span class="number">0</span>, <span class="number">100</span>)</span></span> <span class="comment">// 向下滚动100px</span></div><div class="line"><span class="function"><span class="title">scrollBy</span><span class="params">(<span class="number">100</span>, <span class="number">0</span>)</span></span> <span class="comment">// 向右滚动100px</span></div></pre></td></tr></table></figure>
<h3 id="scrollTo-xpos-ypos"><a href="#scrollTo-xpos-ypos" class="headerlink" title="scrollTo(xpos, ypos)"></a>scrollTo(xpos, ypos)</h3><ul>
<li>将内容滚动到文档的指定坐标位置</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">scrollTo</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span> <span class="comment">// 滚动到最上面，最左边</span></div><div class="line"><span class="function"><span class="title">scrollTo</span><span class="params">(<span class="number">0</span>, document.body.scroll)</span></span> <span class="comment">// 滚动到最上面，最左边</span></div></pre></td></tr></table></figure>
<p>…未完待续！！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[原生DOM系列-Element对象]]></title>
      <url>http://yoursite.com/%E5%8E%9F%E7%94%9FDOM%E7%B3%BB%E5%88%97-Element%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本系列文章中所指的DOM，都是纯纯的HTML DOM，不包括XML DOM等<br>文中ele代表通过document.getElementById()等方法返回的某元素对象实例  </p>
</blockquote>
<h3 id="ele-attributes"><a href="#ele-attributes" class="headerlink" title="ele.attributes"></a>ele.attributes</h3><ul>
<li>返回当前元素的所有属性的集合</li>
<li>返回NamedNodeMap，可通过数组下标或对象属性方式获取</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;<span class="selector-tag">p</span> id=<span class="string">"demo"</span> class=<span class="string">"mod-demo"</span> data-a=<span class="string">"a"</span> style=<span class="string">"color: red"</span>&gt;test attributes&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">let attrs = document.getElementById(<span class="string">'demo'</span>)<span class="selector-class">.attributes</span></div><div class="line">attrs[<span class="string">'id'</span>]<span class="selector-class">.name</span> <span class="comment">// 'id'</span></div><div class="line">attrs[<span class="number">0</span>]<span class="selector-class">.val</span> <span class="comment">// 'demo'</span></div><div class="line">attrs[<span class="string">'class'</span>]<span class="selector-class">.value</span> <span class="comment">// 'mod-demo'</span></div><div class="line">attrs[<span class="string">'data-a'</span>]<span class="selector-class">.value</span> <span class="comment">// 'a'</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="ele-children"><a href="#ele-children" class="headerlink" title="ele.children"></a>ele.children</h3><ul>
<li>返回当前元素的所有子元素(不包含非元素类节点)</li>
<li>返回HTMLCollection集合</li>
<li>子元素集合即时更新</li>
<li>只读属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span></div><div class="line">        <span class="comment">&lt;!--注释--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span></div><div class="line">        text2</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>).children.length <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h3 id="ele-classList"><a href="#ele-classList" class="headerlink" title="ele.classList"></a>ele.classList</h3><ul>
<li>只读属性</li>
<li>返回DOMTokenList</li>
<li>返回元素所有的class属性</li>
</ul>
<table>
<thead>
<tr>
<th>classList</th>
<th>className</th>
</tr>
</thead>
<tbody>
<tr>
<td>DOMTokenList</td>
<td>空格分隔的字符串</td>
</tr>
</tbody>
</table>
<ul>
<li>可以通过add()/remove()等方法修改</li>
</ul>
<h4 id="add-string-string"><a href="#add-string-string" class="headerlink" title="add(string[, string])"></a>add(string[, string])</h4><ul>
<li>给属性添加class</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> html</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;p id=<span class="string">"demo"</span>&gt;classlist&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="regexp">//</span> js</div><div class="line">let demo = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>)</div><div class="line">demo.add(<span class="string">'demo'</span>, <span class="string">'red'</span>) <span class="regexp">//</span> p标签上增加`<span class="javascript"><span class="class"><span class="keyword">class</span></span>=<span class="string">"demo red"</span></span>`</div></pre></td></tr></table></figure>
<h4 id="remove-string-string"><a href="#remove-string-string" class="headerlink" title="remove(string[, string])"></a>remove(string[, string])</h4><ul>
<li>删除指定的class</li>
<li>如果删除不存在的class，则不发生变化</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">demo<span class="selector-class">.classList</span><span class="selector-class">.remove</span>(<span class="string">'red'</span>, <span class="string">'green'</span>) <span class="comment">// p标签上的class变成`class="demo"`</span></div></pre></td></tr></table></figure>
<h4 id="item-num"><a href="#item-num" class="headerlink" title="item(num)"></a>item(num)</h4><ul>
<li>根据索引返回class值</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">demo<span class="selector-class">.classList</span><span class="selector-class">.item</span>(<span class="number">0</span>) <span class="comment">// 'demo'</span></div></pre></td></tr></table></figure>
<h4 id="toggle-string-force"><a href="#toggle-string-force" class="headerlink" title="toggle(string[, force])"></a>toggle(string[, force])</h4><ul>
<li>进传入一个参数时，如果参数指定的class存在则移除并返回false，否则增加class并返回true</li>
<li>传入第二个参数时，如果第二个参数为true，则增加class，为false则删除class</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">demo<span class="selector-class">.classList</span><span class="selector-class">.toggle</span>(<span class="string">'red'</span>) <span class="comment">// class中增加red</span></div><div class="line">demo<span class="selector-class">.classList</span><span class="selector-class">.toggle</span>(<span class="string">'red'</span>) <span class="comment">// class中的red又被删除</span></div><div class="line">demo<span class="selector-class">.classList</span><span class="selector-class">.toggle</span>(<span class="string">'red'</span>, false) <span class="comment">// 删除red，但此时已经没有red了，则什么也不做</span></div></pre></td></tr></table></figure>
<h4 id="contains-string"><a href="#contains-string" class="headerlink" title="contains(string)"></a>contains(string)</h4><ul>
<li>检查元素是否拥有指定的class</li>
<li>返回true或false</li>
</ul>
<h3 id="ele-className"><a href="#ele-className" class="headerlink" title="ele.className"></a>ele.className</h3><ul>
<li>返回字符串</li>
<li>返回class属性的值</li>
<li>使用className，而非class，主要因为class为js的保留字</li>
</ul>
<h3 id="ele-clientHeight-ele-clientWidth"><a href="#ele-clientHeight-ele-clientWidth" class="headerlink" title="ele.clientHeight || ele.clientWidth"></a>ele.clientHeight || ele.clientWidth</h3><ul>
<li>返回元素内部的高度||宽度(单位像素)，包含内边距，但不包括水平||垂直滚动条、边框和外边距</li>
<li>CSS height + CSS padding - 水平||垂直滚动条高度</li>
</ul>
<h3 id="ele-firstElementChild-ele-lastElementChild"><a href="#ele-firstElementChild-ele-lastElementChild" class="headerlink" title="ele.firstElementChild || ele.lastElementChild"></a>ele.firstElementChild || ele.lastElementChild</h3><ul>
<li>返回第一个||最后一个子元素，没有则返回null</li>
</ul>
<h3 id="ele-id"><a href="#ele-id" class="headerlink" title="ele.id"></a>ele.id</h3><ul>
<li>获取或者设置一个元素的id属性</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;<span class="selector-tag">p</span> id=<span class="string">"demo"</span>&gt;classlist&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line">let demo = document.getElementById(<span class="string">'demo'</span>)</div><div class="line">demo<span class="selector-class">.id</span> <span class="comment">// 'demo'</span></div><div class="line">demo<span class="selector-class">.id</span> = <span class="string">'test'</span></div><div class="line">demo<span class="selector-class">.id</span> <span class="comment">// 'test'</span></div></pre></td></tr></table></figure>
<h3 id="ele-innerHTML"><a href="#ele-innerHTML" class="headerlink" title="ele.innerHTML"></a>ele.innerHTML</h3><ul>
<li>获取或者设置元素的子元素内容</li>
<li>字符串</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;<span class="selector-tag">p</span> id=<span class="string">"demo"</span>&gt;</div><div class="line">        abc</div><div class="line">        &lt;span&gt;text&lt;/span&gt;</div><div class="line">    &lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line">let demo = document.getElementById(<span class="string">'demo'</span>)</div><div class="line">demo<span class="selector-class">.innerHTML</span> <span class="comment">//  'abc &lt;span&gt;text&lt;/span&gt;'</span></div><div class="line">demo<span class="selector-class">.innerHTML</span> = <span class="string">'&lt;span class="new"&gt;new text&lt;/span&gt;'</span> <span class="comment">// demo中的内容改变为新赋值的元素</span></div></pre></td></tr></table></figure>
<h3 id="ele-nextElementSibling-ele-previousElementSibling"><a href="#ele-nextElementSibling-ele-previousElementSibling" class="headerlink" title="ele.nextElementSibling || ele.previousElementSibling"></a>ele.nextElementSibling || ele.previousElementSibling</h3><ul>
<li>返回下一个||上一个兄弟元素节点</li>
<li>如果此节点为最后一个，则返回null</li>
<li>该属性只读</li>
</ul>
<h3 id="ele-outerHTML"><a href="#ele-outerHTML" class="headerlink" title="ele.outerHTML"></a>ele.outerHTML</h3><ul>
<li>返回包含当前元素及其所有后代节点所形成的序列化的HTML片段字符串</li>
<li>可读可写</li>
<li>给其赋值可以替换掉当前元素及其所有后代元素</li>
<li>当一个元素因为修改自身的outerHTML属性而被替换时，指向该元素的变量仍然指向替换前的元素</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;<span class="selector-tag">p</span> id=<span class="string">"demo"</span>&gt;old&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line">let demo = document.getElementById(<span class="string">'demo'</span>)</div><div class="line">demo<span class="selector-class">.outerHTML</span> = <span class="string">'&lt;p id="newDemo"&gt;new&lt;/p&gt;'</span></div><div class="line">demo<span class="selector-class">.id</span> <span class="comment">// 'demo'</span></div></pre></td></tr></table></figure>
<h3 id="ele-scrollHeight-ele-scrollWidth"><a href="#ele-scrollHeight-ele-scrollWidth" class="headerlink" title="ele.scrollHeight || ele.scrollWidth"></a>ele.scrollHeight || ele.scrollWidth</h3><ul>
<li>返回元素的内容高度||宽度</li>
<li>只读属性</li>
<li>包含被overflow hidden的部分</li>
<li>包括元素的padding，但不包括元素的margin</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 判断元素是否滚动到底</span></div><div class="line">ele.scrollHeight - ele.scrollTop === ele.clientHeight</div></pre></td></tr></table></figure>
<h3 id="ele-scrollLeft"><a href="#ele-scrollLeft" class="headerlink" title="ele.scrollLeft"></a>ele.scrollLeft</h3><ul>
<li>读取或设置元素滚动条到元素左边的距离</li>
<li>如果元素不能滚动，则其值为0</li>
<li>设置小于0的值时，其值为0</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ele<span class="selector-class">.scrollLeft</span> += <span class="number">20</span> <span class="comment">// 向右滚动20像素</span></div></pre></td></tr></table></figure>
<h3 id="ele-tagName"><a href="#ele-tagName" class="headerlink" title="ele.tagName"></a>ele.tagName</h3><ul>
<li>返回该元素的标签名</li>
<li>字符串</li>
</ul>
<h3 id="ele-addEventListener-type-listener-useCapture"><a href="#ele-addEventListener-type-listener-useCapture" class="headerlink" title="ele.addEventListener(type, listener[ ,useCapture])"></a>ele.addEventListener(type, listener[ ,useCapture])</h3><ul>
<li>继承自其父类EventTarget</li>
<li>type 字符串，所监听的事件类型，如’click’</li>
<li>listener 回调函数</li>
<li>useCapture 指定在捕获阶段还是冒泡阶段触发事件回调，true为捕获阶段，false为冒泡阶段</li>
<li>思考题：同ele.onclick的区别</li>
</ul>
<h3 id="ele-closest-selectors"><a href="#ele-closest-selectors" class="headerlink" title="ele.closest(selectors)"></a>ele.closest(selectors)</h3><ul>
<li>selectors 选择器，如’.demo’ ‘#demo’等</li>
<li>返回离当前元素最近的祖先元素(包含当前元素)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// html</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo1"</span>&gt;</span> <span class="comment">&lt;!-- 下面的js返回此元素 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">// js</div><div class="line">let demo = document.getElementById('dmo')</div><div class="line">demo.closest('.demo1')</div></pre></td></tr></table></figure>
<h3 id="ele-dispatchEvent-event"><a href="#ele-dispatchEvent-event" class="headerlink" title="ele.dispatchEvent(event)"></a>ele.dispatchEvent(event)</h3><ul>
<li>event 被派发的事件，通过document.createEvent()进行创建，通过自身的initEvent()进行初始化</li>
<li></li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//html</span></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;p id=<span class="string">"demo"</span>&gt;text&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line"><span class="keyword">let</span> demo = document.getElementById(<span class="string">'demo'</span>)</div><div class="line">demo.addEventListener(<span class="string">'alert'</span>, function()&#123;</div><div class="line">    alert(<span class="string">'自定义事件'</span>)</div><div class="line">&#125;, <span class="literal">false</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="keyword">event</span> = document.createEvent(<span class="string">'HTMLEvents'</span>)</div><div class="line"><span class="keyword">event</span>.initEvent(<span class="string">'alert'</span>, <span class="literal">false</span>, <span class="literal">false</span>) <span class="comment">// 第二个参数:是否冒泡，第三个参数:是否可被取消</span></div><div class="line">demo.dispatchEvent(<span class="keyword">event</span>) <span class="comment">// 页面中alert弹出'自定义事件'</span></div></pre></td></tr></table></figure>
<h3 id="ele-getAttribute-attrName"><a href="#ele-getAttribute-attrName" class="headerlink" title="ele.getAttribute(attrName)"></a>ele.getAttribute(attrName)</h3><ul>
<li>attrName String，属性名</li>
<li>返回元素上指定属性的值</li>
<li>返回字符串或null</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;<span class="keyword">div</span> id=<span class="string">"demo"</span> data-id=<span class="string">"123"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line">let demo = document.getElementById(<span class="string">'demo'</span>)</div><div class="line">demo.getAttribute(<span class="string">'data-id'</span>) <span class="comment">// 123</span></div></pre></td></tr></table></figure>
<h3 id="ele-getBoundingClientRect"><a href="#ele-getBoundingClientRect" class="headerlink" title="ele.getBoundingClientRect()"></a>ele.getBoundingClientRect()</h3><ul>
<li>返回元素的大小机器相对于视口的位置</li>
<li>返回值是DOMRect对象</li>
</ul>
<h3 id="ele-getElementsByClassName"><a href="#ele-getElementsByClassName" class="headerlink" title="ele.getElementsByClassName()"></a>ele.getElementsByClassName()</h3><ul>
<li>同document.getElementsByClassName()</li>
<li>见<a href="https://defed.github.io/%E5%8E%9F%E7%94%9FDOM%E7%B3%BB%E5%88%97-Document%E5%AF%B9%E8%B1%A1/" target="_blank" rel="external">原生DOM系列-Document对象</a></li>
</ul>
<h3 id="ele-getElementsByTagName"><a href="#ele-getElementsByTagName" class="headerlink" title="ele.getElementsByTagName()"></a>ele.getElementsByTagName()</h3><ul>
<li>同document.getElementsByTagName()</li>
<li>见<a href="https://defed.github.io/%E5%8E%9F%E7%94%9FDOM%E7%B3%BB%E5%88%97-Document%E5%AF%B9%E8%B1%A1/" target="_blank" rel="external">原生DOM系列-Document对象</a></li>
</ul>
<h3 id="ele-hasAttribute-attrName"><a href="#ele-hasAttribute-attrName" class="headerlink" title="ele.hasAttribute(attrName)"></a>ele.hasAttribute(attrName)</h3><ul>
<li>返回该元素是否包含有指定的属性</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;<span class="selector-tag">p</span> id=<span class="string">"demo"</span> name=<span class="string">"123"</span>&gt;&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line">let demo = document.getElementById(<span class="string">'demo'</span>)</div><div class="line">demo.hasAttribute(<span class="string">'name'</span>) <span class="comment">// true</span></div><div class="line">demo.hasAttribute(<span class="string">'age'</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h3 id="ele-insertAdjacentHTML-position-text"><a href="#ele-insertAdjacentHTML-position-text" class="headerlink" title="ele.insertAdjacentHTML(position, text)"></a>ele.insertAdjacentHTML(position, text)</h3><ul>
<li>将html片段插入到指定的位置</li>
<li>position：表示位置的字符串</li>
</ul>
<table>
<thead>
<tr>
<th>beforebegin</th>
<th>afterbegin</th>
<th>beforeend</th>
<th>afterend</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入到ele的开始标签之前</td>
<td>插入到ele的开始标签之后</td>
<td>插入到ele的结束标签之前</td>
<td>插入到ele的结束标签之后</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- beforebegin --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- afterbegin --&gt;</span></div><div class="line">child</div><div class="line"><span class="comment">&lt;!-- beforeend --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- afterend --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ele-querySelector"><a href="#ele-querySelector" class="headerlink" title="ele.querySelector()"></a>ele.querySelector()</h3><ul>
<li>同document.querySelector()</li>
<li>见<a href="https://defed.github.io/%E5%8E%9F%E7%94%9FDOM%E7%B3%BB%E5%88%97-Document%E5%AF%B9%E8%B1%A1/" target="_blank" rel="external">原生DOM系列-Document对象</a></li>
</ul>
<h3 id="ele-querySelectorAll"><a href="#ele-querySelectorAll" class="headerlink" title="ele.querySelectorAll()"></a>ele.querySelectorAll()</h3><ul>
<li>同document.querySelectorAll()</li>
<li>见<a href="https://defed.github.io/%E5%8E%9F%E7%94%9FDOM%E7%B3%BB%E5%88%97-Document%E5%AF%B9%E8%B1%A1/" target="_blank" rel="external">原生DOM系列-Document对象</a></li>
</ul>
<h3 id="ele-remove"><a href="#ele-remove" class="headerlink" title="ele.remove()"></a>ele.remove()</h3><ul>
<li>将自己从所在的DOM树种删除</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// html</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">// js</div><div class="line">let demo = document.getElementById('demo')</div><div class="line">demo.remove() // <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>被删除</div></pre></td></tr></table></figure>
<h3 id="ele-removeAttribute"><a href="#ele-removeAttribute" class="headerlink" title="ele.removeAttribute()"></a>ele.removeAttribute()</h3><ul>
<li>删除元素上指定的属性</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"demo"</span> <span class="keyword">class</span>=<span class="string">"demo"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line"><span class="keyword">let</span> demo = document.getElementById(<span class="string">'demo'</span>)</div><div class="line">demo.removeAttribute(<span class="string">'class'</span>) <span class="comment">// &lt;div id="demo"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ele-removeEventListener-type-listener-userCaptre"><a href="#ele-removeEventListener-type-listener-userCaptre" class="headerlink" title="ele.removeEventListener(type, listener[, userCaptre])"></a>ele.removeEventListener(type, listener[, userCaptre])</h3><ul>
<li>删除通过ele.addEventListener()方法添加的事件</li>
<li>type：事件类型，如：<code>click</code>、<code>showdialog(自定义)</code></li>
<li>listener：需要被删除的函数</li>
<li>userCaptre：true 移除冒泡阶段的事件；false 移除捕获阶段的事件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> demo = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>)</div><div class="line"><span class="keyword">let</span> listener = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    alert(<span class="number">1</span>)</div><div class="line">&#125;</div><div class="line">demo.addEventListener(<span class="string">'click'</span>, listener, <span class="literal">false</span>)</div><div class="line">demo.removeEventListener(<span class="string">'click'</span>, listener, <span class="literal">true</span>) <span class="comment">// 无法移除，因为移除的是捕获阶段的事件</span></div><div class="line">demo.removeEventListener(<span class="string">'click'</span>, listener, <span class="literal">false</span>) <span class="comment">// 被正确移除</span></div><div class="line"></div><div class="line">demo.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</div><div class="line">    alert(<span class="number">2</span>)</div><div class="line">&#125;, <span class="literal">false</span>) <span class="comment">// 此事件无法被移除，因为是绑定的匿名回调</span></div></pre></td></tr></table></figure>
<h3 id="ele-scrollIntoView-bool-obj"><a href="#ele-scrollIntoView-bool-obj" class="headerlink" title="ele.scrollIntoView(bool||obj)"></a>ele.scrollIntoView(bool||obj)</h3><ul>
<li>让当前的元素滚动到浏览器窗口的可视区域内</li>
<li>如果参数为bool值<ul>
<li>true 元素的顶端和可视区的顶端对齐，不传则默认为true的行为</li>
<li>false 元素的底端和可视区的底端对齐</li>
</ul>
</li>
<li>如果参数为obj。目前大部分浏览器尚不支持。可仅做了解</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attribute">behavior</span>: <span class="string">"auto"</span>  | <span class="string">"instant"</span> | <span class="string">"smooth"</span>,</div><div class="line">    block:    <span class="string">"start"</span> | <span class="string">"end"</span>, // 该参数等同于bool值得行为</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    <span class="params">...</span>.这里有很多元素，把demo元素挤出了可视区的下边缘</div><div class="line">    &lt;p id=<span class="string">"demo"</span>&gt;我要滚动啦&lt;/p&gt;</div><div class="line">    <span class="params">...</span>.这里也有很多元素，滚到底部是，demo元素被挤出可视区的上边缘</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js 元素不在可视区内</span></div><div class="line"><span class="keyword">let</span> demo = document.getElementById(<span class="string">'demo'</span>)</div><div class="line">demo.scrollIntoView(<span class="literal">false</span>) <span class="comment">// 元素出现在可视区的下边缘</span></div><div class="line">demo.scrollIntoView(<span class="literal">true</span>) <span class="comment">// 元素出现在可视区的上边缘</span></div></pre></td></tr></table></figure>
<h3 id="ele-setAttribute-name-value"><a href="#ele-setAttribute-name-value" class="headerlink" title="ele.setAttribute(name, value)"></a>ele.setAttribute(name, value)</h3><ul>
<li>添加一个新属性到元素上</li>
<li>或者改变元素上已有属性的值</li>
</ul>
<figure class="highlight cal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// html</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;<span class="keyword">div</span> id=<span class="string">"demo"</span> class=<span class="string">"demo"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line">// js</div><div class="line">let demo = document.getElementById(<span class="string">'demo'</span>)</div><div class="line">demo.setAttribute(<span class="string">'test'</span>, <span class="string">'test'</span>) // &lt;<span class="keyword">div</span> id=<span class="string">"demo"</span> class=<span class="string">"demo"</span> test=<span class="string">"test"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">demo.setAttribute(<span class="string">'class'</span>, <span class="string">'ele-demo'</span>) // &lt;<span class="keyword">div</span> id=<span class="string">"demo"</span> class=<span class="string">"ele-demo"</span> test=<span class="string">"test"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<ul>
<li>表单元素的部分属性无法通过该方法得到想要的结果，这些属性应该使用prop相关方法操作</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line"><span class="keyword">let</span> demo = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>)</div><div class="line">demo.setAttribute(<span class="string">'checked'</span>, <span class="literal">null</span>) <span class="comment">// 元素的属性值会被设置为null，但页面中checkbox依然是选中状态</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue源码解读-方法与事件绑定]]></title>
      <url>http://yoursite.com/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E6%96%B9%E6%B3%95%E4%B8%8E%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/</url>
      <content type="html"><![CDATA[<blockquote>
<p>version: 1.0.24<br>对源码的解析部分，纯属个人理解(不是纯属虚构)，理解有误或者没有理解透彻的地方，欢迎多拍砖头<br>本文主要分析Vue源码中对方法与事件绑定的实现  </p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Vue中的事件有<code>Dom事件</code>和<code>Vue事件（自定义事件）</code>两种，所以可将事件的绑定总结为一下几种类型：</p>
<ul>
<li>类型一：在模板中通过<code>v-on</code>指令绑定的Dom事件</li>
<li>类型二：在模板中通过<code>v-on</code>指令绑定的自定义事件</li>
<li>类型三：在<code>vue options</code>中通过<code>events</code>绑定的自定义事件</li>
<li>类型四：通过<code>$on</code>方法绑定的自定义事件</li>
</ul>
<p>下面就析上述几种类型事件的绑定做具体的分析</p>
<a id="more"></a>
<h3 id="类型一：在模板中通过v-on指令绑定的Dom事件"><a href="#类型一：在模板中通过v-on指令绑定的Dom事件" class="headerlink" title="类型一：在模板中通过v-on指令绑定的Dom事件"></a>类型一：在模板中通过<code>v-on</code>指令绑定的Dom事件</h3><p>采用此方式作为事件处理的原因及优点可参考Vue文档中<a href="http://cn.vuejs.org/guide/events.html#u4E3A_u4EC0_u4E48_u5728_HTML__u4E2D_u76D1_u542C_u4E8B_u4EF6_3F" target="_blank" rel="external">为什么在 HTML 中监听事件?</a></p>
<p>模板中的<code>v-on</code>作为指令的一种，要通过模板编译（compile）和指令注册（directives）来实现, 其中涉及这两部分的内容将在其解读中再做分析。</p>
<p>先来看编译中的部分 <code>compile/compile.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> onRE = <span class="regexp">/^v-on:|^@/</span></div><div class="line"></div><div class="line"><span class="comment">//编译元素中的指令</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileDirectives</span> (<span class="params">attrs, options</span>) </span>&#123;</div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="comment">//关于“事件绑定”的处理</span></div><div class="line">  <span class="keyword">if</span> (onRE.test(name)) &#123;</div><div class="line">    arg = name.replace(onRE, <span class="string">''</span>)</div><div class="line">    <span class="comment">//添加一个“on”指令, publicDirectives.on为该指令的所有“钩子函数”等属性和方法</span></div><div class="line">    <span class="comment">//“钩子函数”的介绍可参考Vue文档中自定义指令的介绍</span></div><div class="line">    pushDir(<span class="string">'on'</span>, publicDirectives.on)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继续往下走，“on”指令中定义中的<code>update</code>方法进行了“事件的绑定”（其实只是调用了最后一步中的on方法），  <code>directives/public/on.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">update (handler) &#123;</div><div class="line">  <span class="comment">// "v-on"属性值为空的容错处理,</span></div><div class="line">  <span class="comment">// 例如 @mousedown.prevent</span></div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.descriptor.raw) &#123;</div><div class="line">    handler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// "v-on"属性值不为空但不是函数，报错</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> handler !== <span class="string">'function'</span>) &#123;</div><div class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</div><div class="line">      <span class="string">'v-on:'</span> + <span class="keyword">this</span>.arg + <span class="string">'="'</span> +</div><div class="line">      <span class="keyword">this</span>.expression + <span class="string">'" expects a function value, '</span> +</div><div class="line">      <span class="string">'got '</span> + handler,</div><div class="line">      <span class="keyword">this</span>.vm</div><div class="line">    )</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 事件修饰符（modifiers）处理</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.modifiers.stop) &#123;</div><div class="line">    <span class="comment">// 返回一个新的方法，先执行event.stopPropagation()，再执行事件绑定事件</span></div><div class="line">    handler = stopFilter(handler)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.modifiers.prevent) &#123;</div><div class="line">    <span class="comment">// 返回一个新的方法，先执行event.preventDefault()，再执行事件绑定事件</span></div><div class="line">    handler = preventFilter(handler)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.modifiers.self) &#123;</div><div class="line">    <span class="comment">// 返回一个新的方法，如果触发元素为当前元素，才执行事件绑定事件</span></div><div class="line">    handler = selfFilter(handler)</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">// 事件按键修饰符处理</span></div><div class="line">  <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.modifiers)</div><div class="line">    .filter(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line"></div><div class="line">      <span class="comment">//排除事件修饰符</span></div><div class="line">      <span class="keyword">return</span> key !== <span class="string">'stop'</span> &amp;&amp;</div><div class="line">        key !== <span class="string">'prevent'</span> &amp;&amp;</div><div class="line">        key !== <span class="string">'self'</span> &amp;&amp;</div><div class="line">        key !== <span class="string">'capture'</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (keys.length) &#123;</div><div class="line">    <span class="comment">// 返回一个新的方法，如果触发元素的keyCode等于按键修饰符中的code，才执行事件绑定事件</span></div><div class="line">    handler = keyFilter(handler, keys)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 避免重复绑定，先解绑</span></div><div class="line">  <span class="keyword">this</span>.reset()</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.handler = handler</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.iframeBind) &#123;</div><div class="line">    <span class="comment">//处理iframe中的事件绑定</span></div><div class="line">    <span class="keyword">this</span>.iframeBind()</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//调用on方法进行事件绑定</span></div><div class="line">    on(</div><div class="line">      <span class="keyword">this</span>.el,</div><div class="line">      <span class="keyword">this</span>.arg,</div><div class="line">      <span class="keyword">this</span>.handler,</div><div class="line">      <span class="keyword">this</span>.modifiers.capture</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后一步进行“真正的事件绑定”，  <code>util/dom.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">on</span> (<span class="params">el, event, cb, useCapture</span>) </span>&#123;</div><div class="line">  el.addEventListener(event, cb, useCapture)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="类型二：在模板中通过v-on指令绑定的自定义事件"><a href="#类型二：在模板中通过v-on指令绑定的自定义事件" class="headerlink" title="类型二：在模板中通过v-on指令绑定的自定义事件"></a>类型二：在模板中通过<code>v-on</code>指令绑定的自定义事件</h3><h3 id="类型三：在vue-options中通过events绑定的自定义事件"><a href="#类型三：在vue-options中通过events绑定的自定义事件" class="headerlink" title="类型三：在vue options中通过events绑定的自定义事件"></a>类型三：在<code>vue options</code>中通过<code>events</code>绑定的自定义事件</h3><h3 id="类型四：通过-on方法绑定的自定义事件"><a href="#类型四：通过-on方法绑定的自定义事件" class="headerlink" title="类型四：通过$on方法绑定的自定义事件"></a>类型四：通过<code>$on</code>方法绑定的自定义事件</h3><p>这三种类型都是关于自定义事件的绑定，放在一起看，<code>instance/internal/events.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> eventRE = <span class="regexp">/^v-on:|^@/</span></div><div class="line"></div><div class="line"><span class="comment">//vue的初始化方法_init中会调用该方法来初始化事件绑定</span></div><div class="line">Vue.prototype._initEvents = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> options = <span class="keyword">this</span>.$options</div><div class="line">  <span class="comment">//对于类型二的事件绑定，如&lt;child v-on:child-msg="handleIt"&gt;&lt;/child&gt;</span></div><div class="line">  <span class="keyword">if</span> (options._asComponent) &#123;</div><div class="line">    registerComponentEvents(<span class="keyword">this</span>, options.el)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//对于类型三的事件绑定</span></div><div class="line">  registerCallbacks(<span class="keyword">this</span>, <span class="string">'$on'</span>, options.events)</div><div class="line">  <span class="comment">//绑定watch事件</span></div><div class="line">  registerCallbacks(<span class="keyword">this</span>, <span class="string">'$watch'</span>, options.watch)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//从上面的判断可以看出，这种类型只针对于子组件</span></div><div class="line"><span class="comment">//作用是在子组件中触发事件，父组件中的方法执行</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerComponentEvents</span> (<span class="params">vm, el</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> attrs = el.attributes</div><div class="line">  <span class="keyword">var</span> name, value, handler</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = attrs.length; i &lt; l; i++) &#123;</div><div class="line">    name = attrs[i].name</div><div class="line">    <span class="keyword">if</span> (eventRE.test(name)) &#123;</div><div class="line">      name = name.replace(eventRE, <span class="string">''</span>)</div><div class="line"></div><div class="line">      value = attrs[i].value</div><div class="line">      <span class="comment">//此处用来区分“内联语句”，如果只是一个方法名需加上'apply', 使其可调用</span></div><div class="line">      <span class="keyword">if</span> (isSimplePath(value)) &#123;</div><div class="line">        value += <span class="string">'.apply(this, $arguments)'</span></div><div class="line">      &#125;</div><div class="line">      <span class="comment">//将表达式转换成一个function，具体可参考《Vue源码解读-get-set的内部实现》</span></div><div class="line">      handler = (vm._scope || vm._context).$<span class="built_in">eval</span>(value, <span class="literal">true</span>)</div><div class="line">      <span class="comment">//标记方法属于父组件</span></div><div class="line">      handler._fromParent = <span class="literal">true</span></div><div class="line">      <span class="comment">//调用$on, 同类型四</span></div><div class="line">      vm.$on(name.replace(eventRE), handler)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//遍历options.events，逐一进行绑定</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerCallbacks</span> (<span class="params">vm, action, hash</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!hash) <span class="keyword">return</span></div><div class="line">  <span class="keyword">var</span> handlers, key, i, j</div><div class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> hash) &#123;</div><div class="line">    handlers = hash[key]</div><div class="line">    <span class="keyword">if</span> (isArray(handlers)) &#123;</div><div class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>, j = handlers.length; i &lt; j; i++) &#123;</div><div class="line">        register(vm, action, key, handlers[i])</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      register(vm, action, key, handlers)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">register</span> (<span class="params">vm, action, key, handler, options</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">typeof</span> handler</div><div class="line">  <span class="keyword">if</span> (type === <span class="string">'function'</span>) &#123;</div><div class="line">    <span class="comment">//如果handler是函数，直接绑定</span></div><div class="line">    vm[action](key, handler, options)</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'string'</span>) &#123;</div><div class="line">    <span class="comment">//如果handler是字符串，从"options.methods"中找出该方法进行绑定，如果没有就报错</span></div><div class="line">    <span class="keyword">var</span> methods = vm.$options.methods</div><div class="line">    <span class="keyword">var</span> method = methods &amp;&amp; methods[handler]</div><div class="line">    <span class="keyword">if</span> (method) &#123;</div><div class="line">      vm[action](key, method, options)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</div><div class="line">        <span class="string">'Unknown method: "'</span> + handler + <span class="string">'" when '</span> +</div><div class="line">        <span class="string">'registering callback for '</span> + action +</div><div class="line">        <span class="string">': "'</span> + key + <span class="string">'".'</span>,</div><div class="line">        vm</div><div class="line">      )</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handler &amp;&amp; type === <span class="string">'object'</span>) &#123;</div><div class="line">    <span class="comment">//watch事件</span></div><div class="line">    register(vm, action, key, handler.handler, handler)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[原生DOM系列-Document对象]]></title>
      <url>http://yoursite.com/%E5%8E%9F%E7%94%9FDOM%E7%B3%BB%E5%88%97-Document%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本系列文章中所指的DOM，都是纯纯的HTML DOM，不包括XML DOM等<br>代表整个HTML文档<br>Window对象的属性，可以通过<code>docuemnt</code>或<code>window.document</code>访问<br>document对象可以方便我们通过js操作html  </p>
</blockquote>
<h3 id="document-all"><a href="#document-all" class="headerlink" title="document.all"></a>document.all</h3><ul>
<li>获取文档中的所有HTML元素的引用</li>
<li>是一个类数组对象</li>
<li>已被document.getElementById()等API所取代，目前不常用项目中</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">document</span><span class="selector-class">.all</span><span class="selector-attr">[i]</span></div><div class="line"><span class="selector-tag">document</span><span class="selector-class">.all</span><span class="selector-attr">[name]</span></div><div class="line"><span class="selector-tag">document</span><span class="selector-class">.all</span><span class="selector-class">.tags</span><span class="selector-attr">[tagname]</span></div></pre></td></tr></table></figure>
<h3 id="document-anchors"><a href="#document-anchors" class="headerlink" title="document.anchors"></a>document.anchors</h3><ul>
<li>获取文档中所有锚点的引用</li>
<li>类数组对象</li>
<li>包含name属性的a元素会被返回</li>
</ul>
<a id="more"></a>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;<span class="selector-tag">a</span> name=<span class="string">"anchor1"</span>&gt;anchor1&lt;/a&gt;</div><div class="line">    &lt;<span class="selector-tag">a</span> name=<span class="string">"anchor2"</span>&gt;anchor2&lt;/a&gt;</div><div class="line">    &lt;<span class="selector-tag">a</span> name=<span class="string">"anchor3"</span> href=<span class="string">"xxx"</span>&gt;anchor3&lt;/a&gt;</div><div class="line">    &lt;<span class="selector-tag">a</span> id=<span class="string">"anchor4"</span>&gt;anchor4&lt;/a&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line">document<span class="selector-class">.anchors</span> <span class="comment">// [anchor1 DOM对象, anchor2 DOM对象, anchor3 DOM对象]</span></div><div class="line">document<span class="selector-class">.anchors</span>[<span class="string">'anchor1'</span>] <span class="comment">// anchor1 DOM对象</span></div><div class="line">document<span class="selector-class">.anchors</span>[<span class="number">0</span>] <span class="comment">// anchor1 DOM对象</span></div></pre></td></tr></table></figure>
<h3 id="document-forms"><a href="#document-forms" class="headerlink" title="document.forms"></a>document.forms</h3><ul>
<li>返回文档中所有的form的DOM对象的引用</li>
<li>返回类数组对象</li>
<li>包含id或name属性的form元素会被返回</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;<span class="selector-tag">form</span> id=<span class="string">"form1"</span>&gt;&lt;/form&gt;</div><div class="line">    &lt;<span class="selector-tag">form</span> name=<span class="string">"form2"</span>&gt;&lt;/form&gt;</div><div class="line">    &lt;<span class="selector-tag">form</span> id=<span class="string">"form2"</span>&gt;&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line">document<span class="selector-class">.forms</span> <span class="comment">// [form1 DOM对象, form2(name) DOM对象, form2(id) DOM对象]</span></div><div class="line">document<span class="selector-class">.forms</span>[<span class="string">'form2'</span>] <span class="comment">// 返回id为form2元素，id和name的值同名时，id的优先级更高</span></div><div class="line">document<span class="selector-class">.forms</span>[<span class="number">1</span>] <span class="comment">// name为form2 DOM对象</span></div></pre></td></tr></table></figure>
<h3 id="document-links"><a href="#document-links" class="headerlink" title="document.links"></a>document.links</h3><ul>
<li>返回文档中所有的a的DOM对象</li>
<li>返回类数组对象</li>
<li>既包含name属性，又包含href属性的a元素，既会被收集到links中，又会被收集到anchors中</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;<span class="selector-tag">a</span> name=<span class="string">"anchor1"</span>&gt;&lt;/a&gt;</div><div class="line">    &lt;<span class="selector-tag">a</span> name=<span class="string">"anchor2"</span> href=<span class="string">"xxx"</span>&gt;&lt;/a&gt;</div><div class="line">    &lt;<span class="selector-tag">a</span> id=<span class="string">"link1"</span> href=<span class="string">"http://www.xxx.com"</span>&gt;&lt;/a&gt;</div><div class="line">    &lt;<span class="selector-tag">a</span> name=<span class="string">"link1"</span> href=<span class="string">"http://www.xxx.com"</span>&gt;&lt;/a&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line">document<span class="selector-class">.links</span><span class="selector-class">.length</span> <span class="comment">// 3</span></div><div class="line">document<span class="selector-class">.links</span>[<span class="string">'link1'</span>] <span class="comment">// id为link1的a元素</span></div></pre></td></tr></table></figure>
<h3 id="document-images"><a href="#document-images" class="headerlink" title="document.images"></a>document.images</h3><ul>
<li>返回文档中的所有image元素的集合</li>
<li>类数组对象</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;<span class="selector-tag">img</span> src=<span class="string">""</span>&gt;</div><div class="line">    &lt;<span class="selector-tag">img</span> src=<span class="string">"xxx"</span>&gt;</div><div class="line">    &lt;img&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line">document<span class="selector-class">.images</span><span class="selector-class">.length</span> <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<h3 id="document-scripts"><a href="#document-scripts" class="headerlink" title="document.scripts"></a>document.scripts</h3><ul>
<li>返回当前文档中所有script元素的集合</li>
<li>只读属性</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// html</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">// body</div><div class="line">document.scripts.length // 2</div></pre></td></tr></table></figure>
<h3 id="document-body"><a href="#document-body" class="headerlink" title="document.body"></a>document.body</h3><ul>
<li>返回当前文档的body元素</li>
<li>可读写</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">document<span class="selector-class">.body</span> <span class="comment">// 返回当前文档的body元素</span></div><div class="line">document<span class="selector-class">.body</span> = document.createElement(<span class="string">'body'</span>)</div><div class="line">document<span class="selector-class">.body</span> <span class="comment">// 返回新创建的body元素</span></div></pre></td></tr></table></figure>
<h3 id="document-cookie"><a href="#document-cookie" class="headerlink" title="document.cookie"></a>document.cookie</h3><ul>
<li>返回与当前文档相关的所有cookie组成的字符串。如: <code>a=1; b=2</code></li>
<li>可进行增删改查操作</li>
<li>和普通对象属性的读写操作不同</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设目前页面中存在如下cookie: `a=1; b=2`</span></div><div class="line"></div><div class="line"><span class="comment">// 增加cookie</span></div><div class="line"><span class="built_in">document</span>.cookie <span class="comment">// 'a=1; b=2'</span></div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'c=3'</span> <span class="comment">// 'c=3'</span></div><div class="line"><span class="built_in">document</span>.cookie <span class="comment">// 'a=1; b=2; c=3'</span></div><div class="line"></div><div class="line"><span class="comment">// 修改cookie</span></div><div class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">d.setTime(<span class="built_in">Date</span>.now() + <span class="number">1</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>)</div><div class="line">d.toUTCString()</div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'c=4; expires='</span> + d <span class="comment">// 设置10天之后过期</span></div><div class="line"><span class="built_in">document</span>.cookie <span class="comment">// 'a=1; b=2; c=4'</span></div><div class="line"></div><div class="line"><span class="comment">// 读取cookie</span></div><div class="line"><span class="keyword">let</span> cookieName = <span class="string">'c'</span></div><div class="line"><span class="keyword">let</span> cookieReg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^| )'</span> + cookieName + <span class="string">'=([^;]*)(;|$)'</span>)</div><div class="line"><span class="built_in">document</span>.cookie.match(cookieReg)[<span class="number">2</span>] <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="comment">// 删除cookie</span></div><div class="line"><span class="keyword">let</span> n = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">n.setTime(<span class="built_in">Date</span>.now() - <span class="number">1</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>)</div><div class="line">n.toUTCString()</div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'c=0; expires='</span> + n</div><div class="line"><span class="built_in">document</span>.cookie <span class="comment">// 'a=1; b=2'</span></div></pre></td></tr></table></figure>
<h3 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h3><ul>
<li>返回文档的域名</li>
<li>可读可写，但写入是有限制的</li>
<li>一级域名相同的请求，但二级、或三级域名不同，可以通过设置domain来达到跨域的效果</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设当前页面的域名为http://a.b.c.com</span></div><div class="line">docuemnt<span class="selector-class">.domain</span> <span class="comment">// 'a.b.c.com'</span></div><div class="line">document<span class="selector-class">.domain</span> = <span class="string">'b.c.com'</span></div><div class="line">document<span class="selector-class">.domain</span> <span class="comment">// 'b.c.com'</span></div><div class="line">document<span class="selector-class">.domain</span> = <span class="string">'c.com'</span></div><div class="line">document<span class="selector-class">.domain</span> <span class="comment">// 'c.com'</span></div><div class="line">document<span class="selector-class">.domain</span> = <span class="string">'com'</span> <span class="comment">// 报错</span></div><div class="line">document<span class="selector-class">.domain</span> = <span class="string">'d.b.c.com'</span> <span class="comment">// 报错</span></div><div class="line">document<span class="selector-class">.domain</span> = <span class="string">'a.b.d.com'</span> <span class="comment">//报错</span></div><div class="line"></div><div class="line"><span class="comment">// a.b.com下面的a.html引入c.b.com下面的b.html</span></div><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;<span class="selector-tag">iframe</span> name=<span class="string">"demo"</span> src=<span class="string">"http://c.b.com/b.html"</span>&gt;&lt;/iframe&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line">frames[<span class="string">'demo'</span>]<span class="selector-class">.document</span> <span class="comment">// 报跨域错误</span></div><div class="line"></div><div class="line"><span class="comment">// 在a.b.com下a.html和c.b.com下的b.html页面同时设置domain可以解除跨域限制</span></div><div class="line">document<span class="selector-class">.domain</span> = <span class="string">'b.com'</span></div><div class="line">`</div></pre></td></tr></table></figure>
<h3 id="document-lastModified"><a href="#document-lastModified" class="headerlink" title="document.lastModified"></a>document.lastModified</h3><ul>
<li>返回文档最后被修改的日期和时间</li>
<li>字符串</li>
</ul>
<h3 id="document-referrer"><a href="#document-referrer" class="headerlink" title="document.referrer"></a>document.referrer</h3><ul>
<li>返回加载当前文档的文档的URL</li>
<li>如果不是通过其他文档加载的当前文档，比如从地址栏中直接输入，则referrer为空字符串</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设从http://a.b.com/a.html页面打开了http://c.d.com/b.html页面</span></div><div class="line"><span class="comment">// 在http://c.d.com/b.html中获取referrer</span></div><div class="line">document<span class="selector-class">.referrer</span> <span class="comment">// http://a.b.com/a.html</span></div></pre></td></tr></table></figure>
<h3 id="document-title"><a href="#document-title" class="headerlink" title="document.title"></a>document.title</h3><ul>
<li>返回当前文档的标题</li>
<li>可读可写</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 假设当前页面的title为'我是一个document demo'</span></div><div class="line">document<span class="selector-class">.title</span> <span class="comment">// '我是一个document demo'</span></div><div class="line">document<span class="selector-class">.title</span> = <span class="string">'123'</span> <span class="comment">// 标签上的title显示为123</span></div><div class="line">document<span class="selector-class">.title</span> <span class="comment">// '123'</span></div></pre></td></tr></table></figure>
<h3 id="document-URL"><a href="#document-URL" class="headerlink" title="document.URL"></a>document.URL</h3><ul>
<li>返回当前文档的实际URL</li>
<li>和location.href的区别</li>
</ul>
<table>
<thead>
<tr>
<th>document.URL</th>
<th>location.href</th>
</tr>
</thead>
<tbody>
<tr>
<td>只读</td>
<td>可读写</td>
</tr>
<tr>
<td>重定向之后的url</td>
<td>未重定向之前的url</td>
</tr>
</tbody>
</table>
<h3 id="document-getElementById-id"><a href="#document-getElementById-id" class="headerlink" title="document.getElementById(id)"></a>document.getElementById(id)</h3><ul>
<li>返回对拥有指定ID的第一个对象的引用</li>
</ul>
<h3 id="document-getElementsByName-name"><a href="#document-getElementsByName-name" class="headerlink" title="document.getElementsByName(name)"></a>document.getElementsByName(name)</h3><ul>
<li>返回带有指定name属性的对象的集合</li>
</ul>
<h3 id="document-getElementsByTagName-tagname"><a href="#document-getElementsByTagName-tagname" class="headerlink" title="document.getElementsByTagName(tagname)"></a>document.getElementsByTagName(tagname)</h3><ul>
<li>返回指定标签名的对象集合</li>
<li>传入特殊字符串<code>*</code>将返回文档中所有元素的集合</li>
<li>tagname不区分大小写</li>
</ul>
<h3 id="document-characterSet"><a href="#document-characterSet" class="headerlink" title="document.characterSet"></a>document.characterSet</h3><ul>
<li>返回用于渲染当前文档的字符编码类型</li>
</ul>
<h3 id="document-charset"><a href="#document-charset" class="headerlink" title="document.charset"></a>document.charset</h3><ul>
<li>characterSet的别名，同characterSet</li>
</ul>
<h3 id="document-contentType"><a href="#document-contentType" class="headerlink" title="document.contentType"></a>document.contentType</h3><ul>
<li>返回当前文档的Content-Type(MIME)类型</li>
<li>该属性的返回值是浏览器检测到的,不一定是直接读取HTTP响应头中的或者HTML中meta标签指定的值</li>
</ul>
<h3 id="document-doctype"><a href="#document-doctype" class="headerlink" title="document.doctype"></a>document.doctype</h3><ul>
<li>返回当前文档关联的文档类型定义的对象</li>
<li>如果文档没有设置DTD(文档类型定义)，则该属性返回null</li>
<li>只读</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 假设文档设置<span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">document.doctype // <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line">document.doctype.name // html</div></pre></td></tr></table></figure>
<h3 id="document-documentElement"><a href="#document-documentElement" class="headerlink" title="document.documentElement"></a>document.documentElement</h3><ul>
<li>只读属性</li>
<li>返回文档的根元素，如HTML文档的html元素</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.documentElement === <span class="built_in">document</span>.children[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<h3 id="document-documentURI"><a href="#document-documentURI" class="headerlink" title="document.documentURI"></a>document.documentURI</h3><ul>
<li>返回文档地址字符串</li>
<li>只读属性</li>
<li>DOM4规范</li>
</ul>
<table>
<thead>
<tr>
<th>document.URL</th>
<th>document.documentURI</th>
</tr>
</thead>
<tbody>
<tr>
<td>只用于html文档</td>
<td>用于所有类型的文档</td>
</tr>
</tbody>
</table>
<h3 id="document-implementation"><a href="#document-implementation" class="headerlink" title="document.implementation"></a>document.implementation</h3><h3 id="document-styleSheets"><a href="#document-styleSheets" class="headerlink" title="document.styleSheets"></a>document.styleSheets</h3><ul>
<li>只读属性</li>
<li>返回一个由StyleSheet对象组成的StyleSheetList</li>
<li>类数组对象</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.styleSheets.item(<span class="number">0</span>) === <span class="built_in">document</span>.styleSheets[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<h3 id="document-styleSheetSets"><a href="#document-styleSheetSets" class="headerlink" title="document.styleSheetSets"></a>document.styleSheetSets</h3><ul>
<li>返回目前可用的样式表集合</li>
</ul>
<h3 id="document-children"><a href="#document-children" class="headerlink" title="document.children"></a>document.children</h3><ul>
<li>返回document的所有直接子元素节点</li>
<li>不包含DTD、注释、纯文本等</li>
<li>只读属性</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// html</div><div class="line"><span class="meta">&lt;!Doctype html&gt;</span></div><div class="line"><span class="comment">&lt;!--comments--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--comments--&gt;</span></div><div class="line"></div><div class="line">// js</div><div class="line">document.children // [html DOM]</div></pre></td></tr></table></figure>
<h3 id="document-firstElementChild-amp-amp-document-lastElementChild"><a href="#document-firstElementChild-amp-amp-document-lastElementChild" class="headerlink" title="document.firstElementChild &amp;&amp; document.lastElementChild"></a>document.firstElementChild &amp;&amp; document.lastElementChild</h3><ul>
<li>只读属性</li>
<li>返回document的第一个&amp;&amp;最后一个子元素节点</li>
<li>所有的元素节点都有此属性</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// html</div><div class="line"><span class="meta">&lt;!Doctype html&gt;</span></div><div class="line"><span class="comment">&lt;!--comments--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--comments--&gt;</span></div><div class="line"></div><div class="line">// js</div><div class="line">document.firstElementChild // html DOM</div><div class="line">document.lastElementChild // html DOM</div></pre></td></tr></table></figure>
<h3 id="document-activeElement"><a href="#document-activeElement" class="headerlink" title="document.activeElement"></a>document.activeElement</h3><ul>
<li>返回页面中获得焦点的元素</li>
<li>只读属性</li>
<li>大部分情况下返回input||textarea元素</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取输入框中被选中的文字</span></div><div class="line">let ele = document<span class="selector-class">.activeElement</span></div><div class="line">ele<span class="selector-class">.value</span><span class="selector-class">.substring</span>(ele<span class="selector-class">.selectionStart</span>, selectionEnd) <span class="comment">// 返回输入框中被选中的文本</span></div></pre></td></tr></table></figure>
<h3 id="document-defaultView"><a href="#document-defaultView" class="headerlink" title="document.defaultView"></a>document.defaultView</h3><ul>
<li>返回当前document对象所关联的window对象</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.defaultView === <span class="built_in">window</span></div></pre></td></tr></table></figure>
<h3 id="document-designMode"><a href="#document-designMode" class="headerlink" title="document.designMode"></a>document.designMode</h3><ul>
<li>控制整个文档是否可编辑</li>
<li>默认为’off’</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    <span class="selector-tag">i</span> am editable</div><div class="line">&lt;/body&gt;</div><div class="line">document<span class="selector-class">.designMode</span> = <span class="string">'on'</span> <span class="comment">// 整个文档可编辑</span></div></pre></td></tr></table></figure>
<h3 id="document-dir"><a href="#document-dir" class="headerlink" title="document.dir"></a>document.dir</h3><ul>
<li>返回文档中html元素上<code>dir</code>属性指定的文字的朝向，如果没指定，则返回空字符串</li>
<li>‘ltr’ || ‘rtl’</li>
<li>可读写</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;<span class="selector-tag">html</span> dir=<span class="string">"ltr"</span>&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line">document<span class="selector-class">.dir</span> <span class="comment">// 'ltr'</span></div><div class="line">document<span class="selector-class">.dir</span> = <span class="string">'rtl'</span> <span class="comment">// 文字变成从右向左排版</span></div></pre></td></tr></table></figure>
<h3 id="document-head"><a href="#document-head" class="headerlink" title="document.head"></a>document.head</h3><ul>
<li>返回文档中的head元素</li>
<li>只读属性</li>
</ul>
<h3 id="document-location"><a href="#document-location" class="headerlink" title="document.location"></a>document.location</h3><ul>
<li>返回一个location对象</li>
<li>同window.location</li>
</ul>
<h3 id="document-readyState"><a href="#document-readyState" class="headerlink" title="document.readyState"></a>document.readyState</h3><ul>
<li>状态列表</li>
</ul>
<table>
<thead>
<tr>
<th>状态</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>loading</td>
<td>文档加载</td>
</tr>
<tr>
<td>interactive</td>
<td>文档结束渲染但在加载内嵌资源</td>
</tr>
<tr>
<td>complete</td>
<td>文档加载完成时</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 模拟DOMContentLoaded</span></div><div class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.readyState === <span class="string">'interactive'</span>)&#123;</div><div class="line">        domContentLoadedCallback()</div><div class="line">    <span class="comment">// 模拟onload</span></div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.readState === <span class="string">'complete'</span>)&#123;</div><div class="line">        onloadCallback()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="document-onreadystatechange"><a href="#document-onreadystatechange" class="headerlink" title="document.onreadystatechange"></a>document.onreadystatechange</h3><ul>
<li>事件</li>
<li>当document.readyState属性发生变化时触发</li>
</ul>
<h3 id="document-createAttribute"><a href="#document-createAttribute" class="headerlink" title="document.createAttribute()"></a>document.createAttribute()</h3><ul>
<li>创建并返回一个新的属性节点</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;<span class="selector-tag">body</span></div><div class="line">    &lt;<span class="selector-tag">p</span> id=<span class="string">"demo"</span>&gt;<span class="selector-tag">i</span> am <span class="selector-tag">a</span> demo&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line">let <span class="selector-tag">p</span> = document.getElementById(<span class="string">'demo'</span>)</div><div class="line">let attr = document.createAttribute(<span class="string">'test'</span>)</div><div class="line">attr<span class="selector-class">.nodeValue</span> = <span class="string">'haha'</span></div><div class="line"><span class="selector-tag">p</span>.setAttributeNode(attr)</div><div class="line"><span class="selector-tag">p</span>.getAttribute(<span class="string">'test'</span>) <span class="comment">// 'haha'</span></div></pre></td></tr></table></figure>
<h3 id="document-createComment"><a href="#document-createComment" class="headerlink" title="document.createComment()"></a>document.createComment()</h3><ul>
<li>创建并返回一个注释节点</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> comment = <span class="built_in">document</span>.createComment(<span class="string">'我是一条注释'</span>)</div><div class="line"><span class="built_in">document</span>.body.appendChild(comment) <span class="comment">// 会在文档body结束标签之前插入一条注释</span></div></pre></td></tr></table></figure>
<h3 id="document-createDocumentFragment"><a href="#document-createDocumentFragment" class="headerlink" title="document.createDocumentFragment()"></a>document.createDocumentFragment()</h3><ul>
<li>返回一个空文档片段对象的引用</li>
<li>不是DOM树的一部分</li>
<li>通常的使用场景是创建一个文档片段，然后将创建的DOM元素插入到文档片段中，最后把文档片段插入到DOM树中。在DOM树中，文档片段会被替换为它所有的子元素</li>
<li>因为文档片段存在与内存中，并不在DOM树中，所以将子元素插入到文档片段时不会引起页面回流(reflow)(对元素位置和几何上的计算)。因此，使用文档片段document fragments 通常会起到优化性能的作用(better performance)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> docfrag = <span class="built_in">document</span>.createDocumentFragment()</div><div class="line"><span class="keyword">let</span> pEle = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>)</div><div class="line">pEle.textContent = <span class="string">'I am from fragment'</span></div><div class="line">docfrag.appendChild(pEle)</div><div class="line"><span class="built_in">document</span>.body.appendChild(docfrag) <span class="comment">// body结束标签之前插入一个p标签，内容为'I am from fragment'</span></div></pre></td></tr></table></figure>
<h3 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement()"></a>document.createElement()</h3><ul>
<li>创建并返回一个指定的HTML元素</li>
<li>如果创建一个未指定的元素时，返回HTMLUnkownElement</li>
</ul>
<h3 id="document-createRange"><a href="#document-createRange" class="headerlink" title="document.createRange()"></a>document.createRange()</h3><ul>
<li>返回一个Range对象</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> <span class="built_in">range</span> = document.createRange()</div><div class="line"><span class="built_in">range</span>.setStart(startNode, startOffset)</div><div class="line"><span class="built_in">range</span>.setEnd(endNode, endOffset)</div></pre></td></tr></table></figure>
<h3 id="document-createTextNode"><a href="#document-createTextNode" class="headerlink" title="document.createTextNode()"></a>document.createTextNode()</h3><ul>
<li>创建并返回一个文本节点</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">'创建了一个文本节点'</span>)</div><div class="line"><span class="built_in">document</span>.body.appendChild(textNode) <span class="comment">// body结束标签之前插入这行文字</span></div></pre></td></tr></table></figure>
<h3 id="document-createEvent-type"><a href="#document-createEvent-type" class="headerlink" title="document.createEvent(type)"></a>document.createEvent(type)</h3><ul>
<li>type string，代表被创建的事件的类型。可能的参数有：’UIEvents’/‘MouseEvents’/‘MutationEvents’/‘HTMLEvents’</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//html</span></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;p id=<span class="string">"demo"</span>&gt;text&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line"><span class="keyword">let</span> demo = document.getElementById(<span class="string">'demo'</span>)</div><div class="line">demo.addEventListener(<span class="string">'alert'</span>, function()&#123;</div><div class="line">    alert(<span class="string">'自定义事件'</span>)</div><div class="line">&#125;, <span class="literal">false</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="keyword">event</span> = document.createEvent(<span class="string">'HTMLEvents'</span>)</div><div class="line"><span class="keyword">event</span>.initEvent(<span class="string">'alert'</span>, <span class="literal">false</span>, <span class="literal">false</span>)</div><div class="line">demo.dispatchEvent(<span class="keyword">event</span>) <span class="comment">// 页面中alert弹出'自定义事件'</span></div></pre></td></tr></table></figure>
<h3 id="document-elementFromPoint"><a href="#document-elementFromPoint" class="headerlink" title="document.elementFromPoint()"></a>document.elementFromPoint()</h3><ul>
<li>返回当前文档上处于指定坐标位置最顶层的元素。最顶层的元素一定是html啊，哥有点惶恐</li>
<li>坐标是相对于包含该文档的浏览器窗口的左上角为原点来计算的, 通常 x 和 y 坐标都应为正数</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let ele = document.elementFromPoint()</div><div class="line">ele<span class="selector-class">.style</span><span class="selector-class">.backgroundColor</span> = <span class="string">'red'</span> <span class="comment">// html被整个添加红色背景</span></div></pre></td></tr></table></figure>
<h3 id="document-getElementsByClassName"><a href="#document-getElementsByClassName" class="headerlink" title="document.getElementsByClassName()"></a>document.getElementsByClassName()</h3><ul>
<li>返回一个类数组对象</li>
<li>包含所有指定class名称的元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span>link<span class="tag">&lt;/&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo1"</span>&gt;</span>div<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">'demo'</span>) <span class="comment">// [a DOM, p DOM]</span></div></pre></td></tr></table></figure>
<h3 id="document-getElementsByTagName"><a href="#document-getElementsByTagName" class="headerlink" title="document.getElementsByTagName()"></a>document.getElementsByTagName()</h3><ul>
<li>返回一个包括所有给定标签名称的元素的HTMLCollection</li>
<li>返回的HTMLCollection是实时的</li>
<li>可以指定特殊字符<code>*</code>获取所有元素</li>
</ul>
<h3 id="document-importNode-externalNode-deep"><a href="#document-importNode-externalNode-deep" class="headerlink" title="document.importNode(externalNode, deep)"></a>document.importNode(externalNode, deep)</h3><ul>
<li>externalNode 外部文档的节点</li>
<li>deep 是否深度拷贝节点，默认我true</li>
<li>节点不会从外部文档中删除，返回的是一个拷贝节点</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let node = frames[<span class="string">'frame'</span>]<span class="selector-class">.document</span><span class="selector-class">.getElementsByTagName</span>(<span class="string">'p'</span>)[<span class="number">0</span>] <span class="comment">// 获取名为frame的iframe中的第一个p元素</span></div><div class="line">let copy = document.importNode(node) <span class="comment">// 将元素导入当前window对象中</span></div><div class="line">document<span class="selector-class">.body</span><span class="selector-class">.appendChild</span>(copy) <span class="comment">// 将带入的元素插入文档</span></div></pre></td></tr></table></figure>
<h3 id="document-getElementById-id-1"><a href="#document-getElementById-id-1" class="headerlink" title="document.getElementById(id)"></a>document.getElementById(id)</h3><ul>
<li>id 大小写敏感的字符串，代表了所要查找的元素的唯一ID</li>
</ul>
<h3 id="document-querySelector-selectors"><a href="#document-querySelector-selectors" class="headerlink" title="document.querySelector(selectors)"></a>document.querySelector(selectors)</h3><ul>
<li>selectors 一个或多个CSS选择器字符串，如果多个则以逗号分隔</li>
<li>返回当前文档中第一个匹配特定选择器的元素</li>
<li>如果没有匹配到，返回null</li>
<li>如果匹配到多个，则返回第一个元素</li>
<li>CSS 伪类不会返回任何元素</li>
<li>如果要匹配的ID或选择器不符合CSS语法（比如不恰当地使用了冒号或者空格），你必须用反斜杠将这些字符转义</li>
</ul>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">&lt;body&gt;</div><div class="line">&lt;<span class="built-in">div</span> id=<span class="string">"foo\bar"</span>&gt;&lt;/<span class="built-in">div</span>&gt;</div><div class="line">&lt;<span class="built-in">div</span> class=<span class="string">"foo:bar"</span>&gt;&lt;/<span class="built-in">div</span>&gt;</div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"><span class="comment">// js</span></div><div class="line">document.querySelector(<span class="string">'#foo\bar'</span>) <span class="comment">// 匹配不到元素</span></div><div class="line">document.querySelector(<span class="string">'#foo\\\\bar'</span>) <span class="comment">// 匹配'#foo\bar'</span></div><div class="line">document.querySelector(<span class="string">'#foo:bar'</span>) <span class="comment">// 匹配不到元素</span></div><div class="line">document.querySelector(<span class="string">'.foo\\:bar'</span>) <span class="comment">// 匹配'.foo:bar'</span></div></pre></td></tr></table></figure>
<h3 id="document-querySelectorAll-selectors"><a href="#document-querySelectorAll-selectors" class="headerlink" title="document.querySelectorAll(selectors)"></a>document.querySelectorAll(selectors)</h3><ul>
<li>selectors 同querySelector</li>
<li>同querySelector不同的是：返回所有匹配到的元素</li>
</ul>
<h3 id="document-getElementsByName-name-1"><a href="#document-getElementsByName-name-1" class="headerlink" title="document.getElementsByName(name)"></a>document.getElementsByName(name)</h3><ul>
<li>name 元素的name属性</li>
<li>返回一个所有匹配到的元素的集合</li>
</ul>
<h3 id="document-getSelection"><a href="#document-getSelection" class="headerlink" title="document.getSelection()"></a>document.getSelection()</h3><ul>
<li>同window.getSelection()</li>
<li>返回一个Selection对象，表示用户选择的文本</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> selection = <span class="built_in">document</span>.getSelection()</div><div class="line">selection.toString() <span class="comment">// 返回被选中的字符串</span></div></pre></td></tr></table></figure>
<h3 id="document-hasFocus"><a href="#document-hasFocus" class="headerlink" title="document.hasFocus()"></a>document.hasFocus()</h3><ul>
<li>返回一个布尔值，表明当前文档或者当前文档的子节点是否获得了焦点</li>
<li>该方法可以用来判断当前文档中的活动元素是否获得了焦点</li>
<li>在浏览器中查看当前文档是，返回true；查看其它文档，或者浏览器在后台运行时返回false</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue源码解读-对参数Data的处理]]></title>
      <url>http://yoursite.com/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E5%AF%B9%E5%8F%82%E6%95%B0data%E7%9A%84%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>version: 1.0.24<br>对源码的解析部分，纯属个人理解(不是纯属虚构)，理解有误或者没有理解透彻的地方，欢迎多拍砖头</p>
</blockquote>
<h3 id="将参数data整体代理到实例上，暴露在-data上"><a href="#将参数data整体代理到实例上，暴露在-data上" class="headerlink" title="将参数data整体代理到实例上，暴露在$data上"></a>将参数data整体代理到实例上，暴露在<code>$data</code>上</h3><ul>
<li>此方法出现在<code>/src/instance/internal/state.js</code>文件中，而这个文件是提供内部方法的，理论上这个方法应该放在<code>/src/instance/api/state.js</code>，暂时未明白作者为什么这么处理。</li>
<li>此方法提供用户使用新的data代替旧data的机会</li>
<li>下面部分源码解释了为什么用户可以调用$data给实例重新赋值或拿到值，以及重新给$data赋值之后Vue做了哪些事情。</li>
</ul>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$data'</span>, &#123;</div><div class="line">    get () &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._data</div><div class="line">    &#125;,</div><div class="line">    set (newData) &#123;</div><div class="line">        <span class="keyword">if</span> (newData !== <span class="keyword">this</span>._data) &#123;</div><div class="line">            <span class="comment">// 这并不是上面提到的疑问的答案，就算放在api中的文件里，依然可以调用到内部方法，因为此时_setData已经被挂载到prototype上了</span></div><div class="line">            <span class="keyword">this</span>._setData(newData)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 当用户调用$data给data重新赋值时的处理逻辑</span></div><div class="line">Vue.prototype._setData = <span class="function"><span class="keyword">function</span> (<span class="params">newData</span>) </span>&#123;</div><div class="line">    newData = newData || &#123;&#125;</div><div class="line">    <span class="keyword">var</span> oldData = <span class="keyword">this</span>._data</div><div class="line">    <span class="keyword">this</span>._data = newData</div><div class="line">    <span class="keyword">var</span> keys, key, i</div><div class="line">    <span class="comment">// 遍历旧的data中的所有属性，如果某些属性不存在于新的data中，将其从实例代理中删除</span></div><div class="line">    keys = <span class="built_in">Object</span>.keys(oldData)</div><div class="line">    i = keys.length</div><div class="line">    <span class="keyword">while</span> (i--) &#123;</div><div class="line">        key = keys[i]</div><div class="line">        <span class="keyword">if</span> (!(key <span class="keyword">in</span> newData)) &#123;</div><div class="line">            <span class="keyword">this</span>._unproxy(key)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 遍历新的data中的所有属性，将实例没有代理的属性添加到实例中</span></div><div class="line">    keys = <span class="built_in">Object</span>.keys(newData)</div><div class="line">    i = keys.length</div><div class="line">    <span class="keyword">while</span> (i--) &#123;</div><div class="line">        key = keys[i]</div><div class="line">        <span class="keyword">if</span> (!hasOwn(<span class="keyword">this</span>, key)) &#123;</div><div class="line">            <span class="keyword">this</span>._proxy(key)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// __ob__用于维护数据对应的Observer实例</span></div><div class="line">    oldData.__ob__.removeVm(<span class="keyword">this</span>)</div><div class="line">    <span class="comment">// 监听新数据，具体逻辑可以查看 `Vue源码解读-数据双向绑定简化版`</span></div><div class="line">    observe(newData, <span class="keyword">this</span>)</div><div class="line">    <span class="comment">// 将所有的数据订阅者(Watchers)都推入队列中等待执行</span></div><div class="line">    <span class="keyword">this</span>._digest()</div><div class="line">&#125;</div><div class="line"><span class="comment">// data中的属性代理到实例上的处理逻辑</span></div><div class="line">Vue.prototype._proxy = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="comment">// 对$或者_开头的属性不做处理。也就是说，data中的属性名不允许以$或_开头</span></div><div class="line">    <span class="keyword">if</span> (!isReserved(key)) &#123;</div><div class="line">        <span class="comment">// 这里为什么要将this存储到self中。源码中的注释解释是：这些属性可能会在子实例中被调用</span></div><div class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span></div><div class="line">        <span class="built_in">Object</span>.defineProperty(self, key, &#123;</div><div class="line">            <span class="attr">configurable</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">enumerable</span>: <span class="literal">true</span>,</div><div class="line">            <span class="comment">// 这里的get和set虽然只是简单的返回数据，但是在_data中对数据进行读写时，进行了逻辑处理。</span></div><div class="line">            get: <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> self._data[key]</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span> (<span class="params">val</span>) </span>&#123;</div><div class="line">                self._data[key] = val</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 解除属性在实例上的代理</span></div><div class="line">Vue.prototype._unproxy = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isReserved(key)) &#123;</div><div class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>[key]</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 将所有的数据订阅者都推入队列中等待被执行，只有通过$data改变数据时才会触发。</span></div><div class="line">Vue.prototype._digest = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>._watchers.length; i &lt; l; i++) &#123;</div><div class="line">        <span class="comment">// 传入参数true，保证复杂数据类型(Object/Array)的Watchers不会被触发</span></div><div class="line">        <span class="comment">// 暂时没理解为啥不需要复杂数据类型不需要被触发</span></div><div class="line">        <span class="keyword">this</span>._watchers[i].update(<span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 工具方法，存在于`/src/util/lang.js`中，用于判断字符串是否以`$`或`_`开头</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isReserved</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = (str + <span class="string">''</span>).charCodeAt(<span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> c === <span class="number">0x24</span> || c === <span class="number">0x5F</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="实例化过程中对data的初始化"><a href="#实例化过程中对data的初始化" class="headerlink" title="实例化过程中对data的初始化"></a>实例化过程中对data的初始化</h3><ul>
<li>Vue源码解读-参数合并中已经解释过，在对data进行初始化之前，已经对参数中的data做了处理，使其并不直接指向具体数据，而是指向一个获取数据的方法</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 该方法在实例化入口中被调用</span></div><div class="line">Vue.prototype._initState = function () &#123;</div><div class="line">    <span class="comment">// this._initProps()</span></div><div class="line">    <span class="comment">// this._initMeta()</span></div><div class="line">    <span class="comment">// this._initMethods()</span></div><div class="line">    <span class="keyword">this</span>._initData() <span class="comment">// 本文只关注对数据的处理</span></div><div class="line">    <span class="comment">// this._initComputed()</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 对数据设置实例代理，并设置监听</span></div><div class="line">Vue.prototype._initData = function () &#123;</div><div class="line">    <span class="keyword">var</span> dataFn = <span class="keyword">this</span>.$options.<span class="keyword">data</span></div><div class="line">    <span class="keyword">var</span> <span class="keyword">data</span> = <span class="keyword">this</span>._data = dataFn ? dataFn() : &#123;&#125;</div><div class="line">    <span class="keyword">if</span> (!isPlainObject(<span class="keyword">data</span>)) &#123;</div><div class="line">       <span class="keyword">data</span> = &#123;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> props = <span class="keyword">this</span>._props</div><div class="line">    <span class="keyword">var</span> keys = Object.keys(<span class="keyword">data</span>)</div><div class="line">    <span class="keyword">var</span> i, key</div><div class="line">    i = keys.length</div><div class="line">    <span class="keyword">while</span> (i--) &#123;</div><div class="line">        <span class="comment">// 当props中没有同名属性名时，设置实例代理</span></div><div class="line">        <span class="keyword">if</span> (!props || !hasOwn(props, key)) &#123;</div><div class="line">            <span class="keyword">this</span>._proxy(key)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 设置对数据的监听(深度监听，设置set&amp;get方法)</span></div><div class="line">    <span class="comment">// 具体可查看 Vue源码解读-数据双向绑定简化版</span></div><div class="line">    observe(<span class="keyword">data</span>, <span class="keyword">this</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue源码解读-$Watch的内部实现]]></title>
      <url>http://yoursite.com/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-watch%E7%9A%84%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>version: 1.0.24<br>对源码的解析部分，纯属个人理解(不是纯属虚构)，理解有误或者没有理解透彻的地方，欢迎多拍砖头<br>本文主要通过$watch，分析Vue源码中对数据双向绑定的实现  </p>
</blockquote>
<h3 id="使用Demo"><a href="#使用Demo" class="headerlink" title="使用Demo"></a>使用Demo</h3><ul>
<li>下面源码的解读主要基于此demo</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="string">'a'</span>: &#123;</div><div class="line">            <span class="string">'b'</span>: <span class="string">'B'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'b'</span>: <span class="string">'B'</span>,</div><div class="line">        <span class="string">'c'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="keyword">var</span> demounwatcher = demo.$watch(<span class="string">'a.b + b + c[1] | uppercase'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(newVal, oldVal)</div><div class="line">    demounwatcher() <span class="comment">// 取消监听</span></div><div class="line">&#125;, &#123;</div><div class="line">    <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 是否深层监听。当次属性为true，监听`a`属性，当`a.b`属性的值发生变化时也触发回调</span></div><div class="line">    immediate: <span class="literal">true</span>, <span class="comment">// 是否立即触发。当此属性为true，调用此方法时就触发一次回调</span></div><div class="line">    sync: <span class="literal">true</span>, <span class="comment">// 同步。不推入队列，直接触发执行</span></div><div class="line">    user: <span class="literal">true</span>, <span class="comment">// 推入用户队列还是指令队列</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><ul>
<li>监听表达式，在表达式发生变化时触发回调</li>
<li>主要逻辑封装在Watcher类中</li>
<li>指令和表达式的区别：指令包含表达式。如：<code>a + b | uppercase</code>是指令，<code>a + b</code>是表达式。表大会可以直接在js中执行，而指令需要处理后才能执行</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Vue.prototype.$watch = <span class="function"><span class="keyword">function</span> <span class="params">(expOrFn, cb, options)</span> &#123;</span></div><div class="line">    var <span class="keyword">vm</span> = this</div><div class="line">    var parsed</div><div class="line">    <span class="keyword">if</span> (typeof expOrFn === <span class="string">'string'</span>) &#123;</div><div class="line">        // 解析指令，拆分表达式和过滤器</div><div class="line">        parsed = parseDirective(expOrFn)</div><div class="line">        expOrFn = parsed.expression</div><div class="line">    &#125;</div><div class="line">    var watcher = <span class="keyword">new</span> Watcher(<span class="keyword">vm</span>, expOrFn, <span class="keyword">cb</span>, &#123;</div><div class="line">        deep: <span class="keyword">options</span> &amp;&amp; <span class="keyword">options</span>.deep,</div><div class="line">        <span class="keyword">sync</span>: <span class="keyword">options</span> &amp;&amp; <span class="keyword">options</span>.<span class="keyword">sync</span>,</div><div class="line">        <span class="built_in">filter</span><span class="variable">s:</span> parsed &amp;&amp; parsed.filters,</div><div class="line">        user: !options || <span class="keyword">options</span>.user !== false</div><div class="line">    &#125;)</div><div class="line">    // 如果设置了立即触发，则在调用$watch时就触发一次回调</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">options</span> &amp;&amp; <span class="keyword">options</span>.immediate) &#123;</div><div class="line">        <span class="keyword">cb</span>.<span class="keyword">call</span>(<span class="keyword">vm</span>, watcher.value)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unwatchFn</span> <span class="params">()</span> &#123;</span></div><div class="line">        watcher.teardown()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Watcher类"><a href="#Watcher类" class="headerlink" title="Watcher类"></a>Watcher类</h4><ul>
<li>构造函数</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 参数解释</span></div><div class="line"><span class="comment">// vm Vue实例</span></div><div class="line"><span class="comment">// expOrFn 表达式或函数</span></div><div class="line"><span class="comment">// cb 指令值或函数值发生变化时的回调</span></div><div class="line"><span class="comment">// options 配置参数，用于控制Watcher的行为</span></div><div class="line"><span class="comment">//      - &#123;Array&#125; filters // 过滤器</span></div><div class="line"><span class="comment">//      - &#123;Boolean&#125; twoWay // 是否为双向监听</span></div><div class="line"><span class="comment">//      - &#123;Boolean&#125; deep // 是否为深度监听</span></div><div class="line"><span class="comment">//      - &#123;Boolean&#125; user // 是否用户，用于判断放入哪一个队列(有两条异步队列)</span></div><div class="line"><span class="comment">//      - &#123;Boolean&#125; sync // 是否为同步执行回调</span></div><div class="line"><span class="comment">//      - &#123;Boolean&#125; lazy // true 下次触发时获取expOrFn当前值；false 立即获取当前值</span></div><div class="line"><span class="comment">//      - &#123;Function&#125; [preProcess] // 应用过滤器之前执行的方法</span></div><div class="line"><span class="comment">//      - &#123;Function&#125; [postProcess] // 应用过滤器之后执行的方法</span></div><div class="line">export <span class="keyword">default</span> function Watcher (vm, expOrFn, cb, options) &#123;</div><div class="line">    <span class="comment">// 将配置扩展到当前类上</span></div><div class="line">    <span class="keyword">if</span> (options) &#123;</div><div class="line">        extend(<span class="keyword">this</span>, options)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 是否是订阅的函数</span></div><div class="line">    <span class="keyword">var</span> isFn = typeof expOrFn === <span class="string">'function'</span></div><div class="line">    <span class="keyword">this</span>.vm = vm</div><div class="line">    <span class="comment">// 将当前Watcher类推送到对应的Vue实例中</span></div><div class="line">    vm._watchers.push(<span class="keyword">this</span>)</div><div class="line">    <span class="keyword">this</span>.expression = expOrFn</div><div class="line">    <span class="keyword">this</span>.cb = cb</div><div class="line">    <span class="comment">// 在订阅者管理员(batcher.js)中用到</span></div><div class="line">    <span class="keyword">this</span>.id = ++uid </div><div class="line">    <span class="keyword">this</span>.active = <span class="literal">true</span></div><div class="line">    <span class="keyword">this</span>.dirty = <span class="keyword">this</span>.lazy</div><div class="line">    <span class="keyword">this</span>.deps = [] <span class="comment">// 当前订阅者被哪些管理员管理着</span></div><div class="line">    <span class="keyword">this</span>.newDeps = []</div><div class="line">    <span class="keyword">this</span>.depIds = new Set() <span class="comment">// 订阅者管理员的id</span></div><div class="line">    <span class="keyword">this</span>.newDepIds = new Set()</div><div class="line">    <span class="keyword">this</span>.prevError = <span class="literal">null</span></div><div class="line">    <span class="keyword">if</span> (isFn) &#123;</div><div class="line">        <span class="comment">// 如果函数，相当于指定了当前订阅者获取数据的方法，每次订阅者通过这个方法获取数据然后与之前的值进行对比</span></div><div class="line">        <span class="keyword">this</span>.getter = expOrFn</div><div class="line">        <span class="keyword">this</span>.setter = undefined</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 否则的话解析表达式，具体可以看$get &amp; $set的内部实现中对parseExpression的解释</span></div><div class="line">        <span class="keyword">var</span> res = parseExpression(expOrFn, <span class="keyword">this</span>.twoWay)</div><div class="line">        <span class="keyword">this</span>.getter = res.<span class="keyword">get</span></div><div class="line">        <span class="keyword">this</span>.setter = res.<span class="keyword">set</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// value维护的是数据的旧值，拿到当前值，当下一次订阅的数据发生变化时和新值进行对比</span></div><div class="line">    <span class="comment">// 如果是lazy模式，则先不拿数据</span></div><div class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.lazy</div><div class="line">        ? undefined</div><div class="line">        : <span class="keyword">this</span>.<span class="keyword">get</span>()</div><div class="line">    <span class="keyword">this</span>.queued = <span class="keyword">this</span>.shallow = <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>获取expOrFn的值</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">Watcher.prototype.<span class="keyword">get</span> = function () &#123;</div><div class="line">    <span class="comment">// 看下面对beforeGet的解释</span></div><div class="line">    <span class="keyword">this</span>.beforeGet()</div><div class="line">    <span class="keyword">var</span> scope = <span class="keyword">this</span>.scope || <span class="keyword">this</span>.vm</div><div class="line">    <span class="keyword">var</span> value</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 调用getter时，会将此订阅者实例推送的到订阅者管理员的仓库中</span></div><div class="line">        value = <span class="keyword">this</span>.getter.call(scope, scope)</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line">    <span class="comment">// 如果需要深度监听</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.deep) &#123;</div><div class="line">        <span class="comment">// 请看下面对traverse的解释</span></div><div class="line">        traverse(value)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 前置执行逻辑</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.preProcess) &#123;</div><div class="line">        value = <span class="keyword">this</span>.preProcess(value)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 应用过滤器</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.filters) &#123;</div><div class="line">        value = scope._applyFilters(value, <span class="literal">null</span>, <span class="keyword">this</span>.filters, <span class="literal">false</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 后置执行逻辑</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.postProcess) &#123;</div><div class="line">        value = <span class="keyword">this</span>.postProcess(value)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// </span></div><div class="line">    <span class="keyword">this</span>.afterGet()</div><div class="line">    <span class="keyword">return</span> value</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在获取expOrFn的值之前，先将Dep类的静态属性target设置成当前订阅者。目的是在读取expOrFn(触发get)的值时，如果发现Dep.target有值，可以将当前订阅者推入到订阅者管理员的仓库中(beforeGet)</li>
</ul>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">Watcher</span>.proto<span class="keyword">type</span>.beforeGet = function () &#123;</div><div class="line">    <span class="type">Dep</span>.target = this</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果需要深度订阅时，对expOrFn的值进行递归处理。在数据读取的瞬间，就完成了想要完成的逻辑。</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">const seenObjects = <span class="keyword">new</span> Set()</div><div class="line"><span class="comment">// 内部递归时会传入seen参数，用于保存seen中已经存在的数据</span></div><div class="line"><span class="keyword">function</span> traverse (<span class="keyword">val</span>, seen) &#123;</div><div class="line">    <span class="keyword">let</span> i, keys</div><div class="line">    <span class="keyword">if</span> (!seen) &#123;</div><div class="line">        <span class="comment">// 如果没有配饰seen，把它指向seenObjects，并清空内容</span></div><div class="line">        seen = seenObjects</div><div class="line">        seen.clear()</div><div class="line">    &#125;</div><div class="line">    const isA = isArray(<span class="keyword">val</span>)</div><div class="line">    const isO = isObject(<span class="keyword">val</span>)</div><div class="line">    <span class="keyword">if</span> (isA || isO) &#123;</div><div class="line">        <span class="comment">// 如果当前值有Observer</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">val</span>.__ob__) &#123;</div><div class="line">            <span class="comment">// 拿到当前值的Observer的订阅者管理员的id</span></div><div class="line">            var depId = <span class="keyword">val</span>.__ob__.dep.id</div><div class="line">            <span class="comment">// 如果seen中已经有这个id了，直接返回</span></div><div class="line">            <span class="keyword">if</span> (seen.has(depId)) &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 否则添加到seen中</span></div><div class="line">                seen.add(depId)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 递归数组</span></div><div class="line">        <span class="keyword">if</span> (isA) &#123;</div><div class="line">            i = <span class="keyword">val</span>.length</div><div class="line">            <span class="comment">// 触发数组内部元素的get，因为此时Dep.target依然引用了当前Watcher，因此数组内部元素的Observer的订阅者管理员中也会被加入当前订阅者从而达到深度监听的目的</span></div><div class="line">            <span class="keyword">while</span> (i--) traverse(<span class="keyword">val</span>[i], seen)</div><div class="line">        <span class="comment">// 递归对象</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isO) &#123;</div><div class="line">            keys = Object.keys(<span class="keyword">val</span>)</div><div class="line">            i = keys.length</div><div class="line">            <span class="keyword">while</span> (i--) traverse(<span class="keyword">val</span>[keys[i]], seen)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>执行get后期的一些善后工作(afterGet)</li>
</ul>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Watcher</span>.proto<span class="keyword">type</span>.afterGet = function () &#123;</div><div class="line">    // 每次在<span class="type">Watcher</span>调用get方法之后都必须将<span class="type">Dep</span>的target属性设置为null，避免影响别人读取数据时的逻辑执行</div><div class="line">    <span class="type">Dep</span>.target = null</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue源码解读-指令V-Text的编译过程]]></title>
      <url>http://yoursite.com/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E6%8C%87%E4%BB%A4v-text%E7%9A%84%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>version: 1.0.24<br>对源码的解析部分，纯属个人理解(不是纯属虚构)，理解有误或者没有理解透彻的地方，欢迎多拍砖头<br>本文以一个v-text的用例为demo，讲解Vue内部的处理过程<br>文中重点解释v-text的编译过程。对data的处理过程将被简化<br>如果对data处理部分不够清楚的。请看<code>$watch的内部实现</code>或者<code>数据双向绑定简化版</code>   </p>
</blockquote>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><ul>
<li>template</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"demo"</span>&gt;</div><div class="line">    &lt;p v-<span class="built_in">text</span>=<span class="string">"msg"</span>&gt;&lt;/p&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>
<ul>
<li>Vue实例</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var demo = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="keyword">e</span><span class="variable">l:</span> <span class="string">'#demo'</span>,</div><div class="line">    dat<span class="variable">a:</span> &#123;</div><div class="line">        ms<span class="variable">g:</span> <span class="string">'Hello Vue!'</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Vue实例对data的处理"><a href="#Vue实例对data的处理" class="headerlink" title="Vue实例对data的处理"></a>Vue实例对data的处理</h3><ul>
<li>在之前的文章中已经对data的处理进行了很多次的解释(其实就是设置setter&amp;getter，同时创建一个订阅者管理员的过程)。</li>
<li>看看message被处理成啥样了哈。只给一个样例，就不多做解释了。</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dep = <span class="keyword">new</span> Dep()</div><div class="line">&#123;</div><div class="line">    msg: <span class="string">'Hello Vue!'</span>,</div><div class="line">    <span class="function"><span class="keyword">get</span> <span class="title">msg</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(Dep.target)&#123;</div><div class="line">            dep.<span class="keyword">add</span>(Dep.target)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> msg</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">set</span> <span class="title">msg</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        dep.notify()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="模板的编译过程"><a href="#模板的编译过程" class="headerlink" title="模板的编译过程"></a>模板的编译过程</h3><ul>
<li>编译元素</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileElement</span> <span class="params">(el, options)</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> hasAttrs = el.hasAttributes()</div><div class="line">    <span class="keyword">var</span> attrs = hasAttrs &amp;&amp; toArray(el.attributes)</div><div class="line">    <span class="keyword">var</span> linkFn = compileDirectives(attrs, options)</div><div class="line">    <span class="keyword">return</span> linkFn</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>编译指令。这里解释了各种指令的匹配过程，可以只看<code>v-text</code>匹配到的部分</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 匹配修改器，如：`.async`</span></div><div class="line"><span class="keyword">const</span> modifierRE = <span class="regexp">/\.[^\.]+/g</span></div><div class="line"><span class="comment">// 匹配transition指令。</span></div><div class="line"><span class="comment">// 动态绑定：`v-bind:transition=""`或`:transition=""`</span></div><div class="line"><span class="comment">// 静态绑定：`transition`</span></div><div class="line"><span class="keyword">const</span> transitionRE = <span class="regexp">/^(v-bind:|:)?transition$/</span></div><div class="line"><span class="comment">// 匹配动态绑定 `v-bind:`或`:`</span></div><div class="line"><span class="keyword">const</span> bindRE = <span class="regexp">/^v-bind:|^:/</span></div><div class="line"><span class="comment">// 匹配普通指令`v-text` `v-ref:xxx` 或`v-el:xxx`</span></div><div class="line"><span class="keyword">const</span> dirAttrRE = <span class="regexp">/^v-([^:]+)(?:$|:(.*)$)/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileDirectives</span> (<span class="params">attrs, options</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i = attrs.length</div><div class="line">    <span class="keyword">var</span> dirs = [] <span class="comment">// 存储当前元素上的所有属性解析之后的值</span></div><div class="line">    <span class="keyword">var</span> attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched</div><div class="line">    <span class="comment">// 遍历元素上的属性</span></div><div class="line">    <span class="keyword">while</span> (i--) &#123;</div><div class="line">        attr = attrs[i]</div><div class="line">        name = rawName = attr.name</div><div class="line">        value = rawValue = attr.value</div><div class="line">        <span class="comment">// 解析属性的值，看是否有`&#123;&#123;xxx&#125;&#125;`或者`&#123;&#123;&#123;xxx&#125;&#125;&#125;`</span></div><div class="line">        tokens = parseText(value)</div><div class="line">        <span class="comment">// 重置arg</span></div><div class="line">        arg = <span class="literal">null</span></div><div class="line">        <span class="comment">// 解析修改器</span></div><div class="line">        modifiers = parseModifiers(name)</div><div class="line">        <span class="comment">// 删除修改器</span></div><div class="line">        name = name.replace(modifierRE, <span class="string">''</span>)</div><div class="line">        <span class="comment">// 处理`&#123;&#123;&#125;&#125;`类型的值</span></div><div class="line">        <span class="keyword">if</span> (tokens) &#123;</div><div class="line">            value = tokensToExp(tokens)</div><div class="line">            arg = name</div><div class="line">            pushDir(<span class="string">'bind'</span>, publicDirectives.bind, tokens)</div><div class="line">        <span class="comment">// 处理过渡类型的指令</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (transitionRE.test(name)) &#123;</div><div class="line">            modifiers.literal = !bindRE.test(name)</div><div class="line">            pushDir(<span class="string">'transition'</span>, internalDirectives.transition)</div><div class="line">        <span class="comment">// 处理`on`类型的指令</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (onRE.test(name)) &#123;</div><div class="line">            arg = name.replace(onRE, <span class="string">''</span>)</div><div class="line">            pushDir(<span class="string">'on'</span>, publicDirectives.on)</div><div class="line">        <span class="comment">// 处理bind类型的指令</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bindRE.test(name)) &#123;</div><div class="line">            dirName = name.replace(bindRE, <span class="string">''</span>)</div><div class="line">            <span class="keyword">if</span> (dirName === <span class="string">'style'</span> || dirName === <span class="string">'class'</span>) &#123;</div><div class="line">                pushDir(dirName, internalDirectives[dirName])</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                arg = dirName</div><div class="line">                pushDir(<span class="string">'bind'</span>, publicDirectives.bind)</div><div class="line">            &#125;</div><div class="line">        <span class="comment">// 处理其他类型的指令。v-text指令将在这里被匹配</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((matched = name.match(dirAttrRE))) &#123;</div><div class="line">            <span class="comment">// 指令名</span></div><div class="line">            dirName = matched[<span class="number">1</span>]</div><div class="line">            <span class="comment">// 指令值</span></div><div class="line">            arg = matched[<span class="number">2</span>]</div><div class="line">            <span class="comment">// 匹配到对应的指令处理逻辑，指令处理逻辑中包含</span></div><div class="line">            <span class="comment">/* &#123;</span></div><div class="line">                bind()&#123;&#125;,</div><div class="line">                updata()&#123;&#125;</div><div class="line">            &#125; */</div><div class="line">            dirDef = resolveAsset(options, <span class="string">'directives'</span>, dirName, <span class="literal">true</span>)</div><div class="line">            <span class="keyword">if</span> (dirDef) &#123;</div><div class="line">                pushDir(dirName, dirDef)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pushDir</span> (<span class="params">dirName, def, interpTokens</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> parsed = parseDirective(value)</div><div class="line">        dirs.push(&#123;</div><div class="line">            <span class="attr">name</span>: dirName, <span class="comment">// 指令名称 `text`</span></div><div class="line">            attr: rawName, <span class="comment">// 指令原始名 `v-text`</span></div><div class="line">            raw: rawValue, <span class="comment">// 指令原始值 `msg`</span></div><div class="line">            def: def, <span class="comment">// 指令定义&#123;bind(), update()&#125;</span></div><div class="line">            arg: arg, <span class="comment">// 参数。`v-ref:xxx`中的`xxx`部分</span></div><div class="line">            modifiers: modifiers, <span class="comment">// 修改器</span></div><div class="line">            expression: parsed &amp;&amp; parsed.expression, <span class="comment">// 指令原始值中的表达式部分</span></div><div class="line">            filters: parsed &amp;&amp; parsed.filters, <span class="comment">// 指令原始值中的过滤器部分</span></div><div class="line">            interp: interpTokens,</div><div class="line">            <span class="attr">hasOneTime</span>: hasOneTimeToken</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 返回一个方法，用于指令和Vue实例的绑定</span></div><div class="line">    <span class="keyword">if</span> (dirs.length) &#123;</div><div class="line">        <span class="keyword">return</span> makeNodeLinkFn(dirs)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>指令和DOM的绑定</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeNodeLinkFn</span> <span class="params">(directives)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">nodeLinkFn</span> <span class="params">(vm, el, host, scope, frag)</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> i = directives.length</div><div class="line">        <span class="keyword">while</span> (i--) &#123;</div><div class="line">            vm._bindDir(directives[i], el, host, scope, frag)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 绑定的过程其实就是将指令实例化并存储到Vue实例的_directives数组中的过程</span></div><div class="line">Vue.prototype._bindDir = <span class="function"><span class="keyword">function</span> <span class="params">(descriptor, node, host, scope, frag)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>._directives.push(</div><div class="line">        <span class="comment">// 实例化指令</span></div><div class="line">        <span class="keyword">new</span> Directive(descriptor, <span class="keyword">this</span>, node, host, scope, frag)</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue源码解读-$Get & $Set的内部实现]]></title>
      <url>http://yoursite.com/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-get-set%E7%9A%84%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>version: 1.0.24<br>对源码的解析部分，纯属个人理解(不是纯属虚构)，理解有误或者没有理解透彻的地方，欢迎多拍砖头<br>$get &amp; $set是Vue对外暴露给用户使用的，用于对data的内容进行获取和设置的api。<br>出现在instance/api/data.js中，但调用的方法并不一定都在该文件中。<br>本文主要按方法的执行流程分析源码。  </p>
</blockquote>
<h3 id="get"><a href="#get" class="headerlink" title="$get"></a>$get</h3><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><ul>
<li>使用demo</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> demo = new Vue(&#123;</div><div class="line">    data: &#123;</div><div class="line">        <span class="selector-tag">a</span>: <span class="number">1</span>,</div><div class="line">        <span class="selector-tag">b</span>: <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">demo.<span class="variable">$get</span>(<span class="string">'a + b'</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h4><ul>
<li>将字符串表达式处理成一个对象，并调用对象的get方法返回结果。解构如下：</li>
</ul>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="built_in">exp</span>: <span class="built_in">exp</span> <span class="comment">// 字符串表达式</span></div><div class="line">    get: <span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span>&#125; <span class="comment">// 针对该表达式的get方法，用于返回该表达式的值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>源代码</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 第一个参数：待处理的字符串表达式</div><div class="line">// 第二个参数：对外api文档中并未提到第二个参数，暂时先不考虑</div><div class="line">Vue.prototype.$<span class="built_in">get</span> = <span class="function"><span class="keyword">function</span> <span class="params">(exp, asStatement)</span> &#123;</span></div><div class="line">    // 解析表达式，并返回一个包含<span class="built_in">get</span>方法的对象。</div><div class="line">    var <span class="keyword">res</span> = parseExpression(<span class="built_in">exp</span>)</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">res</span>) &#123;</div><div class="line">        // 这里不能保证在执行<span class="built_in">get</span>时不报错，因此需要放入<span class="keyword">try</span>/<span class="keyword">catch</span>中</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            // <span class="built_in">get</span>方法接收一个参数作为它的参数</div><div class="line">            <span class="keyword">return</span> <span class="keyword">res</span>.<span class="built_in">get</span>.<span class="keyword">call</span>(this, this)</div><div class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">e</span>) &#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="处理字符串表达式-parseExpression"><a href="#处理字符串表达式-parseExpression" class="headerlink" title="处理字符串表达式(parseExpression)"></a>处理字符串表达式(parseExpression)</h4><ul>
<li>首先检查该字符串表达式是否存在于缓存中。如果存在，直接取出。否则开始解析，将结果返回，并存放于缓存中</li>
<li>此方法不进为$get &amp; $set提供服务，因此以下的处理流程可能并不仅限于处理$get &amp; $set时</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// <span class="built_in">exp</span> 表达式</div><div class="line">// needSet 是否需要<span class="keyword">set</span>对表达式进行赋值。使用$<span class="built_in">get</span>获取表达式的值时，此值为false。因此这部分逻辑被剔除</div><div class="line">export <span class="function"><span class="keyword">function</span> <span class="title">parseExpression</span> <span class="params">(exp, needSet)</span> &#123;</span></div><div class="line">    // 去掉前后空字符</div><div class="line">    <span class="built_in">exp</span> = <span class="built_in">exp</span>.trim()</div><div class="line">    // 尝试从缓存获取。因为表达式可能会被不止一次的用到。缓存类部分容我稍后再禀。可暂时理解为它维护了一个存放键值对的<span class="keyword">map</span>表</div><div class="line">    var hit = expressionCache.<span class="built_in">get</span>(<span class="built_in">exp</span>)</div><div class="line">    <span class="keyword">if</span> (hit) &#123;</div><div class="line">        <span class="keyword">return</span> hit</div><div class="line">    &#125;</div><div class="line">    // 存放解析之后的结果</div><div class="line">    var <span class="keyword">res</span> = &#123; <span class="built_in">exp</span>: <span class="built_in">exp</span> &#125;</div><div class="line">    // 每个<span class="built_in">exp</span>表达式的解析结果中必须有<span class="built_in">get</span>方法</div><div class="line">    <span class="keyword">res</span>.<span class="built_in">get</span> = isSimplePath(<span class="built_in">exp</span>) &amp;&amp; <span class="built_in">exp</span>.indexOf(<span class="string">'['</span>) &lt; <span class="number">0</span></div><div class="line">        // 如果是简单表达式，并且表达式中不包含中括号</div><div class="line">        // 简单不需要处理，直接返回表达式的执行方法即可</div><div class="line">        // 简单的表达式直接返回等待执行即可，不需要走下面复杂的处理逻辑，提升性能</div><div class="line">        ? makeGetterFn(<span class="string">'scope.'</span> + <span class="built_in">exp</span>)</div><div class="line">        // 否则对<span class="built_in">exp</span>进行处理并最终返回在当前实例下的一个执行常规表达式的方法</div><div class="line">        : compileGetter(<span class="built_in">exp</span>)</div><div class="line">    expressionCache.<span class="keyword">put</span>(<span class="built_in">exp</span>, <span class="keyword">res</span>)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">res</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="判断是否为简单路径-isSimplePath"><a href="#判断是否为简单路径-isSimplePath" class="headerlink" title="判断是否为简单路径(isSimplePath)"></a>判断是否为简单路径(isSimplePath)</h4><p>大部分路径都是简单路径，如：a.b、a[‘b’]、a[‘’]。<br>少部分路径比较复杂，如：a.b + a.c + 1。<br>复杂路径的处理逻辑虽然也能处理简单路径，但流程会比较复杂。为了性能考虑，才有了这个判断。  </p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 以下是对正则的解释：</div><div class="line">// 以大小写字母或者_$开头</div><div class="line">// 中间是常规字符(字母数字下划线)</div><div class="line">// 以 .加上任意个大小写字母或者<span class="emphasis">_$ 或者 ['加上尽可能少的任一个字符加上'] 或者 ["加上尽可能少的任一个字符加上"] 或者 [加上任一个数字加] 或者 [加上以大小写字母或者_</span>$开头以任意个字母数字_$结尾] 的任意序列结尾</div><div class="line">// 如：<span class="code">`obj.a["b"]['c'][1]`</span></div><div class="line">const pathTestRE = /^[<span class="string">A-Za-z_$</span>][<span class="symbol">\w$</span>]<span class="emphasis">*(?:\.[A-Za-z_$][\w$]*</span>|\[<span class="string">'.*?'\</span>]|\[<span class="string">".*?"\</span>]|\[<span class="string">\d+\</span>]|\[<span class="string">[A-Za-z_$</span>][<span class="symbol">\w$</span>]<span class="emphasis">*\])*</span>$/</div><div class="line"></div><div class="line">// 如：<span class="code">`true`</span> <span class="code">`false`</span> <span class="code">`'true'`</span> <span class="code">`'false'`</span></div><div class="line">const booleanLiteralRE = /^(?:true|false)$/</div><div class="line"></div><div class="line">export function isSimplePath (exp) &#123;</div><div class="line"><span class="code">    return pathTestRE.test(exp) &amp;&amp;</span></div><div class="line"><span class="code">        // 不将true/false作为简单表达式路径</span></div><div class="line"><span class="code">        !booleanLiteralRE.test(exp) &amp;&amp;</span></div><div class="line"><span class="code">        排除`Math.`开头的字符串</span></div><div class="line"><span class="code">        exp.slice(0, 5) !== 'Math.'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="给表达式返回对应的get方法-makeGetterFn"><a href="#给表达式返回对应的get方法-makeGetterFn" class="headerlink" title="给表达式返回对应的get方法(makeGetterFn)"></a>给表达式返回对应的get方法(makeGetterFn)</h4><p>简单表达式时，直接返回该方法的执行结果<br>复杂表达式时，对表达式进行各种处理(继续看可以看到做了哪些处理)之后，仍然会返回该方法的执行结果  </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// scope: 当前方法的执行环境。但部分时候为当前Vue实例，for循环时猜测为当前循环所对应的数据对象(猜测，尚未看for指令的实现)</span></div><div class="line"><span class="comment">// body，如：scope.a.b(简单表达式)、scope.a + scope.b(复杂表达式)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeGetterFn</span> <span class="params">(body)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// scope是函数的参数；body是方法体。将此方法赋值给表达式的get方法，就可以方便的拿到表达式的值</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="function"><span class="keyword">Function</span><span class="params">(<span class="string">'scope'</span>, <span class="string">'return '</span> + body + <span class="string">';'</span>)</span></span></div><div class="line">    &#125; <span class="title">catch</span> <span class="params">(e)</span> &#123;</div><div class="line">        <span class="keyword">return</span> noop</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="对复杂表达式进行编译，获得get方法-compileGetter"><a href="#对复杂表达式进行编译，获得get方法-compileGetter" class="headerlink" title="对复杂表达式进行编译，获得get方法(compileGetter)"></a>对复杂表达式进行编译，获得get方法(compileGetter)</h4><ul>
<li>此方法可能会处理的情况有：$get、指令解析等</li>
<li>它主要的功能是对表达式进行拆分之后，在需要执行环境的变量前面加上执行环境<code>scope</code></li>
<li>当然表达式中还存在部分不需要添加执行环境的变量，所以在添加之前，先将这部分放到save的数组中</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> improperKeywords =</div><div class="line">    '<span class="keyword">break</span>,case,<span class="keyword">class</span>,catch,<span class="keyword">const</span>,<span class="keyword">continue</span>,debugger,default,' +</div><div class="line">    'delete,<span class="keyword">do</span>,<span class="keyword">else</span>,export,extends,finally,<span class="keyword">for</span>,function,<span class="keyword">if</span>,' +</div><div class="line">    'import,<span class="keyword">in</span>,instanceof,let,<span class="keyword">return</span>,super,switch,throw,try,' +</div><div class="line">    '<span class="keyword">var</span>,<span class="keyword">while</span>,with,yield,enum,await,implements,package,' +</div><div class="line">    'protected,static,interface,private,public'</div><div class="line"></div><div class="line"><span class="comment">// 匹配上述任意关键字</span></div><div class="line"><span class="keyword">const</span> improperKeywordsRE =</div><div class="line">    new RegExp('^(' + improperKeywords.<span class="keyword">replace</span>(/,/<span class="keyword">g</span>, '\\b|') + '\\b)')</div><div class="line"></div><div class="line"><span class="comment">// &#123;或, 加任意字母 加 至少一个任意大小写字符数字或$_加任意空格加: 或者 '加不是'和\或者任意个非元字符加' 或者 "加不是"和\或者任意个非元字符加" 或者 `加不是`和\或者任意个非元字符加$&#123; 或者 &#125;加不是`\或者任意个非元字符加` 或者 `加不是`和\或者任意个非元字符  或者 new 或者 typeof 或者 void</span></div><div class="line"><span class="comment">// 如`&#123;id :` `'abc'&#125;`  `typeof `  </span></div><div class="line"><span class="keyword">const</span> saveRE = /[\&#123;,]\s*[\w\<span class="variable">$_</span>]+\s*:|('(?:[^'\\]|\\.)*'|<span class="string">"(?:[^"</span>\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\&#123;|\&#125;(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`)|new |<span class="keyword">typeof</span> |void /<span class="keyword">g</span></div><div class="line"></div><div class="line"><span class="comment">// 任意空白字符</span></div><div class="line"><span class="keyword">const</span> wsRE = /\s/<span class="keyword">g</span></div><div class="line"></div><div class="line"><span class="comment">// 不能以大小写字母数字_$.开头，后面跟大小写字母_$，后面再跟任意大小写字母数字_$</span></div><div class="line"><span class="comment">// 此表达式可以将一个表达式中的不同变量进行拆解。想想上一行解释和js中字面量命名规范的关系</span></div><div class="line"><span class="keyword">const</span> identRE = /[^\w$\.](?:[A-Za-z_$][\w$]*)/<span class="keyword">g</span></div><div class="line"></div><div class="line"><span class="comment">// 匹配一个被双引号引起来的数字</span></div><div class="line"><span class="keyword">const</span> restoreRE = /<span class="string">"(\d+)"</span>/<span class="keyword">g</span></div><div class="line"></div><div class="line">let saved = []</div><div class="line"></div><div class="line">function compileGetter (exp) &#123;</div><div class="line">    <span class="comment">// 不允许在表达式中使用js保留字</span></div><div class="line">    <span class="keyword">if</span> (improperKeywordsRE.<span class="keyword">test</span>(exp)) &#123;</div><div class="line">        process.env.NODE_ENV !== 'production' &amp;&amp; warn(</div><div class="line">            'Avoid using reserved keywords <span class="keyword">in</span> expression: ' + <span class="built_in">exp</span></div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 一个新的表达式编译开始时，重置saved数组为空</span></div><div class="line">    saved.length = 0</div><div class="line">    <span class="keyword">var</span> body = <span class="built_in">exp</span></div><div class="line">        <span class="comment">// 将匹配到的字符传给save方法，并将匹配到的部分替换为save方法的返回值，最后去除空格</span></div><div class="line">        <span class="comment">// 避免这部分变量被添加执行环境</span></div><div class="line">        .<span class="keyword">replace</span>(saveRE, <span class="keyword">save</span>)</div><div class="line">        <span class="comment">// 删除字符串中的所有空格</span></div><div class="line">        .<span class="keyword">replace</span>(wsRE, '')</div><div class="line">    <span class="comment">// 在表达式之前加上一个空格，方便被identRE匹配为一个独立的字面量</span></div><div class="line">    body = (' ' + body)</div><div class="line">        <span class="comment">// 将匹配到的字面量(开头是个非字面量部分的字符)进行处理并回填，如` callHandler` `(item`，做了哪些处理，请看对rewrite的解释</span></div><div class="line">        .<span class="keyword">replace</span>(identRE, rewrite)</div><div class="line">        <span class="comment">// 将不需要添加执行环境的变量替换回来</span></div><div class="line">        .<span class="keyword">replace</span>(restoreRE, <span class="keyword">restore</span>)</div><div class="line">    <span class="keyword">return</span> makeGetterFn(body)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="给表达式中的字面量加上执行环境限制-rewrite"><a href="#给表达式中的字面量加上执行环境限制-rewrite" class="headerlink" title="给表达式中的字面量加上执行环境限制(rewrite)"></a>给表达式中的字面量加上执行环境限制(rewrite)</h4><ul>
<li>只有加上了执行环境，表达式才能正常，顺利的执行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 不需要被加上执行环境的字面量</span></div><div class="line"><span class="keyword">const</span> allowedKeywords =</div><div class="line">  <span class="string">'Math,Date,this,true,false,null,undefined,Infinity,NaN,'</span> +</div><div class="line">  <span class="string">'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,'</span> +</div><div class="line">  <span class="string">'encodeURIComponent,parseInt,parseFloat'</span></div><div class="line"></div><div class="line"><span class="comment">// 匹配是以上述字面量中的一个开头，有独立边界的字符串</span></div><div class="line"><span class="keyword">const</span> allowedKeywordsRE =</div><div class="line">  <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^('</span> + allowedKeywords.replace(<span class="regexp">/,/g</span>, <span class="string">'\\b|'</span>) + <span class="string">'\\b)'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 匹配一个被双引号引起来的数字</span></div><div class="line"><span class="keyword">const</span> restoreRE = <span class="regexp">/"(\d+)"/g</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rewrite</span> (<span class="params">raw</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = raw.charAt(<span class="number">0</span>)</div><div class="line">    <span class="comment">// 去掉开头部分被额外添加的那个空格</span></div><div class="line">    <span class="keyword">var</span> path = raw.slice(<span class="number">1</span>)</div><div class="line">    <span class="comment">// 如果是js原始方法或对象，如Math.cell()等，直接返回即可。不需要加上`scope`,因为他们都是全局的</span></div><div class="line">    <span class="keyword">if</span> (allowedKeywordsRE.test(path)) &#123;</div><div class="line">        <span class="keyword">return</span> raw</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 如果被匹配到的字符串中(这个字符串是由一个或多个非变量字符串和变量组成的)</span></div><div class="line">        <span class="comment">// 如果字符串中存在双引号，先将字符串中匹配到`"123"`形式的字符串替换为原始字符串</span></div><div class="line">        path = path.indexOf(<span class="string">'"'</span>) &gt; <span class="number">-1</span></div><div class="line">            ? path.replace(restoreRE, restore)</div><div class="line">            : path</div><div class="line">        <span class="keyword">return</span> c + <span class="string">'scope.'</span> + path</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="存储不需要加执行环境的变量"><a href="#存储不需要加执行环境的变量" class="headerlink" title="存储不需要加执行环境的变量"></a>存储不需要加执行环境的变量</h4><ul>
<li>先存起来，等需要添加执行环境的变量都加上之后，再替换回来</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 匹配`\n`</span></div><div class="line"><span class="keyword">const</span> newlineRE = <span class="regexp">/\n/g</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> saved = []</div><div class="line"></div><div class="line"><span class="comment">// 将上面匹配到的字符串进行一点处理之后存入saved数组，并返回这个字符串在数组中的位置</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">save</span> (<span class="params">str, isString</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i = saved.length</div><div class="line">    saved[i] = isString</div><div class="line">        ? str.replace(newlineRE, <span class="string">'\\n'</span>)</div><div class="line">        : str</div><div class="line">    <span class="comment">// 需要用`"`等不能构成变量的元素将`i`包裹起来，因为正常变量中也是可能包含数字的</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'"'</span> + i + <span class="string">'"'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="set"><a href="#set" class="headerlink" title="$set"></a>$set</h3><h4 id="什么场景下会用到它呢？"><a href="#什么场景下会用到它呢？" class="headerlink" title="什么场景下会用到它呢？"></a>什么场景下会用到它呢？</h4><ul>
<li>修改数组的某一项时</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> demo = new Vue(&#123;</div><div class="line">    data: &#123;</div><div class="line">        <span class="selector-tag">a</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">demo<span class="selector-class">.a</span>[<span class="number">1</span>] = <span class="string">'1'</span> <span class="comment">// 由于在设置a属性的set方法时，判断a的值是否发生变化是通过内存中的存储位置来进行的，因此直接操作数组的某一项时，不会触发a属性的订阅者的执行</span></div><div class="line">demo.<span class="variable">$set</span>(<span class="string">'a[1]'</span>, <span class="string">'1'</span>) <span class="comment">// 这样就没问题啦</span></div></pre></td></tr></table></figure>
<ul>
<li>设置不存在的属性时</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> demo = new Vue(&#123;</div><div class="line">    data: &#123;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">demo<span class="selector-class">.a</span><span class="selector-class">.b</span> = <span class="number">2</span> <span class="comment">// 此时连a都没有，肯定不能直接这么赋值</span></div><div class="line">demo.<span class="variable">$set</span>(<span class="string">'a.b'</span>, <span class="number">2</span>) <span class="comment">// 这样就没问题啦</span></div></pre></td></tr></table></figure>
<h4 id="入口-1"><a href="#入口-1" class="headerlink" title="入口"></a>入口</h4><ul>
<li>将字符串表达式处理成一个对象，并调用对象的set方法进行赋值。解构如下：</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    exp: exp <span class="comment">// 字符串表达式</span></div><div class="line">    <span class="keyword">get</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125; <span class="comment">// 针对该表达式的get方法，用于返回该表达式的值</span></div><div class="line">    <span class="keyword">set</span>: <span class="function"><span class="keyword">function</span><span class="params">(val)</span></span>&#123;&#125; <span class="comment">// 针对该表达式的get方法，用于给表达式赋值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>源代码</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Vue.prototype.$<span class="keyword">set</span> = <span class="function"><span class="keyword">function</span> <span class="params">(exp, val)</span> &#123;</span></div><div class="line">    // 和$<span class="built_in">get</span>中不同的是，需要传入第二个参数true，接下来就看parseExpression的了</div><div class="line">    var <span class="keyword">res</span> = parseExpression(<span class="built_in">exp</span>, true)</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">res</span> &amp;&amp; <span class="keyword">res</span>.<span class="keyword">set</span>) &#123;</div><div class="line">        // 看来解析之后的结果中出了上面出现的<span class="built_in">get</span>，又多了一个<span class="keyword">set</span>方法</div><div class="line">        <span class="keyword">res</span>.<span class="keyword">set</span>.<span class="keyword">call</span>(this, this, val)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="处理字符串表达式-parseExpression-1"><a href="#处理字符串表达式-parseExpression-1" class="headerlink" title="处理字符串表达式(parseExpression)"></a>处理字符串表达式(parseExpression)</h4><ul>
<li>同$get中调用的是同一个方法，只不过将这个方法拆成了两部分</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 为了精简逻辑，这里将源码中的缓存逻辑和<span class="built_in">get</span>方法的处理删除了</div><div class="line">export <span class="function"><span class="keyword">function</span> <span class="title">parseExpression</span> <span class="params">(exp, needSet)</span> &#123;</span></div><div class="line">    <span class="built_in">exp</span> = <span class="built_in">exp</span>.trim()</div><div class="line">    var <span class="keyword">res</span> = &#123; <span class="built_in">exp</span>: <span class="built_in">exp</span> &#125;</div><div class="line">    <span class="keyword">if</span> (needSet) &#123;</div><div class="line">        // 发现主要处理逻辑又封装了一个方法，讨厌！</div><div class="line">        <span class="keyword">res</span>.<span class="keyword">set</span> = compileSetter(<span class="built_in">exp</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">res</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="编译字符串，得到字符串的set方法-compileSetter"><a href="#编译字符串，得到字符串的set方法-compileSetter" class="headerlink" title="编译字符串，得到字符串的set方法(compileSetter)"></a>编译字符串，得到字符串的set方法(compileSetter)</h4><ul>
<li>源代码</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileSetter</span> <span class="params">(exp)</span> </span>&#123;</div><div class="line">    <span class="comment">// 先解析exp，需要用到parsers中封装的功能了</span></div><div class="line">    <span class="keyword">var</span> path = parsePath(exp)</div><div class="line">    <span class="keyword">if</span> (path) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(scope, val)</span> </span>&#123;</div><div class="line">            setPath(scope, path, val)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="再看看路径解析吧"><a href="#再看看路径解析吧" class="headerlink" title="再看看路径解析吧"></a>再看看路径解析吧</h4><ul>
<li>先从缓存取，如果缓存里没有，那就自己动手解析吧</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 我们发现暴露在外面的这部分接口主要处理缓存问题，嘎嘎。</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">parsePath</span> (<span class="params">path</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> hit = pathCache.get(path)</div><div class="line">    <span class="keyword">if</span> (!hit) &#123;</div><div class="line">        hit = parse(path)</div><div class="line">        <span class="keyword">if</span> (hit) &#123;</div><div class="line">            pathCache.put(path, hit)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> hit</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解析路径，将路径解析成由字面量组成的数组-parsePath"><a href="#解析路径，将路径解析成由字面量组成的数组-parsePath" class="headerlink" title="解析路径，将路径解析成由字面量组成的数组(parsePath)"></a>解析路径，将路径解析成由字面量组成的数组(parsePath)</h4><ul>
<li>得到一个由路径拆解成的字面量的数组，同时数组中维护着原始路径，如：<code>a[&quot;b&quot;][&#39;c&#39;].d</code>最终会被解析成</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> res = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div><div class="line">res<span class="selector-class">.raw</span> = <span class="selector-tag">a</span>[<span class="string">"b"</span>][<span class="string">'c'</span>]<span class="selector-class">.d</span> <span class="comment">// 字符串</span></div></pre></td></tr></table></figure>
<ul>
<li>源码，这部分不看也罢，比较复杂。只需要知道它干了什么就好。但如果感兴趣，可以继续往下看。</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 解析路径如：a / a.b / a['b'].c / a["b"].c</span></div><div class="line"><span class="comment">// 行为</span></div><div class="line"><span class="keyword">var</span> APPEND = <span class="number">0</span> <span class="comment">// 字符串拼接</span></div><div class="line"><span class="keyword">var</span> PUSH = <span class="number">1</span> <span class="comment">// 当一个变量或属性被解析完整之后就会被推入数组</span></div><div class="line"><span class="keyword">var</span> INC_SUB_PATH_DEPTH = <span class="number">2</span> <span class="comment">// </span></div><div class="line"><span class="keyword">var</span> PUSH_SUB_PATH = <span class="number">3</span></div><div class="line"></div><div class="line"><span class="comment">// 当前解析所处的状态</span></div><div class="line"><span class="keyword">var</span> BEFORE_PATH = <span class="number">0</span></div><div class="line"><span class="keyword">var</span> IN_PATH = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> BEFORE_IDENT = <span class="number">2</span></div><div class="line"><span class="keyword">var</span> IN_IDENT = <span class="number">3</span></div><div class="line"><span class="keyword">var</span> IN_SUB_PATH = <span class="number">4</span></div><div class="line"><span class="keyword">var</span> IN_SINGLE_QUOTE = <span class="number">5</span></div><div class="line"><span class="keyword">var</span> IN_DOUBLE_QUOTE = <span class="number">6</span></div><div class="line"><span class="keyword">var</span> AFTER_PATH = <span class="number">7</span></div><div class="line"><span class="keyword">var</span> ERROR = <span class="number">8</span></div><div class="line"><span class="comment">// 当状态为BEFORE_PATH时，解析到下一个字符时状态及需要执行的动作</span></div><div class="line">pathStateMachine[BEFORE_PATH] = &#123;</div><div class="line">    <span class="string">'ws'</span>: [BEFORE_PATH], <span class="comment">// 解析到的下一个字符如果是空格则状态仍为BEFORE_PATH</span></div><div class="line">    <span class="string">'ident'</span>: [IN_IDENT, APPEND], <span class="comment">// 解析到的下一个字符如果是[_$a-zA-Z]，状态改为IN_IDENT，并执行APPEND动作</span></div><div class="line">    <span class="string">'['</span>: [IN_SUB_PATH], <span class="comment">// 解析到下一个字符时如果是[，则将状态改为IN_SUB_PATH，没有动作</span></div><div class="line">    <span class="string">'eof'</span>: [AFTER_PATH] <span class="comment">// 解析到下一个字符发现已经结束了，则状态改为AFTER_PATH</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 当状态为IN_PATH时，解析到下一个字符时状态及需要执行的动作</span></div><div class="line">pathStateMachine[IN_PATH] = &#123;</div><div class="line">    <span class="string">'ws'</span>: [IN_PATH], <span class="comment">// 仍然是IN_PATH状态，无动作</span></div><div class="line">    <span class="string">'.'</span>: [BEFORE_IDENT], <span class="comment">// BEFORE_IDENT状态，无动作</span></div><div class="line">    <span class="string">'['</span>: [IN_SUB_PATH], <span class="comment">// IN_SUB_PATH状态，无动作</span></div><div class="line">    <span class="string">'eof'</span>: [AFTER_PATH] <span class="comment">// AFTER_PATH状态，无动作</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 上一个字符是'.'时，下一个状态会变成BEFORE_IDENT</span></div><div class="line">pathStateMachine[BEFORE_IDENT] = &#123;</div><div class="line">    <span class="string">'ws'</span>: [BEFORE_IDENT],</div><div class="line">    <span class="string">'ident'</span>: [IN_IDENT, APPEND]</div><div class="line">&#125;</div><div class="line"></div><div class="line">pathStateMachine[IN_IDENT] = &#123;</div><div class="line">    <span class="string">'ident'</span>: [IN_IDENT, APPEND],</div><div class="line">    <span class="string">'0'</span>: [IN_IDENT, APPEND],</div><div class="line">    <span class="string">'number'</span>: [IN_IDENT, APPEND],</div><div class="line">    <span class="string">'ws'</span>: [IN_PATH, PUSH],</div><div class="line">    <span class="string">'.'</span>: [BEFORE_IDENT, PUSH],</div><div class="line">    <span class="string">'['</span>: [IN_SUB_PATH, PUSH],</div><div class="line">    <span class="string">'eof'</span>: [AFTER_PATH, PUSH]</div><div class="line">&#125;</div><div class="line"><span class="comment">// 在子路径中遇到单引号和双引号时，将单引号和双引号也一起放入字符串中，后面会再进行处理</span></div><div class="line">pathStateMachine[IN_SUB_PATH] = &#123;</div><div class="line">    <span class="string">"'"</span>: [IN_SINGLE_QUOTE, APPEND],</div><div class="line">    <span class="string">'"'</span>: [IN_DOUBLE_QUOTE, APPEND],</div><div class="line">    <span class="string">'['</span>: [IN_SUB_PATH, INC_SUB_PATH_DEPTH],</div><div class="line">    <span class="string">']'</span>: [IN_PATH, PUSH_SUB_PATH],</div><div class="line">    <span class="string">'eof'</span>: ERROR,</div><div class="line">    <span class="string">'else'</span>: [IN_SUB_PATH, APPEND]</div><div class="line">&#125;</div><div class="line"><span class="comment">// 当遇到单引号是，状态变为IN_SINGLE_QUOTE，除非遇到下一个单引号，或者报错，否则一直处于IN_SINGLE_QUOTE状态，并执行APPEND动作</span></div><div class="line">pathStateMachine[IN_SINGLE_QUOTE] = &#123;</div><div class="line">    <span class="string">"'"</span>: [IN_SUB_PATH, APPEND],</div><div class="line">    <span class="string">'eof'</span>: ERROR,</div><div class="line">    <span class="string">'else'</span>: [IN_SINGLE_QUOTE, APPEND]</div><div class="line">&#125;</div><div class="line"><span class="comment">// 同单引号</span></div><div class="line">pathStateMachine[IN_DOUBLE_QUOTE] = &#123;</div><div class="line">    <span class="string">'"'</span>: [IN_SUB_PATH, APPEND],</div><div class="line">    <span class="string">'eof'</span>: ERROR,</div><div class="line">    <span class="string">'else'</span>: [IN_DOUBLE_QUOTE, APPEND]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span> <span class="params">(path)</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> keys = [] <span class="comment">// 记录解析之后的路径的数组，如：a['b'].c，会解析成[a, b, c]</span></div><div class="line">    <span class="keyword">var</span> index = <span class="number">-1</span> <span class="comment">// 记录当前解析到的字符的index</span></div><div class="line">    <span class="keyword">var</span> mode = BEFORE_PATH <span class="comment">// 记录当前解析所处的状态，默认处于解析开始状态</span></div><div class="line">    <span class="keyword">var</span> subPathDepth = <span class="number">0</span> <span class="comment">// </span></div><div class="line">    <span class="keyword">var</span> c, newChar, key, type, transition, action, typeMap</div><div class="line">    <span class="keyword">var</span> actions = [] <span class="comment">// 行为数组，不同状态时，会调用不同的行为</span></div><div class="line">    <span class="comment">// 将解析好的一个字符串放入数组</span></div><div class="line">    actions[PUSH] = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (key !== <span class="literal">undefined</span>) &#123;</div><div class="line">            keys.push(key)</div><div class="line">            key = <span class="literal">undefined</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 将正在被解析的字符串连接到已解析的字符串的后面</span></div><div class="line">    actions[APPEND] = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (key === <span class="literal">undefined</span>) &#123;</div><div class="line">            key = newChar</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            key += newChar</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    actions[INC_SUB_PATH_DEPTH] = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        actions[APPEND]()</div><div class="line">        subPathDepth++</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 路径中包含字符串时，先去除字符串再推入数组中</span></div><div class="line">    actions[PUSH_SUB_PATH] = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (subPathDepth &gt; <span class="number">0</span>) &#123;</div><div class="line">            subPathDepth--</div><div class="line">            mode = IN_SUB_PATH</div><div class="line">            actions[APPEND]()</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            subPathDepth = <span class="number">0</span></div><div class="line">            key = formatSubPath(key)</div><div class="line">            <span class="keyword">if</span> (key === <span class="literal">false</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                actions[PUSH]()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">maybeUnescapeQuote</span> <span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> nextChar = path[index + <span class="number">1</span>]</div><div class="line">        <span class="keyword">if</span> ((mode === IN_SINGLE_QUOTE &amp;&amp; nextChar === <span class="string">"'"</span>) ||</div><div class="line">            (mode === IN_DOUBLE_QUOTE &amp;&amp; nextChar === <span class="string">'"'</span>)) &#123;</div><div class="line">            index++</div><div class="line">            newChar = <span class="string">'\\'</span> + nextChar</div><div class="line">            actions[APPEND]()</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (mode != <span class="literal">null</span>) &#123;</div><div class="line">        index++ <span class="comment">// 记录当前字符的index</span></div><div class="line">        c = path[index] <span class="comment">// 拿到当前字符</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (c === <span class="string">'\\'</span> &amp;&amp; maybeUnescapeQuote()) &#123;</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 拿到当前字符的类型</span></div><div class="line">        type = getPathCharType(c)</div><div class="line">        <span class="comment">// 根据上一个状态，拿到当前可能出现的类型的全部处理逻辑和状态</span></div><div class="line">        typeMap = pathStateMachine[mode]</div><div class="line">        <span class="comment">// 匹配到当前类型的处理逻辑和状态</span></div><div class="line">        transition = typeMap[type] || typeMap[<span class="string">'else'</span>] || ERROR</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (transition === ERROR) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="comment">// parse error</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 将状态改为当前的状态</span></div><div class="line">        mode = transition[<span class="number">0</span>]</div><div class="line">        action = actions[transition[<span class="number">1</span>]]</div><div class="line">        <span class="keyword">if</span> (action) &#123;</div><div class="line">            <span class="comment">// 状态机中没有任何一个状态维护了数组的第三数据，因此目前来看没啥卵用</span></div><div class="line">            newChar = transition[<span class="number">2</span>]</div><div class="line">            <span class="comment">// 这里拿到的一定是当前被解析的这个字符串</span></div><div class="line">            newChar = newChar === <span class="literal">undefined</span></div><div class="line">                ? c</div><div class="line">                : newChar</div><div class="line">            <span class="comment">// 执行动作</span></div><div class="line">            <span class="keyword">if</span> (action() === <span class="literal">false</span>) &#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果是最后一步，也就是所有字符都解析完之后的一次循环</span></div><div class="line">        <span class="keyword">if</span> (mode === AFTER_PATH) &#123;</div><div class="line">            keys.raw = path</div><div class="line">            <span class="keyword">return</span> keys</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="最后再看set方法的调用-入口中被调用-，逻辑封装在setPath中"><a href="#最后再看set方法的调用-入口中被调用-，逻辑封装在setPath中" class="headerlink" title="最后再看set方法的调用(入口中被调用)，逻辑封装在setPath中"></a>最后再看set方法的调用(入口中被调用)，逻辑封装在setPath中</h4><ul>
<li>源码</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">export function setPath (obj, path, val) &#123;</div><div class="line">    var original = obj</div><div class="line">    <span class="comment">// 如果传进来的path是字符串，先去解析path</span></div><div class="line">    <span class="keyword">if</span> (typeof path === <span class="string">'string'</span>) &#123;</div><div class="line">        path = parse(path)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!path || !isObject(obj)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span></div><div class="line">    &#125;</div><div class="line">    var last, <span class="built_in">key</span></div><div class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span>, l = path.length; i &lt; l; i++) &#123;</div><div class="line">        last = obj <span class="comment">// 记录上一次遍历处理之后的值</span></div><div class="line">        <span class="built_in">key</span> = path[i]</div><div class="line">        <span class="comment">// 这部分逻辑，抱歉暂时还不知道执行场景</span></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">key</span>.charAt(<span class="number">0</span>) === <span class="string">'*'</span>) &#123;</div><div class="line">            <span class="built_in">key</span> = parseExpression(<span class="built_in">key</span>.slice(<span class="number">1</span>)).<span class="built_in">get</span>.call(original, original)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果当前处理的不是数组的最后一项</span></div><div class="line">        <span class="keyword">if</span> (i &lt; l - <span class="number">1</span>) &#123;</div><div class="line">            obj = obj[<span class="built_in">key</span>]</div><div class="line">            <span class="comment">// 如果不是对象时，也就是说目前尚没有这个属性，或者属性不是对象类型</span></div><div class="line">            <span class="keyword">if</span> (!isObject(obj)) &#123;</div><div class="line">                obj = &#123;&#125;</div><div class="line">                <span class="comment">// 在上一次遍历处理的结果上进行属性扩展，同时在这个方法中会进行数据监听</span></div><div class="line">                <span class="built_in">set</span>(last, <span class="built_in">key</span>, obj)</div><div class="line">            &#125;</div><div class="line">        <span class="comment">// 处理到最后一项时</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 如果上一次遍历的结果是数组</span></div><div class="line">            <span class="keyword">if</span> (isArray(obj)) &#123;</div><div class="line">                <span class="comment">// 调用数组的$set方法(Vue从Array的原型链上扩展了此方法)</span></div><div class="line">                obj.$<span class="built_in">set</span>(<span class="built_in">key</span>, val)</div><div class="line">            <span class="comment">// 如果上一次遍历的结果是对象，并且属性存在该对象中</span></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">key</span> in obj) &#123;</div><div class="line">                <span class="comment">// 直接赋值就行啦</span></div><div class="line">                obj[<span class="built_in">key</span>] = val</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 否则就是调用set了，当然也是为了添加对此属性的监控</span></div><div class="line">                <span class="built_in">set</span>(obj, <span class="built_in">key</span>, val)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="对数组进行赋值时-数组的-set方法"><a href="#对数组进行赋值时-数组的-set方法" class="headerlink" title="对数组进行赋值时(数组的$set方法)"></a>对数组进行赋值时(数组的$set方法)</h4><ul>
<li>源码</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def( <span class="comment">// Object.defineProperty的简写</span></div><div class="line">    arrayProto, <span class="comment">// Array.prototype</span></div><div class="line">    <span class="string">'$set'</span>,</div><div class="line">    function $<span class="keyword">set</span> (index, <span class="keyword">val</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (index &gt;= <span class="keyword">this</span>.length) &#123;</div><div class="line">            <span class="keyword">this</span>.length = Number(index) + <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 这一句是关键，splice会改变原始数组，从而触发数组的Watchers逻辑执行</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.splice(index, <span class="number">1</span>, <span class="keyword">val</span>)[<span class="number">0</span>]</div><div class="line">    &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<h4 id="对尚不存在的属性进行赋值时-set"><a href="#对尚不存在的属性进行赋值时-set" class="headerlink" title="对尚不存在的属性进行赋值时(set)"></a>对尚不存在的属性进行赋值时(set)</h4><ul>
<li>如此啰嗦的处理，主要是为了给新属性添加监控，方便订阅者可以订阅该属性</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">export function <span class="keyword">set</span> (obj, key, <span class="keyword">val</span>) &#123;</div><div class="line">    <span class="comment">// 如果obj已经包含key属性了，说明属性监控什么的都已经处理好了，直接改变值就行了</span></div><div class="line">    <span class="keyword">if</span> (hasOwn(obj, key)) &#123;</div><div class="line">        obj[key] = <span class="keyword">val</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果obj是Vue实例，那实际上操作的数据是保存在_data中的，对它执行set</span></div><div class="line">    <span class="keyword">if</span> (obj._isVue) &#123;</div><div class="line">        <span class="keyword">set</span>(obj._data, key, <span class="keyword">val</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> ob = obj.__ob__</div><div class="line">    <span class="comment">// 如果当前obj没有有__ob__属性，说明这个对象不需要被监听，也是直接赋值就行了</span></div><div class="line">    <span class="keyword">if</span> (!ob) &#123;</div><div class="line">        obj[key] = <span class="keyword">val</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 对obj添加key属性，同时给key属性设置getter&amp;setter</span></div><div class="line">    ob.convert(key, <span class="keyword">val</span>)</div><div class="line">    <span class="comment">// 触发obj上添加的监控，因为此时obj已经发生变化了</span></div><div class="line">    ob.dep.notify()</div><div class="line">    <span class="comment">// 如果Observer监听的是最外层数据($data引用的数据)，它会维护它所监听的数据所在的Vue实例的引用</span></div><div class="line">    <span class="keyword">if</span> (ob.vms) &#123;</div><div class="line">        <span class="keyword">var</span> i = ob.vms.length</div><div class="line">        <span class="keyword">while</span> (i--) &#123;</div><div class="line">            <span class="keyword">var</span> vm = ob.vms[i]</div><div class="line">            <span class="comment">// 在实例上进行数据代理</span></div><div class="line">            vm._proxy(key)</div><div class="line">            <span class="comment">// 在当前实例下触发所有的监听</span></div><div class="line">            vm._digest()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">val</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="接下来的处理逻辑请看数据双线绑定简化版和Watchers-数据订阅者-异步执行队列"><a href="#接下来的处理逻辑请看数据双线绑定简化版和Watchers-数据订阅者-异步执行队列" class="headerlink" title="接下来的处理逻辑请看数据双线绑定简化版和Watchers(数据订阅者)异步执行队列"></a>接下来的处理逻辑请看<code>数据双线绑定简化版</code>和<code>Watchers(数据订阅者)异步执行队列</code></h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue源码解读-参数合并(mergeOptions)]]></title>
      <url>http://yoursite.com/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E5%8F%82%E6%95%B0%E5%90%88%E5%B9%B6-mergeOptions/</url>
      <content type="html"><![CDATA[<blockquote>
<p>version: 1.0.24<br>对源码的解析部分，纯属个人理解(不是纯属虚构)，理解有误或者没有理解透彻的地方，欢迎多拍砖头<br>该功能主要用于类的继承过程中和类的实例化过程中。主要是按照预先设定好的合并策略将父类和子类或者类和实例中的参数进行合并<br><code>/src/util/options.js</code>  </p>
</blockquote>
<h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><h4 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h4><ul>
<li>对外暴露的参数合并入口，主要在Vue实例化和Vue子类声明(组件声明)及实例化前期处理参数时被调用。</li>
</ul>
<a id="more"></a>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果存在vm，则说明是在实例化过程中被调用</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mergeOptions</span> (<span class="params">parent, child, vm</span>) </span>&#123;</div><div class="line">    <span class="comment">// 处理局部组件，保证局部组件已经初始化(继承了Vue，成为Vue的子类)</span></div><div class="line">    guardComponents(child)</div><div class="line">    <span class="comment">// 处理props参数的值，保证props的值按照key-&gt;value的方式被赋值</span></div><div class="line">    guardProps(child)</div><div class="line">    <span class="built_in">var</span> options = &#123;&#125;</div><div class="line">    <span class="built_in">var</span> key</div><div class="line">    <span class="comment">// 这部分代码只存在于源码中，产出之后的代码中并不存在，但官方文档中却提供了用法说明，比较奇怪</span></div><div class="line">    <span class="comment">// 先不管它</span></div><div class="line">    <span class="keyword">if</span> (child.extends) &#123;</div><div class="line">        <span class="built_in">parent</span> = <span class="keyword">typeof</span> child.extends === <span class="string">'function'</span></div><div class="line">            ? mergeOptions(<span class="built_in">parent</span>, child.extends.options, vm)</div><div class="line">            : mergeOptions(<span class="built_in">parent</span>, child.extends, vm)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// mixins提供可复用功能，当不同组件之间共用一部分初始化参数时使用</span></div><div class="line">    <span class="comment">// 引用一个数组</span></div><div class="line">    <span class="keyword">if</span> (child.mixins) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">var</span> i = <span class="number">0</span>, l = child.mixins.length; i &lt; l; i++) &#123;</div><div class="line">            <span class="built_in">var</span> mixin = child.mixins[i]</div><div class="line">            <span class="built_in">var</span> mixinOptions = mixin.prototype <span class="keyword">instanceof</span> Vue</div><div class="line">                ? <span class="attribute">mixin.options</span></div><div class="line">                : mixin</div><div class="line">            <span class="comment">// 先将mixins中的数据同parent进行合并</span></div><div class="line">            <span class="built_in">parent</span> = mergeOptions(<span class="built_in">parent</span>, mixinOptions, vm)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> <span class="built_in">parent</span>) &#123;</div><div class="line">        mergeField(key)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> child) &#123;</div><div class="line">        <span class="keyword">if</span> (!hasOwn(<span class="built_in">parent</span>, key)) &#123;</div><div class="line">            mergeField(key)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">mergeField</span> (<span class="params">key</span>) </span>&#123;</div><div class="line">        <span class="built_in">var</span> strat = strats[key] || defaultStrat</div><div class="line">        <span class="comment">// 调用对应的合并策略</span></div><div class="line">        options[key] = strat(<span class="built_in">parent</span>[key], child[key], vm, key)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> options</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 主要用于确保局部组件被正确的初始化</span></div><div class="line"><span class="comment">// 对外暴露的局部组件的使用方式有如下两种</span></div><div class="line"><span class="comment">// let Haha = Vue.extend(options)</span></div><div class="line"><span class="comment">// components: &#123;</span></div><div class="line"><span class="comment">//     'haha': Haha, // 第一种，事先声明</span></div><div class="line"><span class="comment">//     'hengheng': options // 第二种，只传入初始化的参数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">guardComponents</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (options.components) &#123;</div><div class="line">        <span class="comment">// guardArrayAssets其实在这里啥也没干，忽略它就好</span></div><div class="line">        <span class="built_in">var</span> components = options.components =</div><div class="line">            guardArrayAssets(options.components)</div><div class="line">        <span class="built_in">var</span> ids = <span class="built_in">Object</span>.keys(components)</div><div class="line">        <span class="built_in">var</span> def</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">var</span> i = <span class="number">0</span>, l = ids.length; i &lt; l; i++) &#123;</div><div class="line">            <span class="built_in">var</span> key = ids[i]</div><div class="line">            <span class="comment">// 避免用户使用通用的html标签和Vue预定的(slot|partial|component)标签</span></div><div class="line">            <span class="comment">// 也就是说，如果用户用了上述key，会直接被忽略，不生效</span></div><div class="line">            <span class="keyword">if</span> (commonTagRE.test(key) || reservedTagRE.test(key)) &#123;</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            &#125;</div><div class="line">            def = components[key]</div><div class="line">            <span class="comment">// 此处存在重复劳动，第一种使用方式获得的值已经是Vue的子类了，但依然会在调用isPlainObject时返回true，进入Vue.extend进行处理。虽然不会出问题，但相当于丢弃了之前的子类初始化，重新进行了一次。</span></div><div class="line">            <span class="comment">// 所以在使用中，如果想要避免此类情况，可以全都使用第二种方式进行局部组件的声明</span></div><div class="line">            <span class="keyword">if</span> (isPlainObject(def)) &#123;</div><div class="line">                components[key] = Vue.extend(def)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// prop参数传入的方式有如下几种</span></div><div class="line"><span class="comment">// props: ['a', 'b'] // 第一种：简单语法，不做数据校验</span></div><div class="line"><span class="comment">// props: &#123; // 第二种：对象语法，指定验证要求</span></div><div class="line"><span class="comment">//     'a': &#123;&#125;,</span></div><div class="line"><span class="comment">//     'b': &#123;&#125;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">guardProps</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="built_in">var</span> props = options.props</div><div class="line">    <span class="built_in">var</span> i, val</div><div class="line">    <span class="comment">// 如果是第一种用法</span></div><div class="line">    <span class="keyword">if</span> (isArray(props)) &#123;</div><div class="line">        <span class="comment">// 转换成第二种用法</span></div><div class="line">        options.props = &#123;&#125;</div><div class="line">        i = props.length</div><div class="line">        <span class="keyword">while</span> (i--) &#123;</div><div class="line">            val = props[i]</div><div class="line">            <span class="comment">// 如果数组元素是字符串，则字符串为props的key，没有类型检查配置</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">'string'</span>) &#123;</div><div class="line">                options.props[val] = <span class="literal">null</span></div><div class="line">            <span class="comment">// 数组元素可以是对象，可以进行类型检查配置，但这种用法解构不清晰，因此没有出现在Vue的官方文档里</span></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val.name) &#123;</div><div class="line">                options.props[val.name] = val</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="comment">// 如果是第二种用法</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPlainObject(props)) &#123;</div><div class="line">        <span class="built_in">var</span> keys = <span class="built_in">Object</span>.keys(props)</div><div class="line">        i = keys.length</div><div class="line">        <span class="keyword">while</span> (i--) &#123;</div><div class="line">            val = props[keys[i]]</div><div class="line">            <span class="comment">// 如果某个prop被赋值为function，将其转化为对象，把function作为对象的type属性的值，该function用于校验当前的prop的合法性</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">'function'</span>) &#123;</div><div class="line">                props[keys[i]] = &#123; <span class="attribute">type</span>: val &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="strats"><a href="#strats" class="headerlink" title="strats"></a>strats</h4><ul>
<li>绑定处理参数中各种数据的方法，统一在入口方法mergeOptions()中被调用</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建strats对象并绑定到config上</span></div><div class="line"><span class="selector-tag">var</span> strats = config<span class="selector-class">.optionMergeStrategies</span> = Object.create(null)</div></pre></td></tr></table></figure>
<ul>
<li><p>声明对参数中data的处理策略</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// parentVal 继承过程中代表父类的data，实例化过程中代表类中的data</span></div><div class="line"><span class="comment">// childVal 继承过程中代表子类的data，实例化过程中代表实例化过程中参数中传入的data</span></div><div class="line"><span class="comment">// vm 当前实例。如果不存在vm参数，则说明是通过component声明的组件的声明过程，此时组件尚未实例化，因此不存在对实例的引用</span></div><div class="line">strats.data = <span class="function"><span class="keyword">function</span> (<span class="params">parentVal, childVal, vm</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!vm) &#123;</div><div class="line">        <span class="comment">// 对组件声明过程中data的处理逻辑</span></div><div class="line">        <span class="comment">// 此时parentVal和childVal，只要有数据，必须是function类型，因为这里处理的组件的声明过程，Vue要求组件(子类)的声明时传入的data必须是function类型，否则不进行处理。原因是：组件是可复用功能模块，如果直接传入object类型(想想引用类型的特征)的data，会导致组件的所以实例都引用向同一份数据。但是个人觉得，Vue应该在内部去处理，避免用户踩进这样的坑。而不是提醒用户使用的时候小心有这样的坑。</span></div><div class="line">        </div><div class="line">        <span class="comment">// 如果当前组件没有data，则返回父类的data。</span></div><div class="line">        <span class="comment">// 父类可以保证data只能是undefined或者function类型（Vue类的data是undefined，其它Vue的子类或者子类的子类都在当前方法中被要求只能父类的类型相同）</span></div><div class="line">        <span class="keyword">if</span> (!childVal) &#123;</div><div class="line">            <span class="keyword">return</span> parentVal</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果当前组件的data不是function类型，则返回父类的data</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> childVal !== <span class="string">'function'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> parentVal</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 此时已经保证了子类的存在并且为function类型，所有如果父类不存在，直接返回子类就好了</span></div><div class="line">        <span class="keyword">if</span> (!parentVal) &#123;</div><div class="line">            <span class="keyword">return</span> childVal</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果上面的情况都不存在，说明父类和子类都存在data，且都是function类型</span></div><div class="line">        <span class="comment">// 此处只能返回一个方法，用于拿到合并后的数据。</span></div><div class="line">        <span class="comment">// 为啥要返回一个处理数据的方法，而不是直接返回处理之后的结果呢？</span></div><div class="line">        <span class="comment">// 因为data()中可能存在和当前实例绑定的数据，因此必须在实例化过程中才能拿到实例相关的数据</span></div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">mergedDataFn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> mergeData(</div><div class="line">                childVal.call(<span class="keyword">this</span>),</div><div class="line">                parentVal.call(<span class="keyword">this</span>)</div><div class="line">            )</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parentVal || childVal) &#123;</div><div class="line">        <span class="comment">// 处理实例化过程中的data</span></div><div class="line">        <span class="comment">// 为啥还是返回一个处理函数呢？</span></div><div class="line">        <span class="comment">// 因为数据是在实时变化的，因此需要在使用的时候实时进行合并。</span></div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">mergedInstanceDataFn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// instance merge</span></div><div class="line">            <span class="keyword">var</span> instanceData = <span class="keyword">typeof</span> childVal === <span class="string">'function'</span></div><div class="line">                ? childVal.call(vm)</div><div class="line">                : childVal</div><div class="line">            <span class="keyword">var</span> defaultData = <span class="keyword">typeof</span> parentVal === <span class="string">'function'</span></div><div class="line">                ? parentVal.call(vm)</div><div class="line">                : <span class="literal">undefined</span></div><div class="line">            <span class="keyword">if</span> (instanceData) &#123;</div><div class="line">                <span class="keyword">return</span> mergeData(instanceData, defaultData)</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> defaultData</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeData</span> (<span class="params">to, from</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> key, toVal, fromVal</div><div class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> <span class="keyword">from</span>) &#123;</div><div class="line">        toVal = to[key]</div><div class="line">        fromVal = <span class="keyword">from</span>[key]</div><div class="line">        <span class="keyword">if</span> (!hasOwn(to, key)) &#123;</div><div class="line">            set(to, key, fromVal)</div><div class="line">        <span class="comment">// 如果被merge的属性在to中是对象，在from中也是对象，则深度merge。</span></div><div class="line">        <span class="comment">// 如果仅to中是对象，from是非object类型，则保留to中的数据不变。</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isObject(toVal) &amp;&amp; isObject(fromVal)) &#123;</div><div class="line">            mergeData(toVal, fromVal)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> to</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>声明对参数中el的处理策略，此时拿到的可能是一个选择器字符串或者DOM对象</p>
</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">strats.<span class="keyword">el</span> = <span class="function"><span class="keyword">function</span> <span class="params">(parentVal, childVal, vm)</span> &#123;</span></div><div class="line">    <span class="keyword">if</span> (!vm &amp;&amp; childVal &amp;&amp; typeof childVal !== <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    var <span class="keyword">ret</span> = childVal || parentVal</div><div class="line">    // 在组件声明时，如果传入了<span class="keyword">el</span>参数，此时<span class="keyword">el</span>必须是<span class="function"><span class="keyword">function</span>类型。同<span class="title">data</span>一样，是为了避免此组件的所有实例指向同一个元素</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">vm</span> &amp;&amp; typeof <span class="keyword">ret</span> === <span class="string">'function'</span></div><div class="line">        ? <span class="keyword">ret</span>.<span class="keyword">call</span>(<span class="keyword">vm</span>)</div><div class="line">        : <span class="keyword">ret</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>声明对参数中声明周期钩子中绑定的处理函数的处理策略，不同阶段的钩子处理策略是相同的</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">strats.init =</div><div class="line">strats.created =</div><div class="line">strats.ready =</div><div class="line">strats.attached =</div><div class="line">strats.detached =</div><div class="line">strats.beforeCompile =</div><div class="line">strats.compiled =</div><div class="line">strats.beforeDestroy =</div><div class="line">strats.destroyed =</div><div class="line">strats.activate = <span class="function"><span class="keyword">function</span> <span class="params">(parentVal, childVal)</span> </span>&#123;</div><div class="line">    <span class="comment">// 如果存在当前实例当前生命周期的钩子</span></div><div class="line">    <span class="keyword">return</span> childVal</div><div class="line">        <span class="comment">// 如果当前实例的父级实例中存在当前生命周期的钩子</span></div><div class="line">        ? parentVal</div><div class="line">            <span class="comment">// 则将当前实例当前生命周期的钩子添加到父级钩子数组的后面(父级当前声明周期钩子只要存在，一定已经被处理成数组了)</span></div><div class="line">            ? parentVal.concat(childVal)</div><div class="line">            <span class="comment">// 如果父级当前生命周期钩子不存在，且当前实例的当前生命周期钩子是数组</span></div><div class="line">            : isArray(childVal)</div><div class="line">                <span class="comment">// 则返回当前实例的当前生命周期钩子数组</span></div><div class="line">                ? childVal</div><div class="line">                <span class="comment">// 如果父级当前生命周期钩子不存在，且当前实例的当前生命周期钩子不是数组，则将其放入数组</span></div><div class="line">                : [childVal]</div><div class="line">        <span class="comment">// 如果不存在当前实例当前生命周期的钩子，则直接返回父级当前生命周期钩子(undefined或数组)</span></div><div class="line">        : parentVal</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>声明对参数中events &amp; watch的处理策略</li>
</ul>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">strats.watch =</div><div class="line">strats.events = <span class="function"><span class="keyword">function</span> (<span class="params">parentVal, childVal</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!childVal) <span class="keyword">return</span> parentVal</div><div class="line">    <span class="keyword">if</span> (!parentVal) <span class="keyword">return</span> childVal</div><div class="line">    <span class="built_in">var</span> ret = &#123;&#125;</div><div class="line">    <span class="comment">// 现将父级对应参数扩展到ret上</span></div><div class="line">    extend(ret, parentVal)</div><div class="line">    <span class="comment">// 然后遍历子级(当前)参数</span></div><div class="line">    <span class="keyword">for</span> (<span class="built_in">var</span> key <span class="keyword">in</span> childVal) &#123;</div><div class="line">        <span class="built_in">var</span> <span class="built_in">parent</span> = ret[key]</div><div class="line">        <span class="built_in">var</span> child = childVal[key]</div><div class="line">        <span class="comment">// 将父级和子级中都存在值的属性指向一个数组，并将父级中的值放入数组，方便讲子级中的同名属性值放入数组</span></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">parent</span> &amp;&amp; !isArray(<span class="built_in">parent</span>)) &#123;</div><div class="line">            <span class="built_in">parent</span> = [<span class="built_in">parent</span>]</div><div class="line">        &#125;</div><div class="line">        ret[key] = <span class="built_in">parent</span></div><div class="line">            ? <span class="built_in">parent</span>.concat(child)</div><div class="line">            : [child]</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 此处并未保证返回的ret的所以属性都指向数组</span></div><div class="line">    <span class="keyword">return</span> ret</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>声明对参数中props &amp; methods &amp; computed的处理策略</li>
</ul>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">strats.props =</div><div class="line">strats.methods =</div><div class="line">strats.computed = <span class="function"><span class="keyword">function</span> <span class="params">(parentVal, childVal)</span> &#123;</span></div><div class="line">    <span class="keyword">if</span> (!childVal) <span class="keyword">return</span> parentVal</div><div class="line">    <span class="keyword">if</span> (!parentVal) <span class="keyword">return</span> childVal</div><div class="line">    var <span class="keyword">ret</span> = Object.create(null) // 与var <span class="keyword">ret</span> = &#123;&#125;相同</div><div class="line">    <span class="built_in">extend</span>(<span class="keyword">ret</span>, parentVal)</div><div class="line">    // 合并策略：子覆盖父</div><div class="line">    <span class="built_in">extend</span>(<span class="keyword">ret</span>, childVal)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">ret</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>声明对参数components/directive/elementDirective/filter/transition/partial的处理策略。</li>
</ul>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    <span class="symbol">'component</span>',</div><div class="line">    <span class="symbol">'directive</span>',</div><div class="line">    <span class="symbol">'elementDirective</span>',</div><div class="line">    <span class="symbol">'filter</span>',</div><div class="line">    <span class="symbol">'transition</span>',</div><div class="line">    <span class="symbol">'partial</span>'</div><div class="line">].forEach(<span class="name">function</span> (<span class="name">type</span>) &#123;</div><div class="line">  strats[<span class="name">type</span> + <span class="symbol">'s</span>'] = mergeAssets</div><div class="line">&#125;)</div><div class="line"></div><div class="line">function mergeAssets (<span class="name">parentVal</span>, childVal) &#123;</div><div class="line">    // 创建对象并把parentVal放到对象的prototype中</div><div class="line">    var res = Object.create(<span class="name">parentVal</span> || null)</div><div class="line">    return childVal</div><div class="line">        // 如果当前类或实例中存在对应的参数，则合并到新创建的对象中</div><div class="line">        ? extend(<span class="name">res</span>, guardArrayAssets(<span class="name">childVal</span>))</div><div class="line">        否则直接返回新创建的对象</div><div class="line">        : res</div><div class="line">&#125;</div><div class="line">// 将数组形式的数据转换成对象形式的数据</div><div class="line">function guardArrayAssets (<span class="name">assets</span>) &#123;</div><div class="line">    if (<span class="name">isArray</span>(<span class="name">assets</span>)) &#123;</div><div class="line">        var res = &#123;&#125;</div><div class="line">        var i = assets.length</div><div class="line">        var asset</div><div class="line">        while (<span class="name">i--</span>) &#123;</div><div class="line">            asset = assets[<span class="name">i</span>]</div><div class="line">            var id = typeof asset === <span class="symbol">'function</span>'</div><div class="line">                ? ((<span class="name">asset.options</span> &amp;&amp; asset.options.name) || asset.id)</div><div class="line">                : (<span class="name">asset.name</span> || asset.id)</div><div class="line">            if (<span class="name">!id</span>) &#123;</div><div class="line">                process.env.NODE_ENV !== <span class="symbol">'production</span>' &amp;&amp; warn(</div><div class="line">                <span class="symbol">'Array-syntax</span> assets must provide a <span class="string">"name"</span> or <span class="string">"id"</span> field.')</div><div class="line">            &#125; else &#123;</div><div class="line">                res[<span class="name">id</span>] = asset</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res</div><div class="line">    &#125;</div><div class="line">    return assets</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>其它参数采用默认处理策略</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> defaultStrat = <span class="function"><span class="keyword">function</span> <span class="params">(parentVal, childVal)</span> </span>&#123;</div><div class="line">    <span class="comment">// 优先选择当前组件的配置</span></div><div class="line">    <span class="keyword">return</span> childVal === <span class="literal">undefined</span></div><div class="line">        ? parentVal</div><div class="line">        : childVal</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue源码解读-生命周期]]></title>
      <url>http://yoursite.com/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>version: 1.0.24<br>对源码的解析部分，纯属个人理解(不是纯属虚构)，理解有误或者没有理解透彻的地方，欢迎多拍砖头<br><code>/src/instance/internal.js</code> &amp; <code>/src/instance/api.js</code></p>
</blockquote>
<h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><a id="more"></a>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue源码解读-类的初始化入口]]></title>
      <url>http://yoursite.com/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%85%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>version: 1.0.24<br>对源码的解析部分，纯属个人理解(不是纯属虚构)，理解有误或者没有理解透彻的地方，欢迎多拍砖头<br><code>/src/instance/vue.js</code></p>
</blockquote>
<h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><p>类的初始化过程中，主要绑定在类实例化过程中所需要用到的功能<br>这些功能分拆为两部分，一部分提供给类内部使用，一部分是暴露给外部的api<br>从目录命名也可看出功能划分，internal目录存放内部方法，api目录存放对外暴露的方法  </p>
<a id="more"></a>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">import initMixin from <span class="string">'./internal/init'</span></div><div class="line">import stateMixin from <span class="string">'./internal/state'</span></div><div class="line">import eventsMixin from <span class="string">'./internal/events'</span></div><div class="line">import lifecycleMixin from <span class="string">'./internal/lifecycle'</span></div><div class="line">import miscMixin from <span class="string">'./internal/misc'</span></div><div class="line"></div><div class="line">import dataAPI from <span class="string">'./api/data'</span></div><div class="line">import domAPI from <span class="string">'./api/dom'</span></div><div class="line">import eventsAPI from <span class="string">'./api/events'</span></div><div class="line">import lifecycleAPI from <span class="string">'./api/lifecycle'</span></div><div class="line"></div><div class="line"><span class="comment">// Vue构造方法，设计的如此简单也是有原因的：component方法在Vue类的基础上扩展定义类</span></div><div class="line"><span class="comment">// 也就是说Vue中不只存在Vue类，还存在Vue的继承类[占位符]()</span></div><div class="line">function Vue (options) &#123;</div><div class="line">    this._init(options)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 开始扩展类内部使用的方法，这些方法仅做功能块划分(类的初始化顺序)，不代表实例化过程执行顺序</span></div><div class="line"><span class="comment">// 类的实例化入口，执行此方法后被扩展到Vue的prototype上，以_开头</span></div><div class="line"><span class="function"><span class="title">initMixin</span><span class="params">(Vue)</span></span></div><div class="line"><span class="comment">// 参数处理功能，执行此方法后被扩展到Vue的prototype上，以_开头</span></div><div class="line"><span class="function"><span class="title">stateMixin</span><span class="params">(Vue)</span></span></div><div class="line"><span class="comment">// 事件处理功能，执行此方法后被扩展到Vue的prototype上，以_开头</span></div><div class="line"><span class="function"><span class="title">eventsMixin</span><span class="params">(Vue)</span></span></div><div class="line"><span class="comment">// 声明周期功能，执行此方法后被扩展到Vue的prototype上，以_开头</span></div><div class="line"><span class="function"><span class="title">lifecycleMixin</span><span class="params">(Vue)</span></span></div><div class="line"><span class="comment">// 其它功能，执行此方法后被扩展到Vue的prototype上，以_开头</span></div><div class="line"><span class="function"><span class="title">miscMixin</span><span class="params">(Vue)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 有了内部方法才能提供给外部使用，因此先扩展内部方法，再扩展外部方法</span></div><div class="line"><span class="comment">// 实例中数据处理方法，如`$set/$get/$watch`等</span></div><div class="line"><span class="function"><span class="title">dataAPI</span><span class="params">(Vue)</span></span></div><div class="line"><span class="comment">// DOM操作方法，如`$appendTo`等，执行此方法后被扩展到Vue的prototype上，以$开头</span></div><div class="line"><span class="function"><span class="title">domAPI</span><span class="params">(Vue)</span></span></div><div class="line"><span class="comment">// 事件绑定方法，如`$on/$onse`等，执行此方法后被扩展到Vue的prototype上，以$开头</span></div><div class="line"><span class="function"><span class="title">eventsAPI</span><span class="params">(Vue)</span></span></div><div class="line"><span class="comment">// 声明周期方法，如`$mount/$compile`等，其中`$mount`是模板编译的入口，执行此方法后被扩展到Vue的prototype上，以$开头</span></div><div class="line"><span class="function"><span class="title">lifecycleAPI</span><span class="params">(Vue)</span></span></div><div class="line"></div><div class="line">export default Vue</div></pre></td></tr></table></figure>
<h3 id="相关源码解读"><a href="#相关源码解读" class="headerlink" title="相关源码解读"></a>相关源码解读</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue源码解读-实例化入口]]></title>
      <url>http://yoursite.com/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%85%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>version: 1.0.24<br>对源码的解析部分，纯属个人理解(不是纯属虚构)，理解有误或者没有理解透彻的地方，欢迎多拍砖头<br>文件：<code>/src/instance/internal/init.js</code></p>
</blockquote>
<h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><p>原始Vue类的实例化和Vue的子类的实例化的入口都是这里<br>实例化过程中，主要关注各部分功能的实例化顺序<br>源码分析中提到的Vue实例包括Vue的子类实例<br>未进行解读部分为尚未读到或没读明白，嘎嘎。。。脸红了。。  </p>
<a id="more"></a>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 依赖工具类中的mergeOptions方法，用于处理被传入的参数</span></div><div class="line"><span class="keyword">import</span> &#123; mergeOptions &#125; from <span class="string">'../../util/index'</span></div><div class="line">let uid = <span class="number">0</span> <span class="comment">// 用于Vue实例的唯一标识</span></div><div class="line">export <span class="keyword">default</span> function (Vue) &#123;</div><div class="line">  Vue.prototype._init = function (options) &#123;</div><div class="line">    options = options || &#123;&#125;</div><div class="line">    <span class="keyword">this</span>.$el = <span class="literal">null</span> <span class="comment">// 当前Vue实例对DOM的引用</span></div><div class="line">    <span class="keyword">this</span>.$parent = options.parent <span class="comment">// 当前实例对父级Vue实例的引用(并不是原型链上的父子关系，而是映射到的DOM结构上的父子关系)</span></div><div class="line">    <span class="keyword">this</span>.$root = <span class="keyword">this</span>.$parent <span class="comment">// 当前实例对最外层Vue实例的引用，如果当前实例是最外层，引用自己</span></div><div class="line">      ? <span class="keyword">this</span>.$parent.$root</div><div class="line">      : <span class="keyword">this</span></div><div class="line">    <span class="keyword">this</span>.$children = [] <span class="comment">// DOM结构中处于内层的子级Vue实例(不包含其它后代)所组成的数组</span></div><div class="line">    <span class="keyword">this</span>.$refs = &#123;&#125;       <span class="comment">// 对子级Vue实例中通过`v-ref:xxx`命名过的实例的引用</span></div><div class="line">    <span class="keyword">this</span>.$els = &#123;&#125;        <span class="comment">// 对当前实例对应DOM中通过`v-el:xxx`命名过的子元素的引用，如果子元素命名重名，则返回第一个</span></div><div class="line">    <span class="keyword">this</span>._watchers = []   <span class="comment">// 当前实例中所以Watcher实例所组成的数组</span></div><div class="line">    <span class="keyword">this</span>._directives = [] <span class="comment">// 当前实例中所以Directive实例所组成的数组</span></div><div class="line">    <span class="keyword">this</span>._uid = uid++ <span class="comment">// 实例唯一标记，子类的实例也以此递增，不单独计数</span></div><div class="line">    <span class="keyword">this</span>._isVue = <span class="literal">true</span> <span class="comment">// Vue实例的标记，用于排除Observer对当前实例的监控</span></div><div class="line">    <span class="keyword">this</span>._events = &#123;&#125; <span class="comment">// 对当前实例中事件以及注册到该事件上的回调的记录，事件类型作为key存储</span></div><div class="line">    <span class="keyword">this</span>._eventsCount = &#123;&#125;       <span class="comment">// 事件的数量，事件类型作为key存储</span></div><div class="line"></div><div class="line">    <span class="comment">// fragment instance properties</span></div><div class="line">    <span class="keyword">this</span>._isFragment = <span class="literal">false</span></div><div class="line">    <span class="keyword">this</span>._fragment =         <span class="comment">// @type &#123;DocumentFragment&#125;</span></div><div class="line">    <span class="keyword">this</span>._fragmentStart =    <span class="comment">// @type &#123;Text|Comment&#125;</span></div><div class="line">    <span class="keyword">this</span>._fragmentEnd = <span class="literal">null</span> <span class="comment">// @type &#123;Text|Comment&#125;</span></div><div class="line"></div><div class="line">    <span class="comment">// 当前实例的声明周期状态记录，命名含义清晰的，不多做解释</span></div><div class="line">    <span class="keyword">this</span>._isCompiled =</div><div class="line">    <span class="keyword">this</span>._isDestroyed =</div><div class="line">    <span class="keyword">this</span>._isReady =</div><div class="line">    <span class="keyword">this</span>._isAttached =</div><div class="line">    <span class="keyword">this</span>._isBeingDestroyed =</div><div class="line">    <span class="keyword">this</span>._vForRemoving = <span class="literal">false</span> <span class="comment">// </span></div><div class="line">    <span class="keyword">this</span>._unlinkFn = <span class="literal">null</span> <span class="comment">// </span></div><div class="line"></div><div class="line">    <span class="keyword">this</span>._context = options._context || <span class="keyword">this</span>.$parent</div><div class="line">    <span class="keyword">this</span>._scope = options._scope</div><div class="line">    <span class="keyword">this</span>._frag = options._frag</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._frag) &#123;</div><div class="line">      <span class="keyword">this</span>._frag.children.push(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 如果当前实例存在对父级实例的引用，则将自己推入父级实例的$children数组中</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.$parent) &#123;</div><div class="line">      <span class="keyword">this</span>.$parent.$children.push(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 参数扩展，将类上参数扩展到实例中，不仅仅是简单的扩展，还会做一些特殊处理</span></div><div class="line">    options = <span class="keyword">this</span>.$options = mergeOptions(</div><div class="line">      <span class="keyword">this</span>.<span class="keyword">constructor</span>.options, <span class="comment">// 挂载在Vue类(或子类)上的options，主要存放组件、指令、元素指令、过滤器、自定义元素、过渡定义和replace的值</span></div><div class="line">      options,</div><div class="line">      <span class="keyword">this</span></div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="comment">// 将自己放入$parent的$refs中，前提是当前Vue实例存在_ref属性(使用v-ref:xxx定义过)</span></div><div class="line">    <span class="comment">// 功能在/src/instance/internal/lifecycle.js中，提取到本文下面解读</span></div><div class="line">    <span class="keyword">this</span>._updateRef()</div><div class="line"></div><div class="line">    <span class="comment">// 初始化_data为空对象，等待_initData时被赋值</span></div><div class="line">    <span class="keyword">this</span>._data = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment">// 触发生命周期中的第一个阶段：init。这里会同步执行参数中放入init字段的回调函数</span></div><div class="line">    <span class="comment">// 具体请看 Vue源码解读-生命周期</span></div><div class="line">    <span class="keyword">this</span>._callHook(<span class="string">'init'</span>)</div><div class="line"></div><div class="line">    <span class="comment">// 处理参数中的props/data/meta/methods/computed，</span></div><div class="line">    <span class="keyword">this</span>._initState()</div><div class="line"></div><div class="line">    <span class="comment">// 处理参数中的events/watch</span></div><div class="line">    <span class="keyword">this</span>._initEvents()</div><div class="line"></div><div class="line">    <span class="comment">// 触发生命周期：created</span></div><div class="line">    <span class="keyword">this</span>._callHook(<span class="string">'created'</span>)</div><div class="line"></div><div class="line">    <span class="comment">// 开始编译，处理视图相关的东东</span></div><div class="line">    <span class="keyword">if</span> (options.el) &#123;</div><div class="line">      <span class="keyword">this</span>.$mount(options.el)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="相关源码解读"><a href="#相关源码解读" class="headerlink" title="相关源码解读"></a>相关源码解读</h3><ul>
<li>_updateRef()，存在于声明周期功能中</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// remove：boolean类型，true表示删除，false表示添加</span></div><div class="line">Vue.prototype._updateRef = function (<span class="keyword">remove</span>) &#123;</div><div class="line">    <span class="comment">// 如果当前实例的$options中存在_ref参数。</span></div><div class="line">    <span class="comment">// 可能存在的情况是组件实例化过程中</span></div><div class="line">    <span class="keyword">var</span> <span class="keyword">ref</span> = <span class="keyword">this</span>.$options._<span class="function"><span class="keyword">ref</span></span></div><div class="line">    <span class="title">if</span> (<span class="params"><span class="keyword">ref</span></span>) &#123;</div><div class="line">        <span class="comment">// 将当前实例添加到父级实例的$refs中。</span></div><div class="line">        <span class="comment">// 这里需要考虑的是为什么不是添加到this.$parent.$refs中。。暂时不知道</span></div><div class="line">        <span class="keyword">var</span> refs = (<span class="keyword">this</span>._scope || <span class="keyword">this</span>._context).$<span class="function">refs</span></div><div class="line">        <span class="title">if</span> (<span class="params"><span class="keyword">remove</span></span>) &#123;</div><div class="line">            <span class="keyword">if</span> (refs[<span class="keyword">ref</span>] === <span class="keyword">this</span>) &#123;</div><div class="line">                refs[<span class="keyword">ref</span>] = <span class="literal">null</span></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            refs[<span class="keyword">ref</span>] = <span class="keyword">this</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>_callHook()，存在于事件处理功能中</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Vue.prototype._callHook = function (hook) &#123;</div><div class="line">    <span class="comment">// 触发声明周期`前`事件，如：`pre-hook:init`，希望在当前阶段之前被执行的逻辑可以绑定在此事件中</span></div><div class="line">    <span class="keyword">this</span>.$emit(<span class="string">'pre-hook:'</span> + hook)</div><div class="line">    <span class="keyword">var</span> handlers = <span class="keyword">this</span>.$options[hook]</div><div class="line">    <span class="comment">// 在当前实例中遍历执行绑定的当前阶段的处理逻辑</span></div><div class="line">    <span class="keyword">if</span> (handlers) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = handlers.length; i &lt; j; i++) &#123;</div><div class="line">            handlers[i].call(<span class="keyword">this</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 触发声明周期`后`事件，如：`hook:init`，希望在当前阶段的所有钩子函数全部被执行完成之后被执行的逻辑可以绑定在此事件中</span></div><div class="line">    <span class="keyword">this</span>.$emit(<span class="string">'hook:'</span> + hook)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="相关源码解读文章"><a href="#相关源码解读文章" class="headerlink" title="相关源码解读文章"></a>相关源码解读文章</h3><p><a href="">Vue源码解读-生命周期</a>  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue源码解读-源码入口]]></title>
      <url>http://yoursite.com/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E6%BA%90%E7%A0%81%E5%85%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>version: 1.0.24<br>对源码的解析部分，纯属个人理解(不是纯属虚构)，理解有误或者没有理解透彻的地方，欢迎多拍砖头<br>从入口开始解读Vue源码，让你循序渐进的了解Vue的设计思路及执行过程。<br>Vue源码使用部分ES6语法和功能<br><code>/src/index.js</code></p>
</blockquote>
<h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><p>导入Vue类的初始化入口，并在Vue类上扩展静态方法  </p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./instance/vue'</span> <span class="comment">// 请阅读 Vue源码解析-类的初始化入口</span></div><div class="line"><span class="keyword">import</span> installGlobalAPI <span class="keyword">from</span> <span class="string">'./global-api'</span> <span class="comment">// 将工具类方法扩展到Vue类上，请阅读Vue源码解析-类方法</span></div><div class="line">installGlobalAPI(Vue)</div><div class="line"><span class="comment">// 指定Vue的当前版本号</span></div><div class="line">Vue.version = <span class="string">'1.0.24'</span></div><div class="line"><span class="comment">// 导出Vue类，类的初始化全部完成</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</div></pre></td></tr></table></figure>
<h3 id="相关源码解析文章"><a href="#相关源码解析文章" class="headerlink" title="相关源码解析文章"></a>相关源码解析文章</h3><ul>
<li><a href="/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%85%A5%E5%8F%A3/">Vue源码解析-类的初始化入口</a></li>
<li><a href="./Vue源码解析-类方法.md">Vue源码解析-类方法</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue源码解读-Watchers(数据订阅者)异步执行队列]]></title>
      <url>http://yoursite.com/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-Watchers-%E6%95%B0%E6%8D%AE%E8%AE%A2%E9%98%85%E8%80%85-%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>除非当前Watcher被指定为同步执行，或者全局config中的async字段为false（生产环境不建议这样做，影响性能），否则所有的Watchers都被推入异步执行队列。<br>请先阅读<a href="/Vue-%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A">Vue源码解读-数据的双向绑定简陋版(仅用于原理说明)</a></p>
</blockquote>
<h4 id="订阅者接收到发布者的消息"><a href="#订阅者接收到发布者的消息" class="headerlink" title="订阅者接收到发布者的消息"></a>订阅者接收到发布者的消息</h4><ul>
<li>Watcher在被触发(update方法被调用)时，被推入异步执行队列。</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Watcher.js</span></div><div class="line">Watcher.prototype.update = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.sync || !config.async)&#123; <span class="comment">// 同步的情况</span></div><div class="line">        <span class="keyword">this</span>.run()        </div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">// 推入异步执行队列，该方法由队列管理员batcher.js对外暴露</span></div><div class="line">        pushWatcher(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>推入异步执行Watchers队列时，判断当前Watcher是否已经在队列中，在则返回。否则添加到合适的队列中并触发队列中的Watchers执行。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Watcher.js</span></div><div class="line">pushWatcher(watcher)&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">id</span> = watcher.id</div><div class="line">    <span class="comment">// 当前Watcher在队列中，则直接返回</span></div><div class="line">    <span class="keyword">if</span>(has[<span class="keyword">id</span>] == null)&#123; <span class="comment">// 可能为0，所以你懂得</span></div><div class="line">        <span class="comment">// 如果当前Watcher是用户触发，添加到用户Wachers队列，否则添加到指令Watchers队列</span></div><div class="line">        <span class="keyword">const</span> q = watcher.user ? userQueue : queue <span class="comment">// 为啥要分两个队列呢？下面给出解释</span></div><div class="line">        has[<span class="keyword">id</span>] = q.length</div><div class="line">        q.push(watcher)</div><div class="line">        <span class="comment">// 可以保证被推入队列的Watcher被执行到，继续往下看吧</span></div><div class="line">        <span class="keyword">if</span>(!waiting)&#123;</div><div class="line">            waiting = <span class="literal">true</span></div><div class="line">            nexTick(flushBatcherQueue)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Vue维护两条队列，分别存放指令产生的Watchers和用户通过$watch()产生的Watchers。<br>目的是保证指令的Watchers队列在用户Watchers队列之前被执行，保证DOM的可操作性。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// batcher.js</span></div><div class="line">let <span class="built_in">queue</span> = [] <span class="comment">// 存放指令Watchers队列</span></div><div class="line">let userQueue = [] <span class="comment">// 存放用户Watchers队列</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">flushBatcherQueue()&#123;</div><div class="line">    runBatcherQueue(<span class="built_in">queue</span>) <span class="comment">// 先执行指令Watchers队列</span></div><div class="line">    runBatcherQueue(userQueue) <span class="comment">// 再执行用户Watchers队列</span></div><div class="line">    <span class="comment">// 当执行用户Watchers队列的时候，可能指令Watchers队列又有新的任务了，因此需要再次执行上线的两个队列，直到两个队列的任务都被执行完。</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">queue</span>.length) &#123;</div><div class="line">        <span class="keyword">return</span> flushBatcherQueue()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>遍历当前队列中的所有Watchers，并触发Watchers</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// batcher.js</span></div><div class="line"><span class="comment">// 根据传入不同的队列，从而触发不同队列的执行</span></div><div class="line">runBatcherQueue(<span class="built_in">queue</span>)&#123;</div><div class="line">    <span class="comment">// 这里不能缓存队列的长度，因为在队列中的任务执行的过程中，可能会有新的Wacthers被添加进来，从而保证即waiting为true的时候，不触发nextTick的情况下，依然可以触发不断被添加进来的Watchers</span></div><div class="line">    <span class="keyword">for</span>(let i = <span class="number">0</span>; i &lt; <span class="built_in">queue</span>.length; i++)&#123;</div><div class="line">        var watcher = <span class="built_in">queue</span>[i]</div><div class="line">        var id = watcher.id</div><div class="line">        has[id] = null</div><div class="line">        wacther.run()</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">queue</span>.length = <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue源码解读-数据的双向绑定简陋版(仅用于原理说明)]]></title>
      <url>http://yoursite.com/Vue-%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文通过简化Vue源码，从复杂的Vue源码中抽取数据双向绑定部分的核心进行简化，以便于理解Vue是如何实现数据双向绑定的，其中使用了<br>ES5的Object.defineProperty()<br><code>发布-订阅</code>模式</p>
</blockquote>
<h3 id="监听数据变化"><a href="#监听数据变化" class="headerlink" title="监听数据变化"></a>监听数据变化</h3><ul>
<li>对data进行改造，所有属性设置set&amp;get，用于在属性获取或者设置时，添加逻辑</li>
</ul>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Dep用于订阅者的存储和收集，将在下面实现</span></div><div class="line"><span class="keyword">import</span> Dep <span class="keyword">from</span> <span class="string">'Dep'</span></div><div class="line"><span class="comment">// Observer类用于给data属性添加set&amp;get方法</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(value)&#123;</div><div class="line">        <span class="keyword">this</span>.value = value</div><div class="line">        <span class="keyword">this</span>.walk(value)</div><div class="line">    &#125;</div><div class="line">    walk(value)&#123;</div><div class="line">        <span class="built_in">Object</span>.keys(value).forEach(<span class="function"><span class="params">key</span> =&gt;</span> <span class="keyword">this</span>.convert(key, value[key]))</div><div class="line">    &#125;</div><div class="line">    convert(key, val)&#123;</div><div class="line">        defineReactive(<span class="keyword">this</span>.value, key, val)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep()</div><div class="line">    <span class="comment">// 给当前属性的值添加监听</span></div><div class="line">    <span class="keyword">var</span> chlidOb = observe(val)</div><div class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</div><div class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">get</span>: <span class="function"><span class="params">()</span>=&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'get value'</span>)</div><div class="line">            <span class="comment">// 如果Dep类存在target属性，将其添加到dep实例的subs数组中</span></div><div class="line">            <span class="comment">// target指向一个Watcher实例，每个Watcher都是一个订阅者</span></div><div class="line">            <span class="comment">// Watcher实例在实例化过程中，会读取data中的某个属性，从而触发当前get方法</span></div><div class="line">            <span class="comment">// 此处的问题是：并不是每次Dep.target有值时都需要添加到订阅者管理员中去管理，需要对订阅者去重，不影响整体思路，不去管它</span></div><div class="line">            <span class="keyword">if</span>(Dep.target)&#123;</div><div class="line">                dep.addSub(Dep.target)</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> val</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">set</span>: <span class="function">(<span class="params">newVal</span>) =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'new value seted'</span>)</div><div class="line">            <span class="keyword">if</span>(val === newVal) <span class="keyword">return</span></div><div class="line">            val = newVal</div><div class="line">            <span class="comment">// 对新值进行监听</span></div><div class="line">            chlidOb = observe(newVal)</div><div class="line">            <span class="comment">// 通知所有订阅者，数值被改变了</span></div><div class="line">            dep.notify()</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    <span class="comment">// 当值不存在，或者不是复杂数据类型时，不再需要继续深入监听</span></div><div class="line">    <span class="keyword">if</span>(!value || <span class="keyword">typeof</span> value !== <span class="string">'object'</span>)&#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Observer(value)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="管理订阅者"><a href="#管理订阅者" class="headerlink" title="管理订阅者"></a>管理订阅者</h3><ul>
<li>对订阅者进行收集、存储和通知</li>
</ul>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">export default class Dep&#123;</div><div class="line">    constructor()&#123;</div><div class="line">        this.subs = []</div><div class="line">    &#125;</div><div class="line">    addSub(<span class="function"><span class="keyword">sub</span>)</span>&#123;</div><div class="line">        this.subs.push(<span class="function"><span class="keyword">sub</span>)</span></div><div class="line">    &#125;</div><div class="line">    <span class="title">notify</span>()&#123;</div><div class="line">        // 通知所有的订阅者(Watcher)，触发订阅者的相应逻辑处理</div><div class="line">        this.subs.forEach((<span class="function"><span class="keyword">sub</span>) =&gt; <span class="title">sub</span>.<span class="title">update</span>())</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="订阅者"><a href="#订阅者" class="headerlink" title="订阅者"></a>订阅者</h3><ul>
<li>每个订阅者都是对某条数据的订阅</li>
<li>订阅者维护着每一次更新之前的数据，将其和更新之后的数据进行对比，如果发生了变化，则执行相应的业务逻辑，并更新订阅者中维护的数据的值</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Dep from <span class="string">'Dep'</span></div><div class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(vm, expOrFn, cb)&#123;</div><div class="line">        <span class="keyword">this</span>.vm = vm <span class="comment">// 被订阅的数据一定来自于当前Vue实例</span></div><div class="line">        <span class="keyword">this</span>.cb = cb <span class="comment">// 当数据更新时想要做的事情</span></div><div class="line">        <span class="keyword">this</span>.expOrFn = expOrFn <span class="comment">// 被订阅的数据</span></div><div class="line">        <span class="keyword">this</span>.<span class="keyword">val</span> = <span class="keyword">this</span>.<span class="keyword">get</span>() <span class="comment">// 维护更新之前的数据</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 对外暴露的接口，用于在订阅的数据被更新时，由订阅者管理员(Dep)调用</span></div><div class="line">    update()&#123;</div><div class="line">        <span class="keyword">this</span>.run()</div><div class="line">    &#125;</div><div class="line">    run()&#123;</div><div class="line">        const <span class="keyword">val</span> = <span class="keyword">this</span>.<span class="keyword">get</span>()</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">val</span> !== <span class="keyword">this</span>.<span class="keyword">val</span>)&#123;</div><div class="line">            <span class="keyword">this</span>.<span class="keyword">val</span> = <span class="keyword">val</span>;</div><div class="line">            <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">get</span>()&#123;</div><div class="line">        <span class="comment">// 当前订阅者(Watcher)读取被订阅数据的最新更新后的值时，通知订阅者管理员收集当前订阅者</span></div><div class="line">        Dep.target = <span class="keyword">this</span></div><div class="line">        const <span class="keyword">val</span> = <span class="keyword">this</span>.vm._data[<span class="keyword">this</span>.expOrFn]</div><div class="line">        <span class="comment">// 置空，用于下一个Watcher使用</span></div><div class="line">        Dep.target = <span class="literal">null</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">val</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ul>
<li>将数据代理到Vue实例上，真实数据存储于实例的_data属性中</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Observer, &#123;observe&#125; from <span class="string">'Observer'</span></div><div class="line"><span class="keyword">import</span> Watcher from <span class="string">'Watcher'</span></div><div class="line"></div><div class="line"></div><div class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Vue</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(options = &#123;&#125;)&#123;</div><div class="line">        <span class="comment">// 简化了$options的处理</span></div><div class="line">        <span class="keyword">this</span>.$options = options</div><div class="line">        <span class="comment">// 简化了对data的处理</span></div><div class="line">        let <span class="keyword">data</span> = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.<span class="keyword">data</span></div><div class="line">        <span class="comment">// 将所有data最外层属性代理到Vue实例上</span></div><div class="line">        Object.keys(<span class="keyword">data</span>).forEach(key =&gt; <span class="keyword">this</span>._proxy(key))</div><div class="line">        <span class="comment">// 监听数据</span></div><div class="line">        observe(<span class="keyword">data</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 对外暴露调用订阅者的接口，内部主要在指令中使用订阅者</span></div><div class="line">    $watch(expOrFn, cb)&#123;</div><div class="line">        new Watcher(<span class="keyword">this</span>, expOrFn, cb)</div><div class="line">    &#125;</div><div class="line">    _proxy(key)&#123;</div><div class="line">        Object.defineProperty(<span class="keyword">this</span>, key, &#123;</div><div class="line">            configurable: <span class="literal">true</span>,</div><div class="line">            enumerable: <span class="literal">true</span>,</div><div class="line">            <span class="keyword">get</span>: () =&gt; <span class="keyword">this</span>._data[key],</div><div class="line">            <span class="keyword">set</span>: (<span class="keyword">val</span>) =&gt; &#123;</div><div class="line">                <span class="keyword">this</span>._data[key] = <span class="keyword">val</span></div><div class="line">            &#125; </div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="调用这个极简版演示数据双向绑定原理的Vue"><a href="#调用这个极简版演示数据双向绑定原理的Vue" class="headerlink" title="调用这个极简版演示数据双向绑定原理的Vue"></a>调用这个极简版演示数据双向绑定原理的Vue</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue from <span class="string">'./Vue'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> demo = <span class="literal">new</span> Vue(&#123;</div><div class="line">    <span class="built_in">data</span>: &#123;</div><div class="line">        <span class="string">'a'</span>: &#123;</div><div class="line">            <span class="string">'ab'</span>: &#123;</div><div class="line">                <span class="string">'c'</span>: <span class="string">'C'</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'b'</span>: &#123;</div><div class="line">            <span class="string">'bb'</span>: <span class="string">'BB'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">'c'</span>: <span class="string">'C'</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">demo.$watch(<span class="string">'c'</span>, () =&gt; console.<span class="keyword">log</span>(<span class="string">'c is changed'</span>))</div><div class="line"><span class="comment">// get value</span></div><div class="line">demo.c = <span class="string">'CCC'</span></div><div class="line"><span class="comment">// new value seted</span></div><div class="line"><span class="comment">// get value</span></div><div class="line"><span class="comment">// c is changed</span></div><div class="line">demo.c = <span class="string">'DDD'</span></div><div class="line"><span class="comment">// new value seted</span></div><div class="line"><span class="comment">// get value</span></div><div class="line"><span class="comment">// c is changed</span></div><div class="line">demo.a</div><div class="line"><span class="comment">// get value</span></div><div class="line">demo.a.ab = &#123;</div><div class="line">    <span class="string">'d'</span>: <span class="string">'D'</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// get value</span></div><div class="line"><span class="comment">// get value</span></div><div class="line"><span class="comment">// new value seted</span></div><div class="line">console.<span class="keyword">log</span>(demo.a.ab)</div><div class="line"><span class="comment">// get value</span></div><div class="line"><span class="comment">// get value</span></div><div class="line"><span class="comment">// &#123;get d: (), set d: ()&#125;</span></div><div class="line">demo.a.ab.d = <span class="string">'DD'</span></div><div class="line"><span class="comment">// get value</span></div><div class="line"><span class="comment">// get value</span></div><div class="line"><span class="comment">// new value seted</span></div><div class="line">console.<span class="keyword">log</span>(demo.a.ab);</div><div class="line"><span class="comment">// get value</span></div><div class="line"><span class="comment">// get value</span></div><div class="line"><span class="comment">// &#123;get d: (), set d: ()&#125;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Symbol]]></title>
      <url>http://yoursite.com/Symbol/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一种新的原始数据类型，表示独一无二的值。它是JavaScript语言的第七种数据类型。</p>
</blockquote>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>表示独一无二的值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>();</div><div class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>();</div><div class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(a == b); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>新的原始数据类型</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Symbol</span>();</div><div class="line"><span class="keyword">typeof</span> a; <span class="comment">// "symbol"</span></div></pre></td></tr></table></figure>
<ul>
<li>不能使用new关键字</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Symbol</span>(); <span class="comment">// 报错：Uncaught TypeError: Symbol is not a constructor</span></div></pre></td></tr></table></figure>
<ul>
<li>可以接受一个字符串作为参数，表示对Symbol实例的描述</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>); <span class="comment">// Symbol(a)</span></div><div class="line">a.toString() <span class="comment">// "Symbol(a)"</span></div></pre></td></tr></table></figure>
<ul>
<li>Symbol值不能与其他类型的值进行运算</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</div><div class="line"><span class="string">'hello '</span> + a; <span class="comment">// 报错：Cannot convert a Symbol value to a string</span></div><div class="line">\`hello $&#123;a&#125;\`; <span class="comment">// 报错：Cannot convert a Symbol value to a string</span></div></pre></td></tr></table></figure>
<ul>
<li>Symbol值可以显式转为字符串</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</div><div class="line"><span class="built_in">String</span>(a); <span class="comment">// "Symbol(a)"</span></div><div class="line">a.toString(); <span class="comment">// "Symbol(a)"</span></div></pre></td></tr></table></figure>
<ul>
<li>Symbol值也可以转为布尔值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</div><div class="line"><span class="built_in">Boolean</span>(a); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<ul>
<li>不能转为数值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</div><div class="line"><span class="built_in">Number</span>(a); <span class="comment">// 报错：Cannot convert a Symbol value to a number</span></div></pre></td></tr></table></figure>
<h3 id="作为对象属性名"><a href="#作为对象属性名" class="headerlink" title="作为对象属性名"></a>作为对象属性名</h3><ul>
<li>作为属性名的几种写法</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Symbol</span>();</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj[a] = <span class="string">'hello'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    [a]: <span class="string">'hello'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj, a, &#123;</div><div class="line">    value: <span class="string">'hello'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>Symbol值作为对象属性名时，不能用点运算符，因为点运算符后面总是字符串</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Symbol</span>();</div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"></div><div class="line">obj.a = <span class="string">'hello'</span>;</div><div class="line">obj[a] <span class="comment">// undefined</span></div><div class="line">obj[<span class="string">'a'</span>] <span class="comment">// "hello"</span></div></pre></td></tr></table></figure>
<ul>
<li>不能被for…in、for…of遍历，也不会被Object.keys()、Object.getOwnPropertyNames()等方法返回，可以通过Object.getOwnPropertySymbols()获取，或者通过Reflect.ownKey(属于ES7的范畴，它代理了大部分的Object功能，对它不再继续深入，有兴趣的同学可以自行查阅资料)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    [<span class="built_in">Symbol</span>(<span class="string">'a'</span>)]: <span class="string">'a'</span>,</div><div class="line">    [<span class="built_in">Symbol</span>(<span class="string">'b'</span>)]: <span class="string">'b'</span>,</div><div class="line">    <span class="attr">c</span>: <span class="string">'c'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj); <span class="comment">// []</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// 无输出</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj); <span class="comment">// [Symbol(a), Symbol(b)]</span></div><div class="line"></div><div class="line"><span class="built_in">Reflect</span>.ownKeys(obj); <span class="comment">// ["c", Symbol(a), Symbol(b)]</span></div></pre></td></tr></table></figure>
<h3 id="Symbol方法和内置Symbol值"><a href="#Symbol方法和内置Symbol值" class="headerlink" title="Symbol方法和内置Symbol值"></a>Symbol方法和内置Symbol值</h3><h4 id="for"><a href="#for" class="headerlink" title="for()"></a>for()</h4><ul>
<li>使用for方法可以获取相同Symbol值的不同变量</li>
<li>传入的字符串需要相同，可以为空</li>
<li>必须全为for定义</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Symbol</span>.<span class="keyword">for</span>();</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">Symbol</span>.<span class="keyword">for</span>();</div><div class="line"><span class="keyword">var</span> c = <span class="built_in">Symbol</span>.<span class="keyword">for</span>(<span class="string">'c'</span>);</div><div class="line"><span class="keyword">var</span> d = <span class="built_in">Symbol</span>.<span class="keyword">for</span>(<span class="string">'c'</span>);</div><div class="line"><span class="keyword">var</span> e = <span class="built_in">Symbol</span>(<span class="string">'e'</span>);</div><div class="line"><span class="keyword">var</span> f = <span class="built_in">Symbol</span>.<span class="keyword">for</span>(<span class="string">'e'</span>);</div><div class="line"></div><div class="line">a === b; <span class="comment">// true</span></div><div class="line">c === d; <span class="comment">// true</span></div><div class="line">e === f; <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h4 id="keyFor"><a href="#keyFor" class="headerlink" title="keyFor()"></a>keyFor()</h4><ul>
<li>返回一个已登记的Symbol类型值的key</li>
<li>只有通过for方法生成的Symbol才能使用该方法返回key</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Symbol</span>.<span class="keyword">for</span>(<span class="string">'a'</span>);</div><div class="line"><span class="built_in">Symbol</span>.keyFor(a); <span class="comment">// 'a'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>); <span class="comment">// 未登记</span></div><div class="line"><span class="built_in">Symbol</span>.keyFor(a); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<h4 id="hasInstance"><a href="#hasInstance" class="headerlink" title="hasInstance"></a>hasInstance</h4><ul>
<li>此方法至少暂时不可用，最新版的chrome和node中均不能正常工作</li>
<li>该方法会被instanceof运算符调用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</div><div class="line">    <span class="keyword">static</span> [<span class="built_in">Symbol</span>.hasInstance](foo)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">[] <span class="keyword">instanceof</span> Demo <span class="comment">// 理论上返回true，但是实际chrome中测试返回false</span></div></pre></td></tr></table></figure>
<h4 id="isConcatSpreadable"><a href="#isConcatSpreadable" class="headerlink" title="isConcatSpreadable"></a>isConcatSpreadable</h4><ul>
<li>对象的Symbol.isConcatSpreadable属性等于一个布尔值，表示该对象使用Array.prototype.concat()时，是否可以展开。</li>
</ul>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var a = [<span class="string">'a'</span>]; // 数组的<span class="symbol">Symbol</span>.isConcatSpreadable属性默认值为true</div><div class="line">[<span class="string">'b'</span>].concat(a, <span class="string">'c'</span>); // [<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>]</div><div class="line"></div><div class="line">var a = [<span class="string">'a'</span>];</div><div class="line">a[<span class="symbol">Symbol</span>.isConcatSpreadable] = false;</div><div class="line">[<span class="string">'b'</span>].concat(a, <span class="string">'c'</span>); // [<span class="string">'b'</span>, [<span class="string">'a'</span>], <span class="string">'c'</span>]</div><div class="line"></div><div class="line">var a = &#123;</div><div class="line">    <span class="number">0</span>: <span class="string">'a'</span>,</div><div class="line">    length: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line">[<span class="string">'c'</span>].concat(a, <span class="string">'d'</span>); // [<span class="string">'c'</span>, &#123;<span class="number">0</span>: <span class="string">'a'</span>, length: <span class="number">1</span>&#125;, <span class="string">'d'</span>]</div><div class="line">a[<span class="symbol">Symbol</span>.isConcatSpreadable] = true;</div><div class="line">[<span class="string">'c'</span>].concat(a, <span class="string">'d'</span>); // [<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'d'</span>]</div></pre></td></tr></table></figure>
<ul>
<li>这种方法是行不通的，至少我验证了最新的chrome和最新版的node，都无法正常工作</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Array</span></span>&#123;[<span class="type">Symbol</span>.isConcatSpreadable]()&#123;<span class="keyword">return</span> <span class="literal">false</span>&#125;&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="type">Demo</span>('a');</div><div class="line">['b'].concat(a); <span class="comment">// ['b', 'a']</span></div></pre></td></tr></table></figure>
<h4 id="species"><a href="#species" class="headerlink" title="species"></a>species</h4><ul>
<li>蛋疼啊。。。。</li>
<li>最新版Chrome和node中验证失败</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Array</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(props)&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.props = props</div><div class="line">    &#125;</div><div class="line">    [<span class="built_in">Symbol</span>.species]()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Demo(<span class="number">1</span>);</div><div class="line"><span class="keyword">var</span> b = a.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, i, arr</span>)</span>&#123; <span class="comment">// 都是一个不同的数组了，咋可能还是Demo的实例呢！</span></div><div class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</div><div class="line">&#125;);</div><div class="line">b <span class="keyword">instanceof</span> Demo; <span class="comment">// 他们说这个地方应该返回true，但实际上返回false</span></div><div class="line">b <span class="keyword">instanceof</span> <span class="built_in">Array</span>;</div></pre></td></tr></table></figure>
<h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><ul>
<li>指定字符串调用match方法时的行为</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Match</span></span>&#123;</div><div class="line">    constructor(props)&#123;</div><div class="line">        <span class="keyword">this</span>.props = props || <span class="symbol">'hell</span>o'</div><div class="line">    &#125;</div><div class="line">    [<span class="type">Symbol</span>.<span class="keyword">match</span>](string)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.props.<span class="keyword">match</span>(string);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="keyword">match</span> = <span class="keyword">new</span> <span class="type">Match</span>();</div><div class="line">'e'.<span class="keyword">match</span>(<span class="keyword">match</span>); <span class="comment">// ['e']</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="keyword">match</span> = <span class="keyword">new</span> <span class="type">Match</span>(<span class="symbol">'11</span>1');</div><div class="line">'e'.<span class="keyword">match</span>(<span class="keyword">match</span>); <span class="comment">// null</span></div></pre></td></tr></table></figure>
<h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><ul>
<li>指定字符串调用replace方法时的行为</li>
</ul>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class <span class="title">Replace</span>&#123;</div><div class="line">    [<span class="built_in">Symbol</span>.replace](<span class="built_in">string</span>)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">string</span>); <span class="comment">// 还可以干点别的哦。。</span></div><div class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.replace(<span class="regexp">/b/g</span>, <span class="string">'a'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">var</span> replace = <span class="keyword">new</span> Replace();</div><div class="line"><span class="string">'abaaaab'</span>.replace(replace); <span class="comment">// 'aaaaaaa'</span></div></pre></td></tr></table></figure>
<h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><ul>
<li>指定字符串调用search方法时的行为</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Search</span>&#123;</div><div class="line">    [Symbol.search](<span class="keyword">string</span>)&#123;</div><div class="line">        <span class="keyword">string</span> = <span class="string">'aaaaab'</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.search(/b/g);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> search = <span class="keyword">new</span> Search();</div><div class="line"><span class="string">'abaaaab'</span>.search(search); <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><ul>
<li>指定字符串调用split方法时的行为</li>
</ul>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="keyword">Split</span>&#123;</div><div class="line">    [Symbol.<span class="keyword">split</span>](string)&#123;</div><div class="line">        <span class="keyword">return</span> string.<span class="keyword">split</span>('b', 1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> <span class="keyword">split</span> = new <span class="keyword">Split</span>();</div><div class="line">'abaaaab'.<span class="keyword">split</span>(<span class="keyword">split</span>); <span class="comment">// ['a']</span></div></pre></td></tr></table></figure>
<h4 id="toPrimitive"><a href="#toPrimitive" class="headerlink" title="toPrimitive"></a>toPrimitive</h4><ul>
<li>当数据被进行类型转换时，调用该数据的Symbol.toPrimitive方法</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    [Symbol.toPrimitive](<span class="keyword">type</span>)&#123;</div><div class="line">        <span class="keyword">switch</span>(<span class="keyword">type</span>)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'string'</span>: <span class="comment">// 只能转换成string时</span></div><div class="line">                <span class="keyword">return</span> <span class="string">'aaa'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'number'</span>: <span class="comment">// 只能转换成number时</span></div><div class="line">                <span class="keyword">return</span> <span class="number">123</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'default'</span>: <span class="comment">// 既可以转换成string，又可以转换成number时</span></div><div class="line">                <span class="keyword">return</span> <span class="string">'default'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="number">2</span> * obj <span class="comment">// 246</span></div><div class="line"><span class="string">'a'</span> + obj <span class="comment">// 'adefault'</span></div><div class="line"><span class="built_in">String</span>(obj) <span class="comment">// 'aaa'</span></div></pre></td></tr></table></figure>
<h4 id="toStringTag"><a href="#toStringTag" class="headerlink" title="toStringTag"></a>toStringTag</h4><ul>
<li>控制在调用toString方法时返回的字符串</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</div><div class="line">    <span class="keyword">get</span> [<span class="built_in">Symbol</span>.toStringTag]()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'Demo'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Demo();</div><div class="line">a.toString(); <span class="comment">// "[object Demo]"</span></div></pre></td></tr></table></figure>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="消除魔术字符串"><a href="#消除魔术字符串" class="headerlink" title="消除魔术字符串"></a>消除魔术字符串</h4><blockquote>
<p>在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串，该由含义清晰的变量代替。</p>
</blockquote>
<ul>
<li>魔术字符串的栗子</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">switch</span>(str)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'abc'</span>: <span class="comment">// 魔术字符串</span></div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'hello Symbol'</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">demo(<span class="string">'abc'</span>); <span class="comment">// 魔术字符串</span></div></pre></td></tr></table></figure>
<ul>
<li>消除魔术字符串的方法，把它变成一个变量。大家都懂的，就没栗子了</li>
<li>但是，上面栗子上’abc’字符串真的有实际意义吗？是否可以这样？当然也是需要赋值给一个变量</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>); <span class="comment">// 传字符串'a'只是为了方便查看下面的打印结果，其实可以不传</span></div><div class="line"><span class="keyword">var</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</div><div class="line">function demo(v)&#123;</div><div class="line">    <span class="keyword">switch</span>(v)&#123;</div><div class="line">        <span class="keyword">case</span> a: </div><div class="line">            console.log(\`hello <span class="built_in">Symbol</span>, I am $&#123;<span class="built_in">String</span>(a)&#125;\`); <span class="comment">// ES6的模板功能，下次再带大家认识。</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> b: </div><div class="line">            console.log(\`hello <span class="built_in">Symbol</span>, I am $&#123;<span class="built_in">String</span>(b)&#125;\`);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">demo(a);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[String]]></title>
      <url>http://yoursite.com/String/</url>
      <content type="html"><![CDATA[<blockquote>
<p>可以重点关注模板字符串</p>
</blockquote>
<h3 id="支持超过-u0000——-uFFFF的Unicode表示法"><a href="#支持超过-u0000——-uFFFF的Unicode表示法" class="headerlink" title="支持超过\u0000——\uFFFF的Unicode表示法"></a>支持超过\u0000——\uFFFF的Unicode表示法</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(<span class="string">'\u&#123;20BB7&#125;'</span>); <span class="regexp">//</span> ES6 <span class="string">"𠮷"</span></div><div class="line">alert(<span class="string">'\u20BB7'</span>); <span class="regexp">//</span> <span class="string">" 7"</span></div></pre></td></tr></table></figure>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">'\z'</span> === <span class="string">'z'</span>  <span class="comment">// true</span></div><div class="line"><span class="string">'\172'</span> === <span class="string">'z'</span> <span class="comment">// true</span></div><div class="line"><span class="string">'\x7A'</span> === <span class="string">'z'</span> <span class="comment">// true</span></div><div class="line"><span class="string">'\u007A'</span> === <span class="string">'z'</span> <span class="comment">// true</span></div><div class="line"><span class="string">'\u&#123;7A&#125;'</span> === <span class="string">'z'</span> <span class="comment">// true</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="codePointAt"><a href="#codePointAt" class="headerlink" title="codePointAt()"></a>codePointAt()</h3><h3 id="fromCodePoint"><a href="#fromCodePoint" class="headerlink" title="fromCodePoint()"></a>fromCodePoint()</h3><h3 id="for…of-遍历字符串"><a href="#for…of-遍历字符串" class="headerlink" title="for…of(遍历字符串)"></a>for…of(遍历字符串)</h3><ul>
<li>字符串拥有Symbol.iterator属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> codePoint <span class="keyword">of</span> <span class="string">'foo'</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(codePoint)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="at"><a href="#at" class="headerlink" title="at()"></a>at()</h3><ul>
<li>‘𠮷’这个字不是’吉’</li>
</ul>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'abc'</span>.at<span class="comment">(0)</span> <span class="comment">// 'a'</span></div><div class="line"><span class="string">'𠮷'</span>.at<span class="comment">(0)</span> <span class="comment">// '陈'</span></div></pre></td></tr></table></figure>
<h3 id="normalize"><a href="#normalize" class="headerlink" title="normalize()"></a>normalize()</h3><h3 id="startsWith-str-index"><a href="#startsWith-str-index" class="headerlink" title="startsWith(str [,index])"></a>startsWith(str [,index])</h3><ul>
<li>s.startsWith(‘xxx’, 6);</li>
</ul>
<h3 id="endsWith-str-index"><a href="#endsWith-str-index" class="headerlink" title="endsWith(str [,index])"></a>endsWith(str [,index])</h3><h3 id="includes-str-index"><a href="#includes-str-index" class="headerlink" title="includes(str [,index])"></a>includes(str [,index])</h3><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><ul>
<li>‘hello’.repeat(3) // hellohellohello</li>
</ul>
<h3 id="padStart"><a href="#padStart" class="headerlink" title="padStart()"></a>padStart()</h3><ul>
<li>ES7</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'x'</span>.padStart(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="regexp">//</span> <span class="string">'ababx'</span></div><div class="line"><span class="string">'x'</span>.padStart(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="regexp">//</span> <span class="string">'abax'</span></div></pre></td></tr></table></figure>
<h3 id="padEnd"><a href="#padEnd" class="headerlink" title="padEnd()"></a>padEnd()</h3><ul>
<li>ES7</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'x'</span>.padEnd(<span class="number">5</span>, <span class="string">'ab'</span>) <span class="regexp">//</span> <span class="string">'xabab'</span></div><div class="line"><span class="string">'x'</span>.padEnd(<span class="number">4</span>, <span class="string">'ab'</span>) <span class="regexp">//</span> <span class="string">'xaba'</span></div></pre></td></tr></table></figure>
<h3 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h3><ul>
<li>‘`’ 反引号</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demo = &#123;</div><div class="line">  <span class="attr">a</span>: <span class="string">'aaa'</span>,</div><div class="line">  <span class="attr">b</span>: <span class="string">'bbb'</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`</span></div><div class="line">  There are <span class="subst">$&#123;demo.a&#125;</span> items</div><div class="line">   in your basket, <span class="subst">$&#123;demo.b&#125;</span></div><div class="line">  are on sale!</div><div class="line">`);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = [</div><div class="line">    &#123; <span class="attr">first</span>: <span class="string">'&lt;Jane&gt;'</span>, <span class="attr">last</span>: <span class="string">'Bond'</span> &#125;,</div><div class="line">    &#123; <span class="attr">first</span>: <span class="string">'Lars'</span>, <span class="attr">last</span>: <span class="string">'&lt;Croft&gt;'</span> &#125;,</div><div class="line">];</div><div class="line"><span class="keyword">const</span> tmpl = <span class="function"><span class="params">addrs</span> =&gt;</span> <span class="string">`</span></div><div class="line">  &lt;table&gt;</div><div class="line">  <span class="subst">$&#123;addrs.map(addr =&gt; <span class="string">`</span></span></div><div class="line">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</div><div class="line">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</div><div class="line">  `).join(<span class="string">''</span>)&#125;</div><div class="line">  &lt;/table&gt;</div><div class="line">`;</div><div class="line"><span class="built_in">console</span>.log(tmpl(data));</div></pre></td></tr></table></figure>
<h3 id="raw"><a href="#raw" class="headerlink" title="raw()"></a>raw()</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Set]]></title>
      <url>http://yoursite.com/Set/</url>
      <content type="html"><![CDATA[<blockquote>
<p>它类似于数组，但是成员的值都是唯一的，没有重复的值。  </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> s.add(x));</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> s) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 2 3 5 4</span></div></pre></td></tr></table></figure>
<blockquote>
<p>向Set加入值的时候，不会发生类型转换，所以5和”5”是两个不同的值。<br>对于引用了同一个对象的不同变量，会被认为是相同的值。</p>
</blockquote>
<a id="more"></a>
<h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><ul>
<li>返回Set实例的成员总数。</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var a = new Set([<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>]);</div><div class="line">console.log(a.size); <span class="comment">// 4</span></div></pre></td></tr></table></figure>
<h3 id="add-value"><a href="#add-value" class="headerlink" title="add(value)"></a>add(value)</h3><ul>
<li>添加某个值，返回Set结构本身。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line"><span class="built_in">console</span>.log(a.add(<span class="string">'a'</span>)); <span class="comment">// Set &#123;'a'&#125;</span></div></pre></td></tr></table></figure>
<h3 id="delete-value"><a href="#delete-value" class="headerlink" title="delete(value)"></a>delete(value)</h3><ul>
<li>删除某个值，返回一个布尔值，表示删除是否成功。</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = <span class="keyword">new</span> Set([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>]);</div><div class="line"><span class="built_in">console</span>.log(a.<span class="keyword">delete</span>(<span class="string">'a'</span>)); <span class="regexp">//</span> <span class="literal">true</span></div><div class="line"><span class="built_in">console</span>.log(a); <span class="regexp">//</span> Set &#123;<span class="string">'b'</span>, <span class="string">'c'</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="has-value"><a href="#has-value" class="headerlink" title="has(value)"></a>has(value)</h3><ul>
<li>返回一个布尔值，表示该值是否为Set的成员。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>]);</div><div class="line"><span class="built_in">console</span>.log(a.has(<span class="string">'a'</span>)); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(a.has(<span class="string">'c'</span>)); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><ul>
<li>清除所有成员，没有返回值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</div><div class="line"><span class="built_in">console</span>.log(a.clear()); <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// Set &#123;&#125;</span></div></pre></td></tr></table></figure>
<h3 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h3><ul>
<li>返回一个键名的遍历器</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>]);</div><div class="line"><span class="built_in">console</span>.log(a.keys()); <span class="comment">// SetIterator &#123;'a'， 'b'&#125;</span></div></pre></td></tr></table></figure>
<h3 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h3><ul>
<li>返回一个键值的遍历器</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>]);</div><div class="line"><span class="built_in">console</span>.log(a.values()); <span class="comment">// SetIterator &#123;'a', 'b'&#125;</span></div></pre></td></tr></table></figure>
<h3 id="entries"><a href="#entries" class="headerlink" title="entries()"></a>entries()</h3><ul>
<li>返回一个键值对的遍历器</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>]);</div><div class="line"><span class="built_in">console</span>.log(a.entries()); <span class="comment">// SetIterator &#123;['a', 'a'], ['b', 'b']&#125;</span></div></pre></td></tr></table></figure>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><ul>
<li>使用回调函数遍历每个成员</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = new <span class="keyword">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>]);</div><div class="line">a.forEach(function(value, key, <span class="keyword">set</span>)&#123;</div><div class="line">    console.log(<span class="keyword">value</span>, <span class="keyword">key</span>, <span class="keyword">set</span>); // a a <span class="keyword">Set</span> &#123;<span class="string">'a'</span>, <span class="string">'b'</span>&#125;; b b <span class="keyword">Set</span> &#123;<span class="string">'a'</span>, <span class="string">'b'</span>&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><ul>
<li>so easy~~，妈妈再也不用担心数组去重</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var origin = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>];</div><div class="line">var unique = [...new Set(origin)] <span class="comment">// [1, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Promise]]></title>
      <url>http://yoursite.com/Promise/</url>
      <content type="html"><![CDATA[<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="创建Promise实例"><a href="#创建Promise实例" class="headerlink" title="创建Promise实例"></a>创建Promise实例</h4><ul>
<li>demo</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">    <span class="comment">// ... some code</span></div><div class="line">    <span class="keyword">if</span>(<span class="comment">/* 异步操作成功 */</span>)&#123;</div><div class="line">        resolve(value);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        reject(error);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="实例方法：then"><a href="#实例方法：then" class="headerlink" title="实例方法：then()"></a>实例方法：then()</h4><ul>
<li>第一个参数是成功回调，状态为resolved时被调用</li>
<li>第二个参数是失败回调，状态为rejceted时被调用</li>
<li>尽量不要使用第二个参数处理失败回调，而是使用catch()</li>
</ul>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">promise.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</div><div class="line">    console.<span class="built_in">log</span>(<span class="keyword">data</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">data</span>;</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span><span class="params">(error)</span></span>&#123;</div><div class="line">    console.<span class="built_in">log</span>(error);</div><div class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</div><div class="line">    console.<span class="built_in">log</span>(<span class="keyword">data</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="实例方法：catch"><a href="#实例方法：catch" class="headerlink" title="实例方法：catch()"></a>实例方法：catch()</h4><ul>
<li>.then(function(null, errorCallback){})的别名，只处理异常情况</li>
<li>执行then方法时的报错，也会被catch捕获</li>
</ul>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">promise.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(data)</span>&#123;</span></div><div class="line">    aaaaa</div><div class="line">    console.<span class="built_in">log</span>(data);</div><div class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(error)</span>&#123;</span></div><div class="line">    console.<span class="built_in">log</span>(<span class="built_in">error</span>); <span class="comment">// aaaaa is not defined</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="静态方法：all"><a href="#静态方法：all" class="headerlink" title="静态方法：all()"></a>静态方法：all()</h4><ul>
<li>参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ajaxs = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].map(<span class="function"><span class="keyword">function</span><span class="params">(item)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> $http.get(<span class="string">'/get/'</span> + id);</div><div class="line">&#125;)</div><div class="line">Promise.all(ajaxs).then(<span class="function"><span class="keyword">function</span><span class="params">(datas)</span></span>&#123; <span class="comment">// 数组</span></div><div class="line">    </div><div class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(error)</span></span>&#123; <span class="comment">// 第一个失败的异步方法返回值</span></div><div class="line">    </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="静态方法：trace"><a href="#静态方法：trace" class="headerlink" title="静态方法：trace()"></a>静态方法：trace()</h4><ul>
<li>用法同all()</li>
<li>不同的是，不是多个Promise方法全部返回之后触发成功或失败，而是返回结果比较快的那个Promise方法决定成功或失败</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demo = <span class="built_in">Promise</span>.race([</div><div class="line">    fetch(<span class="string">'xxx.json'</span>),</div><div class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'request timeout'</span>)), <span class="number">5000</span>)</div><div class="line">    &#125;)</div><div class="line">]);</div><div class="line">demo.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// fetch如果在5000ms以内返回时执行</span></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(error); <span class="comment">// fetch如果在5000ms以内未返回时执行</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="静态方法：resolve"><a href="#静态方法：resolve" class="headerlink" title="静态方法：resolve()"></a>静态方法：resolve()</h4><ul>
<li>将现有对象转换为Promise对象</li>
</ul>
<h4 id="静态方法：reject"><a href="#静态方法：reject" class="headerlink" title="静态方法：reject()"></a>静态方法：reject()</h4><ul>
<li>将现有对象转换为Promise对象</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="一个通过Promise实现的ajax请求"><a href="#一个通过Promise实现的ajax请求" class="headerlink" title="一个通过Promise实现的ajax请求"></a>一个通过Promise实现的ajax请求</h4><ul>
<li>仅做Promise用法说明，未进行验证兼容性验证</li>
</ul>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> $http = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">const</span> core = &#123;</div><div class="line">        ajax(method, <span class="built_in">url</span>, args)&#123;</div><div class="line">            <span class="keyword">const</span> promise = <span class="keyword">new</span> Promise(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">                <span class="keyword">const</span> client = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">                <span class="keyword">let</span> uri = <span class="built_in">url</span>;</div><div class="line">                <span class="keyword">let</span> params = <span class="string">''</span>;</div><div class="line">                <span class="keyword">let</span> argCount = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> args)&#123;</div><div class="line">                    <span class="keyword">if</span>(args.hasOwnProperty(key))&#123;</div><div class="line">                        <span class="keyword">if</span>(argCount++)&#123;</div><div class="line">                            params += <span class="string">'&amp;'</span>;</div><div class="line">                        &#125;</div><div class="line">                        params += <span class="built_in">encodeURIComponent</span>(key) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(args[key]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(method === <span class="string">'GET'</span>)&#123;</div><div class="line">                    uri += <span class="string">'?'</span> + params;</div><div class="line">                &#125;</div><div class="line">                client.open(method, uri, <span class="literal">true</span>);</div><div class="line">                client.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">                client.send(method === <span class="string">'GET'</span> ? <span class="attribute">null</span> : params);</div><div class="line">                client.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.status &gt;= <span class="number">200</span> &amp;&amp; <span class="keyword">this</span>.status &lt; <span class="number">300</span>)&#123;</div><div class="line">                        resolve(<span class="keyword">this</span>.response);</div><div class="line">                    &#125;<span class="title">else</span>&#123;</div><div class="line">                        reject(<span class="keyword">this</span>.statusText);</div><div class="line">                    &#125;</div><div class="line">                &#125;;</div><div class="line">                client.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    reject(<span class="keyword">this</span>.statusText);</div><div class="line">                &#125;;</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">return</span> promise;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        get(<span class="built_in">url</span>, args)&#123;</div><div class="line">            <span class="keyword">return</span> core.ajax(<span class="string">'GET'</span>, <span class="built_in">url</span>, args);</div><div class="line">        &#125;,</div><div class="line">        post(<span class="built_in">url</span>, args)&#123;</div><div class="line">            <span class="keyword">return</span> core.ajax(<span class="string">'POST'</span>, <span class="built_in">url</span>, args);</div><div class="line">        &#125;,</div><div class="line">        ajax(method, <span class="built_in">url</span>, args)&#123;</div><div class="line">            <span class="keyword">return</span> core.ajax(method, <span class="built_in">url</span>, args);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 使用</span></div><div class="line">$http.post(<span class="string">'js/content.js'</span>, &#123;</div><div class="line">    <span class="string">'a'</span>: <span class="number">1</span>,</div><div class="line">    <span class="string">'b'</span>: <span class="number">2</span></div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="与Generator结合"><a href="#与Generator结合" class="headerlink" title="与Generator结合"></a>与Generator结合</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Object]]></title>
      <url>http://yoursite.com/Object/</url>
      <content type="html"><![CDATA[<h3 id="属性的简单表示法"><a href="#属性的简单表示法" class="headerlink" title="属性的简单表示法"></a>属性的简单表示法</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="string">'foo'</span>;</div><div class="line"><span class="keyword">var</span> bar = &#123;foo&#125;; <span class="comment">// bar = &#123;foo: 'foo'&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(x, y)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;x, y&#125;;</div><div class="line">&#125;</div><div class="line">f(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// &#123;x: 1, y: 2&#125;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="方法的简写"><a href="#方法的简写" class="headerlink" title="方法的简写"></a>方法的简写</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">    method()&#123; <span class="comment">// 省略'function'关键字</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'hello'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> foo = <span class="string">'bar'</span>;</div><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">    [foo]: <span class="literal">true</span>,</div><div class="line">    [<span class="string">'a'</span> + <span class="string">'b'</span>]: <span class="number">1</span>,</div><div class="line">    <span class="string">\['h'</span> + <span class="string">'ello'</span><span class="string">\]()&#123;</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'hi'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="is"><a href="#is" class="headerlink" title="is()"></a>is()</h3><ul>
<li>没啥大作用</li>
</ul>
<h2 id="assign-target-…source"><a href="#assign-target-…source" class="headerlink" title="assign(target, …source)"></a>assign(target, …source)</h2><ul>
<li>将源对象（source）的所有可枚举属性，复制到目标对象（target）。</li>
<li>如果该参数不是对象，则会先转成对象，然后返回。</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typeof Object.<span class="built_in">assign</span>(<span class="number">2</span>) // <span class="string">"object"</span> <span class="built_in">Number</span>对象</div></pre></td></tr></table></figure>
<ul>
<li>由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。</li>
<li>其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。</li>
</ul>
<figure class="highlight cal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> v1 = <span class="string">'abc'</span>;</div><div class="line"><span class="keyword">var</span> v2 = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> v3 = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = Object.assign(&#123;&#125;, v1, v2, v3);</div><div class="line">console.log(obj); // &#123; <span class="string">"0"</span>: <span class="string">"a"</span>, <span class="string">"1"</span>: <span class="string">"b"</span>, <span class="string">"2"</span>: <span class="string">"c"</span> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>浅拷贝</li>
</ul>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = <span class="comment">&#123;a: &#123;b: 1&#125;</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">Object</span>.assign(<span class="comment">&#123;&#125;</span>, obj1);</div><div class="line"></div><div class="line">obj1.a.b = <span class="number">2</span>;</div><div class="line">obj2.a.b <span class="comment">// 2</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Map]]></title>
      <url>http://yoursite.com/Map/</url>
      <content type="html"><![CDATA[<blockquote>
<p>键值对的集合</p>
</blockquote>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"><span class="keyword">var</span> o = &#123;p: <span class="string">"Hello World"</span>&#125;;</div><div class="line"></div><div class="line">m.<span class="keyword">set</span>(o, <span class="string">"content"</span>)</div><div class="line">m.<span class="keyword">get</span>(o) <span class="comment">// "content"</span></div><div class="line"></div><div class="line">m.has(o) <span class="comment">// true</span></div><div class="line">m.delete(o) <span class="comment">// true</span></div><div class="line">m.has(o) <span class="comment">// false</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>作为构造函数，Map也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var <span class="built_in">map</span> = <span class="keyword">new</span> Map([[<span class="string">"name"</span>, <span class="string">"张三"</span>], [<span class="string">"title"</span>, <span class="string">"Author"</span>]]);</div><div class="line"></div><div class="line"><span class="built_in">map</span>.<span class="built_in">size</span> <span class="comment">// 2</span></div><div class="line"><span class="built_in">map</span>.has(<span class="string">"name"</span>) <span class="comment">// true</span></div><div class="line"><span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"name"</span>) <span class="comment">// "张三"</span></div><div class="line"><span class="built_in">map</span>.has(<span class="string">"title"</span>) <span class="comment">// true</span></div><div class="line"><span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"title"</span>) <span class="comment">// "Author"</span></div></pre></td></tr></table></figure>
<ul>
<li>只有对同一个对象的引用，Map结构才将其视为同一个键。这一点要非常小心。</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var <span class="built_in">map</span> = <span class="keyword">new</span> Map();</div><div class="line">var arr1 = [<span class="string">'a'</span>];</div><div class="line">var arr2 = arr1;</div><div class="line"></div><div class="line"><span class="built_in">map</span>.<span class="built_in">set</span>(arr1, <span class="number">111</span>);</div><div class="line"><span class="built_in">map</span>.<span class="built_in">get</span>(arr1); <span class="comment">// 111</span></div><div class="line"><span class="built_in">map</span>.<span class="built_in">set</span>(arr2, <span class="number">222</span>);</div><div class="line"><span class="built_in">map</span>.<span class="built_in">get</span>(arr1); <span class="comment">// 222</span></div><div class="line"><span class="built_in">map</span>.<span class="built_in">get</span>(arr2); <span class="comment">// 222</span></div><div class="line"><span class="built_in">map</span>.<span class="built_in">set</span>([<span class="string">'a'</span>], <span class="number">555</span>);</div><div class="line"><span class="built_in">map</span>.<span class="built_in">get</span>([<span class="string">'a'</span>]) <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<ul>
<li>Map的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。</li>
</ul>
<h3 id="属性及方法"><a href="#属性及方法" class="headerlink" title="属性及方法"></a>属性及方法</h3><h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><ul>
<li>返回Map结构的成员总数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'a'</span>, <span class="string">'A'</span>], [<span class="string">'b'</span>, <span class="string">'B'</span>]]);</div><div class="line"><span class="built_in">console</span>.log(a.size); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h4 id="set-key-val"><a href="#set-key-val" class="headerlink" title="set(key, val)"></a>set(key, val)</h4><ul>
<li>方法返回的是Map本身，因此可以采用链式写法。</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="built_in">map</span> = <span class="literal">new</span> <span class="built_in">Map</span>()</div><div class="line">  .<span class="built_in">set</span>(<span class="number">1</span>, <span class="string">'a'</span>)</div><div class="line">  .<span class="built_in">set</span>(<span class="number">2</span>, <span class="string">'b'</span>)</div><div class="line">  .<span class="built_in">set</span>(<span class="number">3</span>, <span class="string">'c'</span>);</div></pre></td></tr></table></figure>
<h4 id="get-key"><a href="#get-key" class="headerlink" title="get(key)"></a>get(key)</h4><ul>
<li>读取key对应的键值，如果找不到key，返回undefined。</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="literal">new</span> <span class="built_in">Map</span>().<span class="built_in">set</span>(<span class="string">'a'</span>, <span class="string">'A'</span>);</div><div class="line">console.<span class="keyword">log</span>(a.get(<span class="string">'a'</span>)); <span class="comment">// 'A'</span></div><div class="line">console.<span class="keyword">log</span>(a.get(<span class="string">'b'</span>)); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<h4 id="has-key"><a href="#has-key" class="headerlink" title="has(key)"></a>has(key)</h4><ul>
<li>返回一个布尔值，表示某个键是否在Map数据结构中。</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="literal">new</span> <span class="built_in">Map</span>().<span class="built_in">set</span>(<span class="string">'a'</span>, <span class="string">'A'</span>);</div><div class="line">console.<span class="keyword">log</span>(a.has(<span class="string">'a'</span>)); <span class="comment">// true</span></div><div class="line">console.<span class="keyword">log</span>(a.has(<span class="string">'b'</span>)); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h4 id="delete-key"><a href="#delete-key" class="headerlink" title="delete(key)"></a>delete(key)</h4><ul>
<li>方法删除某个键，返回true。如果删除失败，返回false。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let a = <span class="keyword">new</span> Map().<span class="built_in">set</span>(<span class="string">'a'</span>, <span class="string">'A'</span>);</div><div class="line">console.<span class="built_in">log</span>(a.<span class="keyword">delete</span>(<span class="string">'a'</span>)); <span class="comment">// true</span></div><div class="line">console.<span class="built_in">log</span>(a.<span class="keyword">delete</span>(<span class="string">'b'</span>)); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><ul>
<li>清除所有成员，没有返回值。</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="literal">new</span> <span class="built_in">Map</span>().<span class="built_in">set</span>(<span class="string">'a'</span>, <span class="string">'A'</span>);</div><div class="line">console.<span class="keyword">log</span>(a.clear()); <span class="comment">// undefined</span></div><div class="line">console.<span class="keyword">log</span>(a); <span class="comment">// Map &#123;&#125;</span></div></pre></td></tr></table></figure>
<h4 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h4><ul>
<li>返回键名的遍历器。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">'a'</span>, <span class="string">'A'</span>).set(<span class="string">'b'</span>, <span class="string">'B'</span>);</div><div class="line"><span class="built_in">console</span>.log(a.keys()); <span class="comment">// MapIterator &#123;'a', 'b'&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> a.keys())&#123;</div><div class="line">  <span class="built_in">console</span>.log(k); <span class="comment">// 'a'、 'b'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h4><ul>
<li>返回键值的遍历器。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">'a'</span>, <span class="string">'A'</span>).set(<span class="string">'b'</span>, <span class="string">'B'</span>);</div><div class="line"><span class="built_in">console</span>.log(a.values()); <span class="comment">// MapIterator &#123;'A', 'B'&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> a.values())&#123;</div><div class="line">  <span class="built_in">console</span>.log(k); <span class="comment">// 'A'、 'B'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="entries"><a href="#entries" class="headerlink" title="entries()"></a>entries()</h4><ul>
<li>返回所有成员的遍历器。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">'a'</span>, <span class="string">'A'</span>).set(<span class="string">'b'</span>, <span class="string">'B'</span>);</div><div class="line"><span class="built_in">console</span>.log(a.entries()); <span class="comment">// MapIterator &#123;['a', 'A'], ['b', 'B']&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">of</span> a.entries())&#123;</div><div class="line">  <span class="built_in">console</span>.log(k); <span class="comment">// ['a', 'A']、 ['b', 'B']</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><ul>
<li>遍历Map的所有成员。</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = new Map().set(<span class="string">'a'</span>, <span class="string">'A'</span>).set(<span class="string">'b'</span>, <span class="string">'B'</span>);</div><div class="line">a.forEach(<span class="keyword">function</span>(<span class="keyword">value</span>, key, <span class="keyword">map</span>)&#123;</div><div class="line">  console.log(value, key, map); // <span class="string">'A'</span>, <span class="string">'a'</span>, Map &#123;<span class="string">'a'</span> =&gt; <span class="string">'A'</span>, <span class="string">'b'</span> =&gt; <span class="string">'B'</span>&#125;  <span class="string">'B'</span>, <span class="string">'b'</span>, Map &#123;<span class="string">'a'</span> =&gt; <span class="string">'A'</span>, <span class="string">'b'</span> =&gt; <span class="string">'B'</span>&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="Map结构转为数组结构"><a href="#Map结构转为数组结构" class="headerlink" title="Map结构转为数组结构"></a>Map结构转为数组结构</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let map = new <span class="symbol">Map</span>([</div><div class="line">  [<span class="number">1</span>, <span class="string">'one'</span>],</div><div class="line">  [<span class="number">2</span>, <span class="string">'two'</span>],</div><div class="line">  [<span class="number">3</span>, <span class="string">'three'</span>],</div><div class="line">]);</div><div class="line"></div><div class="line">[...map.keys()] // [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">[...map.values()] // [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</div><div class="line">[...map.entries()] // [[<span class="number">1</span>,<span class="string">'one'</span>], [<span class="number">2</span>, <span class="string">'two'</span>], [<span class="number">3</span>, <span class="string">'three'</span>]]</div><div class="line">[...map] // [[<span class="number">1</span>,<span class="string">'one'</span>], [<span class="number">2</span>, <span class="string">'two'</span>], [<span class="number">3</span>, <span class="string">'three'</span>]]</div></pre></td></tr></table></figure>
<h4 id="结合数组的map方法、filter方法，可以实现Map的遍历和过滤（Map本身没有map和filter方法）。"><a href="#结合数组的map方法、filter方法，可以实现Map的遍历和过滤（Map本身没有map和filter方法）。" class="headerlink" title="结合数组的map方法、filter方法，可以实现Map的遍历和过滤（Map本身没有map和filter方法）。"></a>结合数组的map方法、filter方法，可以实现Map的遍历和过滤（Map本身没有map和filter方法）。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map0 = <span class="keyword">new</span> <span class="built_in">Map</span>()</div><div class="line">  .set(<span class="number">1</span>, <span class="string">'a'</span>)</div><div class="line">  .set(<span class="number">2</span>, <span class="string">'b'</span>)</div><div class="line">  .set(<span class="number">3</span>, <span class="string">'c'</span>);</div><div class="line"></div><div class="line"><span class="keyword">let</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>(</div><div class="line">  [...map0].filter(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> k &lt; <span class="number">3</span>)</div><div class="line">); <span class="comment">// 产生Map结构 &#123;1 =&gt; 'a', 2 =&gt; 'b'&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>(</div><div class="line">  [...map0].map(<span class="function">(<span class="params">[k, v]</span>) =&gt;</span> [k * <span class="number">2</span>, <span class="string">'^'</span> + v])</div><div class="line">); <span class="comment">// 产生Map结构 &#123;2 =&gt; '^a', 4 =&gt; '^b', 6 =&gt; '^c'&#125;</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Let & Const]]></title>
      <url>http://yoursite.com/let-const/</url>
      <content type="html"><![CDATA[<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul>
<li>它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(let <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; arr.<span class="built_in">length</span>; <span class="built_in">i</span>++)&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>用let命令声明，不会发生变量提升。</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.<span class="built_in">log</span>(foo); <span class="comment">// error</span></div><div class="line"><span class="keyword">let</span> foo = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>暂时性死区。</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></div><div class="line">  <span class="keyword">let</span> tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>不允许重复声明。在相同作用域内重复用let声明同一个变量会报错。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>块级作用域</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(tmp); <span class="comment">// error</span></div><div class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</div><div class="line">    <span class="keyword">var</span> tmp = <span class="string">"hello world"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul>
<li>声明一个只读的常量。一旦声明，常量的值就不能改变。</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const <span class="literal">PI</span> = <span class="number">3.1415</span>;</div><div class="line"><span class="literal">PI</span> = <span class="number">3</span>; <span class="comment">// 常规模式时，重新赋值无效，但不报错</span></div><div class="line"><span class="literal">PI</span> <span class="comment">// 3.1415</span></div></pre></td></tr></table></figure>
<ul>
<li>const一旦声明变量，就必须立即初始化，不能留到以后赋值。</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> foo; <span class="comment">// error</span></div></pre></td></tr></table></figure>
<ul>
<li>其它特性同let</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Iterator]]></title>
      <url>http://yoursite.com/Iterator/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Iterator并不是一组新的API，而是代表一种新的遍历数据的方式。<br>ES6规定，默认的Iterator接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”（iterable）<br>在ES6中，有三类数据结构原生具备Iterator接口：<code>数组</code>、<code>部分类数组对象，如String</code>, <code>Set</code>和<code>Map</code>结构。</p>
</blockquote>
<a id="more"></a>
<h3 id="调用Iterator接口的场景"><a href="#调用Iterator接口的场景" class="headerlink" title="调用Iterator接口的场景"></a>调用Iterator接口的场景</h3><ul>
<li>解构赋值，对数组和Set结构进行解构赋值时</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">set</span> = <span class="keyword">new</span> Set().<span class="keyword">add</span>(<span class="string">'a'</span>).<span class="keyword">add</span>(<span class="string">'b'</span>).<span class="keyword">add</span>(<span class="string">'c'</span>);</div><div class="line"><span class="keyword">let</span> [x, y] = <span class="keyword">set</span>; <span class="comment">// 解构赋值，调用Iterator</span></div></pre></td></tr></table></figure>
<ul>
<li>扩展运算符</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var <span class="keyword">str</span> = <span class="string">'hello'</span>;</div><div class="line">[...<span class="keyword">str</span>];</div></pre></td></tr></table></figure>
<ul>
<li>yield*</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> g = gen();</div><div class="line">g.next();</div></pre></td></tr></table></figure>
<ul>
<li>for…of</li>
<li>Array.from()</li>
<li>Object.keys()等</li>
<li>Map(), Set()</li>
<li>Promise.all()</li>
<li>Promise.race()</li>
</ul>
<h3 id="各种遍历数组的方法比较"><a href="#各种遍历数组的方法比较" class="headerlink" title="各种遍历数组的方法比较"></a>各种遍历数组的方法比较</h3><ul>
<li>for循环<ul>
<li>写法复杂</li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, <span class="built_in">len</span>=arr.length; i &lt; <span class="built_in">len</span>; i++)&#123;</div><div class="line">    console.log(arr[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>forEach<ul>
<li>无法通过break,return等方法终止遍历</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, i, arr</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(item)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>for…in<ul>
<li>遍历对象用，不适用于遍历对象</li>
<li>数组的键名是数字，但是for…in循环是以字符串作为键名“0”、“1”、“2”等等。</li>
<li>for…in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。</li>
<li>某些情况下，for…in循环会以任意顺序遍历键名。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> arr)&#123; <span class="comment">// 拿到的是index，不是内容元素</span></div><div class="line">    <span class="built_in">console</span>.log(arr[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>for…of<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> arr)&#123;</div><div class="line">    <span class="keyword">if</span>(item &gt; <span class="string">'a'</span>)&#123;</div><div class="line">        <span class="built_in">console</span>.log(item);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Generator]]></title>
      <url>http://yoursite.com/Generator/</url>
      <content type="html"><![CDATA[<blockquote>
<p>关键词：状态机，遍历器，同步方式写异步方法</p>
</blockquote>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li>形式上，Generator函数是一个普通函数，但是有两个特征。<ul>
<li>function关键字与函数名之间有一个星号。</li>
<li>二是，函数体内部使用yield语句，定义不同的内部状态。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'hello'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'world'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="string">'ending'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> hw = helloWorldGenerator();</div><div class="line"><span class="keyword">var</span> h = helloWorldGenerator();</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>调用Generator函数，返回一个遍历器对象，代表Generator函数的内部指针。</li>
</ul>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> 接上面的demo</div><div class="line"></div><div class="line">hw.<span class="keyword">next</span>()</div><div class="line"><span class="regexp">//</span> &#123; value: <span class="string">'hello'</span>, done: false &#125;</div><div class="line"></div><div class="line">hw.<span class="keyword">next</span>()</div><div class="line"><span class="regexp">//</span> &#123; value: <span class="string">'world'</span>, done: false &#125;</div><div class="line"></div><div class="line">hw.<span class="keyword">next</span>()</div><div class="line"><span class="regexp">//</span> &#123; value: <span class="string">'ending'</span>, done: true &#125;</div><div class="line"></div><div class="line">hw.<span class="keyword">next</span>()</div><div class="line"><span class="regexp">//</span> &#123; value: undefined, done: true &#125;</div></pre></td></tr></table></figure>
<h3 id="yield语句"><a href="#yield语句" class="headerlink" title="yield语句"></a>yield语句</h3><ul>
<li>yield语句不能用在普通函数中，否则会报错</li>
</ul>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="name">function</span> ()&#123;</div><div class="line">    yield <span class="number">1</span><span class="comment">;</span></div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<ul>
<li>yield语句如果用在一个表达式之中，必须放在圆括号里面</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span> + <span class="keyword">yield</span>); <span class="comment">// SyntaxError</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span> + <span class="keyword">yield</span> <span class="number">123</span>); <span class="comment">// SyntaxError</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span> + (<span class="keyword">yield</span>)); <span class="comment">// OK</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello'</span> + (<span class="keyword">yield</span> <span class="number">123</span>)); <span class="comment">// OK</span></div></pre></td></tr></table></figure>
<ul>
<li>yield语句用作函数参数或赋值表达式的右边，可以不加括号</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">foo(<span class="keyword">yield</span> <span class="string">'a'</span>, <span class="keyword">yield</span> <span class="string">'b'</span>); <span class="comment">// OK</span></div><div class="line"><span class="keyword">let</span> input = <span class="keyword">yield</span>; <span class="comment">// OK</span></div></pre></td></tr></table></figure>
<h2 id="return"><a href="#return" class="headerlink" title="return()"></a>return()</h2><ul>
<li>如果主动调用return()方法，Generator函数将被终结</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> g = gen();</div><div class="line">g.next() <span class="comment">// &#123;value: 1, done: false&#125;</span></div><div class="line">g.<span class="keyword">return</span>(<span class="string">'foo'</span>) <span class="comment">// &#123;value: 'foo', done: true&#125;</span></div><div class="line">g.next() <span class="comment">// &#123;value: undefined, done: true&#125;</span></div></pre></td></tr></table></figure>
<ul>
<li><em>但是</em>，如果Generator函数内部有try…finally代码块，那么return方法会推迟到finally代码块执行完再执行。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">finally</span>&#123;</div><div class="line">        <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> g = gen();</div><div class="line">g.next() <span class="comment">// &#123;value: 1, done: false&#125;</span></div><div class="line">g.<span class="keyword">return</span>(<span class="number">10</span>) <span class="comment">// &#123;value: 2, done: false&#125;</span></div><div class="line">g.next() <span class="comment">// &#123;value: 10, done: true&#125;</span></div></pre></td></tr></table></figure>
<h3 id="yield"><a href="#yield" class="headerlink" title="yield*"></a>yield*</h3><ul>
<li>在一个Generater函数内部直接调用另外一个Generater函数无效</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">yield</span> inner();</div><div class="line">    <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> o = outer();</div><div class="line">o.next(); <span class="comment">// &#123;value: 1, done: false&#125;</span></div><div class="line">o.next(); <span class="comment">// &#123;value: inner, done: false&#125;</span></div><div class="line">o.next(); <span class="comment">// &#123;value: 3, done: true&#125;</span></div></pre></td></tr></table></figure>
<ul>
<li>上面的情况可以使用<code>yield*</code>解决</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">yield</span>* inner(); <span class="comment">// 调用方法与上面不同</span></div><div class="line">    <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> o = outer();</div><div class="line">o.next(); <span class="comment">// &#123;value: 1, done: false&#125;</span></div><div class="line">o.next(); <span class="comment">// &#123;value: 2, done: false&#125; // 返回结果与上面不同</span></div><div class="line">o.next(); <span class="comment">// &#123;value: 3, done: true&#125;</span></div></pre></td></tr></table></figure>
<ul>
<li>任何数据结构只要有Iterator接口，就可以被yield*遍历。</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function* demo()&#123;</div><div class="line">    <span class="keyword">yield</span>* [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">&#125;</div><div class="line">var d = demo();</div><div class="line">d.<span class="keyword">next</span>(); <span class="regexp">//</span> &#123;<span class="symbol">value:</span> <span class="number">1</span>, <span class="symbol">done:</span> <span class="literal">false</span>&#125;</div><div class="line">d.<span class="keyword">next</span>(); <span class="regexp">//</span> &#123;<span class="symbol">value:</span> <span class="number">2</span>, <span class="symbol">done:</span> <span class="literal">false</span>&#125;</div><div class="line">d.<span class="keyword">next</span>(); <span class="regexp">//</span> &#123;<span class="symbol">value:</span> <span class="number">3</span>, <span class="symbol">done:</span> <span class="literal">false</span>&#125;</div><div class="line">d.<span class="keyword">next</span>(); <span class="regexp">//</span> &#123;<span class="symbol">value:</span> undefined, <span class="symbol">done:</span> <span class="literal">true</span>&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果被代理的Generator函数有return语句，那么就可以向代理它的Generator函数返回数据。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">var</span> i = <span class="keyword">yield</span>* inner();</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span> + i;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> o = outer();</div><div class="line">o.next(); <span class="comment">// &#123;value: 1, done: false&#125;</span></div><div class="line">o.next(); <span class="comment">// &#123;value: 4, done: false&#125;</span></div></pre></td></tr></table></figure>
<h3 id="作为对象属性的Generator函数"><a href="#作为对象属性的Generator函数" class="headerlink" title="作为对象属性的Generator函数"></a>作为对象属性的Generator函数</h3><ul>
<li>如果一个对象的属性是Generator函数，可以简写成下面的形式。</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">    * gen()&#123;</div><div class="line">        yield <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">var g = obj.gen();</div><div class="line">g.<span class="keyword">next</span>(); // &#123;value: <span class="number">1</span>, done: false&#125;</div></pre></td></tr></table></figure>
<h3 id="Generator函数的this"><a href="#Generator函数的this" class="headerlink" title="Generator函数的this"></a>Generator函数的this</h3><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li>异步操作的同步化表达，逻辑更清晰</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">render</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    showLoading();</div><div class="line">    <span class="keyword">var</span> res = <span class="keyword">yield</span> getData();</div><div class="line">    hideLoading();</div><div class="line">    <span class="built_in">console</span>.log(res); <span class="comment">// 打印ajax的结果</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $.ajax().done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">        r.next(res);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> r = render();</div><div class="line">r.next();</div></pre></td></tr></table></figure>
<ul>
<li>控制流管理，摆脱回调函数多层嵌套</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// callback方式</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    step1(<span class="function"><span class="keyword">function</span>(<span class="params">res1</span>)</span>&#123;</div><div class="line">        step2(res1, <span class="function"><span class="keyword">function</span>(<span class="params">res2</span>)</span>&#123;</div><div class="line">            step3(res2, <span class="function"><span class="keyword">function</span>(<span class="params">res3</span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(res3);</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">    &#125;)        </div><div class="line">&#125;</div><div class="line"><span class="comment">// promise方式</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    step1()</div><div class="line">    .then(step2)</div><div class="line">    .then(step3)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">&#123;</span></span></div><div class="line">        <span class="regexp">//</span> do something</div><div class="line">    &#125;))        </div><div class="line">&#125;</div><div class="line">// <span class="title">Generator</span>方式</div><div class="line"><span class="title">function</span> <span class="title">step</span>(<span class="params"></span>)&#123;</div><div class="line">    <span class="keyword">var</span> res1 = <span class="keyword">yield</span> step1();</div><div class="line">    <span class="keyword">var</span> res2 = <span class="keyword">yield</span> step2(res1);</div><div class="line">    <span class="keyword">var</span> res3 = <span class="keyword">yield</span> step3(res2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>多任务并行。如果yield语句后面的参数，是一个具有遍历器接口的对象，yield会遍历这个对象，再往下执行。这意味着，多个任务按顺序一个接一个执行时，yield语句可以按顺序排列。多个任务需要并列执行时（比如只有A任务和B任务都执行完，才能执行C任务），可以采用数组的写法。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">execTaskA</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">            resolve(<span class="string">'a'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">execTaskB</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">            resolve(<span class="string">'b'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">execTasks</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> [resA, resB] = <span class="keyword">yield</span> [execTaskA(), execTaskB()];</div><div class="line">    <span class="comment">// let resB = yield* execTaskB();</span></div><div class="line">    <span class="built_in">console</span>.log(resA, resB);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> t = execTasks();</div><div class="line">t.next();</div></pre></td></tr></table></figure>
<ul>
<li>关于Generator函数的自动执行，可以关注github上的<code>co</code>组件</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Function]]></title>
      <url>http://yoursite.com/Function/</url>
      <content type="html"><![CDATA[<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ul>
<li>ES6中对于函数的扩展最吸引人的莫过于箭头函数啦，不多说，先学会再说。</li>
<li>函数体内的this对象，是定义时所在的对象，而不是使用时所在的对象，这个特性与正常函数不同。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 箭头定义函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id); <span class="comment">// this指向&#123;id:42&#125;这个对象</span></div><div class="line">  &#125;, <span class="number">100</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> id = <span class="number">21</span>;</div><div class="line">foo.call(&#123; <span class="attr">id</span>: <span class="number">42</span> &#125;); <span class="comment">// 42</span></div><div class="line"></div><div class="line"><span class="comment">// 普通定义函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id); <span class="comment">// this指向window</span></div><div class="line">  &#125;, <span class="number">100</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> id = <span class="number">21</span>;</div><div class="line">foo.call(&#123; <span class="attr">id</span>: <span class="number">42</span> &#125;); <span class="comment">// 21</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。没有内部this。不过都ES6了，想要定义类，直接使用class不就得了</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var Demo = <span class="function"><span class="params">(foo)</span> =&gt;</span> <span class="built_in">console</span>.log(foo);</div><div class="line"><span class="keyword">new</span> Demo(<span class="string">'foo'</span>) <span class="regexp">//</span> 报错啦 testFunc <span class="keyword">is</span> <span class="keyword">not</span> a constructor</div></pre></td></tr></table></figure>
<ul>
<li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数(…args)代替。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demo = <span class="function">(<span class="params">foo</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</div><div class="line">demo() <span class="comment">// 报错 arguments is not defined</span></div><div class="line"></div><div class="line"><span class="comment">// 可以用Rest写法代替</span></div><div class="line"><span class="keyword">var</span> demo = <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="built_in">console</span>.log(args);</div><div class="line">demo(<span class="string">'a'</span>) <span class="comment">// ["a"]</span></div></pre></td></tr></table></figure>
<ul>
<li>不可以使用yield命令，因此箭头函数不能用作Generator函数。待研究^^!!</li>
</ul>
<h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><ul>
<li>尾参数设置默认值</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="keyword">log</span> = (x, y = <span class="string">'World'</span>) =&gt; x + <span class="string">' '</span> + y;</div><div class="line"><span class="keyword">log</span>(<span class="string">'hello'</span>, <span class="string">'xiaoming'</span>); <span class="comment">// hello xiaoming</span></div><div class="line"><span class="keyword">log</span>(<span class="string">'hello'</span>); <span class="comment">// hello World</span></div></pre></td></tr></table></figure>
<h3 id="函数的length属性"><a href="#函数的length属性" class="headerlink" title="函数的length属性"></a>函数的length属性</h3><ul>
<li>返回未设置默认值的参数的个数</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="params">(x, y, z = <span class="number">1</span>)</span> =&gt;</span> <span class="number">1</span>).length <span class="regexp">//</span> <span class="number">2</span></div></pre></td></tr></table></figure>
<ul>
<li>如果设置默认值的参数不是尾参数，设置默认值的参数后面的未设置默认值的参数也不计入length</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="params">(x = <span class="number">1</span>, y, z)</span> =&gt;</span> <span class="number">1</span>).length <span class="regexp">//</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y = x</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(y);</div><div class="line">&#125;</div><div class="line">foo(<span class="number">2</span>) <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">y = x</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> x = <span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(y);</div><div class="line">&#125;</div><div class="line">foo() <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><ul>
<li>rest参数后面不能再有参数</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="selector-tag">a</span>, ...b) =&gt; <span class="number">1</span></div><div class="line">(<span class="selector-tag">a</span>, ..<span class="selector-class">.b</span>, c) =&gt; <span class="number">1</span> <span class="comment">// 报错</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fetch]]></title>
      <url>http://yoursite.com/fetch/</url>
      <content type="html"><![CDATA[<blockquote>
<p>事实标准，并不存在与ES6规范中，基于Promise实现。<br>目前项目中对Promise的<a href="http://caniuse.com/#search=promise" target="_blank" rel="external">兼容性</a>尚存在问题，如果在项目中应用fetch，需要引入<a href="https://github.com/stefanpenner/es6-promise" target="_blank" rel="external">es6-promise</a>和<a href="https://github.com/github/fetch" target="_blank" rel="external">fetch</a>。<br>以下提到为了浏览器兼容而引入的fech组件时统一使用’fech组件’代替。<br>该文档重点针对fetch组件进行详细说明。</p>
</blockquote>
<a id="more"></a>
<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul>
<li>Request、Response、Header、Body：事实标准中暴露在window对象中，但在fetch组件中没有对外暴露接口，项目中不能使用，因此暂不做深入了解。在RN中可以直接使用</li>
<li>返回Promise对象</li>
</ul>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ul>
<li>get</li>
</ul>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/test/content.json'</span>).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(data)</span>&#123;</span></div><div class="line">    <span class="keyword">return</span> data.json();</div><div class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(data)</span>&#123;</span></div><div class="line">    console.<span class="built_in">log</span>(data);</div><div class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(error)</span>&#123;</span></div><div class="line">    console.<span class="built_in">log</span>(<span class="built_in">error</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>post</li>
</ul>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/test/content.json'</span>, &#123; <span class="comment">// url: fetch事实标准中可以通过Request相关api进行设置</span></div><div class="line">    method: <span class="string">'POST'</span>,</div><div class="line">    mode: <span class="string">'same-origin'</span>, <span class="comment">// same-origin|no-cors（默认）|cors</span></div><div class="line">    credentials: <span class="string">'include'</span>, <span class="comment">// omit（默认，不带cookie）|same-origin(同源带cookie)|include(总是带cookie)</span></div><div class="line">    headers: &#123; <span class="comment">// headers: fetch事实标准中可以通过Header相关api进行设置</span></div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> <span class="comment">// default: 'application/json'</span></div><div class="line">    &#125;,</div><div class="line">    body: <span class="string">'a=1&amp;b=2'</span> <span class="comment">// body: fetch事实标准中可以通过Body相关api进行设置</span></div><div class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(res)</span>&#123; <span class="title">res</span>: <span class="title">fetch</span>事实标准中可以通过<span class="title">Response</span>相关<span class="title">api</span>进行设置</span></div><div class="line">    <span class="keyword">return</span> res.json();</div><div class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(data)</span>&#123;</span></div><div class="line">    console.<span class="built_in">log</span>(data);</div><div class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(error)</span>&#123;</span></div><div class="line">    </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Response相关属性及方法"><a href="#Response相关属性及方法" class="headerlink" title="Response相关属性及方法"></a>Response相关属性及方法</h3><h4 id="bodyUsed"><a href="#bodyUsed" class="headerlink" title="bodyUsed"></a>bodyUsed</h4><ul>
<li>标记返回值是否被使用过</li>
<li>这样设计的目的是为了之后兼容基于流的API，让应用一次消费data，这样就允许了JavaScript处理大文件例如视频，并且可以支持实时压缩和编辑</li>
</ul>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/test/content.json'</span>).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(res)</span>&#123;</span></div><div class="line">    console.<span class="built_in">log</span>(res.bodyUsed); <span class="comment">// false</span></div><div class="line">    var data = res.json();</div><div class="line">    console.<span class="built_in">log</span>(res.bodyUsed); <span class="comment">//true</span></div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(data)</span>&#123;</span></div><div class="line">    console.<span class="built_in">log</span>(data);</div><div class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(error)</span>&#123;</span></div><div class="line">    console.<span class="built_in">log</span>(<span class="built_in">error</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h4><ul>
<li>返回Headers对象，该对象实现了Iterator，可通过for…of遍历</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/test/content.json'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> headers = res.headers;</div><div class="line">    <span class="built_in">console</span>.log(headers.get(<span class="string">'Content-Type'</span>)); <span class="comment">// application/json</span></div><div class="line">    <span class="built_in">console</span>.log(headers.has(<span class="string">'Content-Type'</span>)); <span class="comment">// true</span></div><div class="line">    <span class="built_in">console</span>.log(headers.getAll(<span class="string">'Content-Type'</span>)); <span class="comment">// ["application/json"]</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> headers.keys())&#123;</div><div class="line">        <span class="built_in">console</span>.log(key); <span class="comment">// datelast-modified server accept-ranges etag content-length content-type</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> headers.values())&#123;</div><div class="line">        <span class="built_in">console</span>.log(value);</div><div class="line">    &#125;</div><div class="line">    headers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key, arr</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(value); <span class="comment">// 对应values()的返回值</span></div><div class="line">        <span class="built_in">console</span>.log(key); <span class="comment">// 对应keys()的返回值</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> res.json();</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="ok"><a href="#ok" class="headerlink" title="ok"></a>ok</h4><ul>
<li>是否正常返回</li>
<li>代表状态码在<code>200-299</code>之间</li>
</ul>
<h4 id="status"><a href="#status" class="headerlink" title="status"></a>status</h4><ul>
<li>状态码<ul>
<li>200 成功</li>
<li></li>
</ul>
</li>
</ul>
<h4 id="statusText"><a href="#statusText" class="headerlink" title="statusText"></a>statusText</h4><ul>
<li>状态描述<ul>
<li>‘OK’ 成功</li>
</ul>
</li>
</ul>
<h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><ul>
<li><code>basic</code>：正常的，同域的请求，包含所有的headers。排除<code>Set-Cookie</code>和<code>Set-Cookie2</code>。</li>
<li><code>cors</code>：Response从一个合法的跨域请求获得，一部分header和body可读。</li>
<li><code>error</code>：网络错误。Response的status是0，Headers是空的并且不可写。当Response是从Response.error()中得到时，就是这种类型。</li>
<li><code>opaque</code>： Response从”no-cors”请求了跨域资源。依靠Server端来做限制。</li>
</ul>
<h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><ul>
<li>返回完整的url字符串。如：’<a href="http://xxx.com/xx?a=1" target="_blank" rel="external">http://xxx.com/xx?a=1</a>‘</li>
</ul>
<h4 id="arrayBuffer"><a href="#arrayBuffer" class="headerlink" title="arrayBuffer()"></a>arrayBuffer()</h4><ul>
<li>返回ArrayBuffer类型的数据的Promise对象</li>
</ul>
<h4 id="blob"><a href="#blob" class="headerlink" title="blob()"></a>blob()</h4><ul>
<li>返回Blob类型的数据的Promise对象</li>
</ul>
<h4 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h4><ul>
<li>生成一个Response的克隆</li>
<li>body只能被读取一次，但clone方法就可以得到body的一个备份</li>
<li>克隆体仍然具有bodyUsed属性，如果被使用过一次，依然会失效</li>
</ul>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/test/content.json'</span>).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</div><div class="line">    var d = <span class="keyword">data</span>.clone();</div><div class="line">    d.text().<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(text)</span></span>&#123;</div><div class="line">        console.<span class="built_in">log</span>(JSON.parse(text));</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">data</span>.json();</div><div class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</div><div class="line">    console.<span class="built_in">log</span>(<span class="keyword">data</span>);</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span><span class="params">(error)</span></span>&#123;</div><div class="line">    console.<span class="built_in">log</span>(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="json"><a href="#json" class="headerlink" title="json()"></a>json()</h4><ul>
<li>返回JSON类型的数据的Promise对象</li>
</ul>
<h4 id="text"><a href="#text" class="headerlink" title="text()"></a>text()</h4><ul>
<li>返回Text类型的数据的Promise对象</li>
</ul>
<h4 id="formData"><a href="#formData" class="headerlink" title="formData()"></a>formData()</h4><ul>
<li>返回FormData类型的数据的Promise对象</li>
</ul>
<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><ul>
<li>无法监控读取进度</li>
<li>无法中断请求</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Class]]></title>
      <url>http://yoursite.com/Class/</url>
      <content type="html"><![CDATA[<h3 id="第一次接触Class的你需要注意哪些地方"><a href="#第一次接触Class的你需要注意哪些地方" class="headerlink" title="第一次接触Class的你需要注意哪些地方"></a>第一次接触Class的你需要注意哪些地方</h3><ul>
<li>类结构体内部的方法定义不能（不需要）使用function字段</li>
<li>类名必须大写。好像没有明确规定，但你就当有这个规定吧</li>
<li>类结构体虽然是放在<code>{}</code>内，但此时的<code>{}</code>并不表示对象，而表示代码块，所以不要像之前定义prototype一样使用<code>,</code>分割各个函数</li>
<li>类结构体中的所有方法都会被挂载到prototype对象上，成为各实例的通用方法</li>
<li>同let&amp;const一样，不存在变量提升</li>
<li>不多说，都在demo里了，走一个。。。</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">new Demo() <span class="comment">// 不存在变量提升，这里会报错</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; <span class="comment">// 类名大写</span></div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123; <span class="comment">// 构造函数。可以不定义构造函数默认`constructor() &#123;&#125;`</span></div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125; <span class="comment">// 不需要`,`分割</span></div><div class="line">  toString() &#123; <span class="comment">// 不需要`function`定义函数</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="继承-extends"><a href="#继承-extends" class="headerlink" title="继承 extends"></a>继承 extends</h3><ul>
<li>子类通过构造函数向父类传参</li>
<li>super代表父类的构造函数</li>
<li>调用super之后才能使用this关键字，否则会报错</li>
<li>demo</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoChild</span> <span class="keyword">extends</span> <span class="title">Demo</span></span>&#123;</div><div class="line">    constructor(...args)&#123;</div><div class="line">        <span class="keyword">this</span>.args = args; <span class="comment">// 报错啦，这里还没有this呢。。</span></div><div class="line">        <span class="keyword">super</span>(...args);</div><div class="line">        <span class="keyword">this</span>.args = args; <span class="comment">//这才对嘛。。</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以继承原生构造函数</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodArray</span> <span class="keyword">extends</span> <span class="title">Array</span></span>&#123; <span class="comment">// 妈妈再也不用担心对原生构造函数的扩展带来的各种问题</span></div><div class="line">    constructor(...args)&#123;</div><div class="line">        <span class="keyword">super</span>(...args);</div><div class="line">    &#125;</div><div class="line">    toString()&#123;</div><div class="line">        console.log(<span class="symbol">'I</span> am better then <span class="type">Array</span>');</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="type">GoodArray</span>();</div><div class="line">arr.toString();</div></pre></td></tr></table></figure>
<h3 id="prototype-amp-proto"><a href="#prototype-amp-proto" class="headerlink" title="prototype &amp; __proto__"></a>prototype &amp; __proto__</h3><ul>
<li>__proto__总是指向父类</li>
<li>prototype的__proto__总是指向父类的prototype</li>
<li>绕死算了^v^</li>
</ul>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DemoChild.<span class="symbol">\_</span><span class="symbol">\_</span>proto<span class="symbol">\_</span><span class="symbol">\_</span> === Demo;</div><div class="line">DemoChild.prototype.<span class="symbol">\_</span><span class="symbol">\_</span>proto<span class="symbol">\_</span><span class="symbol">\_</span> === Demo.prototype;</div></pre></td></tr></table></figure>
<h3 id="getter-amp-setter"><a href="#getter-amp-setter" class="headerlink" title="getter &amp; setter"></a>getter &amp; setter</h3><ul>
<li>class内部可以定义get&amp;set方法，用于存取属性的值。用法和对象属性的getter&amp;setter相同</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(foo)&#123;</div><div class="line">        <span class="keyword">this</span>._foo = foo;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">get</span> foo()&#123;</div><div class="line">        console.log(<span class="string">'get foo: '</span> + <span class="keyword">this</span>._foo);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._foo;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">set</span> foo(<span class="keyword">val</span>)&#123;</div><div class="line">        <span class="keyword">this</span>._foo = <span class="keyword">val</span>;</div><div class="line">        console.log(<span class="string">'set foo: '</span> + <span class="keyword">this</span>._foo);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> demo = new Demo(<span class="number">111</span>);</div><div class="line">demo.foo = <span class="number">123</span>; <span class="comment">// set foo: 123</span></div><div class="line">demo.foo; <span class="comment">// get foo: 123</span></div></pre></td></tr></table></figure>
<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ul>
<li>static关键字</li>
<li>静态方法可以直接通过类名调用，不需要实例化</li>
<li>静态方法不会被实例继承</li>
<li>父类的静态方法可以被子类继承</li>
<li>静态方法也可以通过supper()调用</li>
<li>来个糖炒栗子吧</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</div><div class="line">    static hello()&#123;</div><div class="line">        console.log(<span class="symbol">'hell</span>o');</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildDemo</span> <span class="keyword">extends</span> <span class="title">Demo</span></span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> <span class="type">Demo</span>();</div><div class="line"><span class="keyword">var</span> childDemo = <span class="keyword">new</span> <span class="type">ChildDemo</span>();</div><div class="line"><span class="type">Demo</span>.hello(); <span class="comment">// hello</span></div><div class="line"><span class="type">ChildDemo</span>.hello(); <span class="comment">// hello</span></div><div class="line">demo.hello(); <span class="comment">// 报错啦</span></div><div class="line">childDemo.hello(); <span class="comment">// 根本就没执行到我，其实我也一样报错</span></div></pre></td></tr></table></figure>
<h3 id="静态属性和实例属性"><a href="#静态属性和实例属性" class="headerlink" title="静态属性和实例属性"></a>静态属性和实例属性</h3><ul>
<li>如何定义静态属性？ES6规定Class内部只允许定义静态方法，不允许定义静态属性，ES7中有内部定义静态属性的提案，但是那是ES7的事情了</li>
<li>实例属性只能在constructor中定义</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Demo&#123;</div><div class="line">    constructor(...<span class="built_in">props</span>)&#123;</div><div class="line">        this.<span class="built_in">props</span> = <span class="built_in">props</span>; // 定义实例属性</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Demo.<span class="built_in">props</span> = 'static <span class="built_in">props</span>';</div><div class="line"><span class="built_in">var</span> <span class="built_in">demo</span> = <span class="built_in">new</span> Demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line">console.<span class="built_in">log</span>(<span class="built_in">demo</span>.<span class="built_in">props</span>); // [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">console.<span class="built_in">log</span>(Demo.<span class="built_in">props</span>); // 'static <span class="built_in">props</span>'</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Array]]></title>
      <url>http://yoursite.com/Array/</url>
      <content type="html"><![CDATA[<h3 id="from"><a href="#from" class="headerlink" title="from()"></a>from()</h3><ul>
<li>必须是arrayLike对象，没有length属性时，默认length为0</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrObj = &#123;</div><div class="line">    <span class="number">0</span>: <span class="string">'0'</span>,</div><div class="line">    <span class="number">1</span>: <span class="string">'1'</span>,</div><div class="line">    <span class="number">2</span>: <span class="string">'2'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from(arrObj); <span class="comment">// []</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>根据key生成响应的数组index。其它以undefined填充</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrObj = &#123;</div><div class="line">    <span class="number">1</span>: <span class="string">'0'</span>,</div><div class="line">    <span class="number">2</span>: <span class="string">'1'</span>,</div><div class="line">    <span class="number">3</span>: <span class="string">'2'</span>,</div><div class="line">    <span class="attr">length</span>: <span class="number">5</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from(arrObj); <span class="comment">// [undefined, '0', '1', '2', undefined]</span></div></pre></td></tr></table></figure>
<ul>
<li>传入第二个参数用于对每一个元素进行处理</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arrObj = &#123;</div><div class="line">    <span class="number">1</span>: <span class="string">'0'</span>,</div><div class="line">    <span class="number">2</span>: <span class="string">'1'</span>,</div><div class="line">    <span class="number">3</span>: <span class="string">'2'</span>,</div><div class="line">    <span class="attr">length</span>: <span class="number">5</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from(arrObj, (item) =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> item || <span class="string">'hahah'</span>;</div><div class="line">&#125;); <span class="comment">// ['hahah', '0', '1', '2', 'hahah']</span></div></pre></td></tr></table></figure>
<ul>
<li>传入第三个参数，用于改变this指向</li>
</ul>
<h3 id="of"><a href="#of" class="headerlink" title="of()"></a>of()</h3><ul>
<li>将一组值转换成数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// [3, 4, 5]</span></div></pre></td></tr></table></figure>
<h3 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将3号位复制到0号位</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"><span class="comment">// [4, 2, 3, 4, 5]</span></div><div class="line"></div><div class="line"><span class="comment">// -2相当于3号位，-1相当于4号位</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">-2</span>, <span class="number">-1</span>)</div><div class="line"><span class="comment">// [4, 2, 3, 4, 5]</span></div><div class="line"></div><div class="line"><span class="comment">// 将3号位复制到0号位</span></div><div class="line">[].copyWithin.call(&#123;<span class="attr">length</span>: <span class="number">5</span>, <span class="number">3</span>: <span class="number">1</span>&#125;, <span class="number">0</span>, <span class="number">3</span>)</div><div class="line"><span class="comment">// &#123;0: 1, 3: 1, length: 5&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 将2号位到数组结束，复制到0号位</span></div><div class="line"><span class="keyword">var</span> i32a = <span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</div><div class="line">i32a.copyWithin(<span class="number">0</span>, <span class="number">2</span>);</div><div class="line"><span class="comment">// Int32Array [3, 4, 5, 4, 5]</span></div><div class="line"></div><div class="line"><span class="comment">// 对于没有部署TypedArray的copyWithin方法的平台</span></div><div class="line"><span class="comment">// 需要采用下面的写法</span></div><div class="line">[].copyWithin.call(<span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>);</div><div class="line"><span class="comment">// Int32Array [4, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure>
<h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><ul>
<li>找出第一个符合条件的数组成员</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>].find(<span class="function">(<span class="params">item</span>) =&gt;</span> item &lt; <span class="number">2</span>) <span class="comment">// 0</span></div></pre></td></tr></table></figure>
<ul>
<li>回调的三个参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>].find(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> item &gt; <span class="number">1</span></div><div class="line">    <span class="built_in">console</span>.log(item);</div><div class="line">    <span class="built_in">console</span>.log(index);</div><div class="line">    <span class="built_in">console</span>.log(arr);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h3><ul>
<li>indexOf无法判断NAN</li>
<li>indexOf无法判断数组中的对象</li>
<li>如果没有匹配的值，返回-1</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>].findIndex(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> item &gt; <span class="number">1</span>;</div><div class="line">&#125;) <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h3 id="arr-fill-item-start-end"><a href="#arr-fill-item-start-end" class="headerlink" title="arr.fill(item, start, end)"></a>arr.fill(item, start, end)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>)</div><div class="line"><span class="comment">// [7, 7, 7]</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">7</span>)</div><div class="line"><span class="comment">// [7, 7, 7]</span></div><div class="line"></div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="comment">// ['a', 7, 'c']</span></div></pre></td></tr></table></figure>
<h3 id="arr-entries"><a href="#arr-entries" class="headerlink" title="arr.entries()"></a>arr.entries()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(index, elem);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0 "a"</span></div><div class="line"><span class="comment">// 1 "b"</span></div></pre></td></tr></table></figure>
<h3 id="arr-keys"><a href="#arr-keys" class="headerlink" title="arr.keys()"></a>arr.keys()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(index);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h3 id="arr-values"><a href="#arr-values" class="headerlink" title="arr.values()"></a>arr.values()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(elem);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 'a'</span></div><div class="line"><span class="comment">// 'b'</span></div></pre></td></tr></table></figure>
<h3 id="空位处理"><a href="#空位处理" class="headerlink" title="空位处理"></a>空位处理</h3><ul>
<li>所有ES6方法都明确将数组中的空位转换成undefined</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.from([<span class="string">'a'</span>,,<span class="string">'b'</span>])</div><div class="line"><span class="comment">// [ "a", undefined, "b" ]</span></div><div class="line"></div><div class="line">[...[<span class="string">'a'</span>,,<span class="string">'b'</span>]]</div><div class="line"><span class="comment">// [ "a", undefined, "b" ]</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[变量的解构赋值]]></title>
      <url>http://yoursite.com/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      <content type="html"><![CDATA[<blockquote>
<p>按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构。</p>
</blockquote>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h4><ul>
<li><p>如果解构不成功，变量的值就等于undefined。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> [a, b, c, d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="comment">// var a = 1;</span></div><div class="line"><span class="comment">// var b = 2;</span></div><div class="line"><span class="comment">// var c = 3;</span></div><div class="line"><span class="comment">// var d = undefined;</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</div><div class="line"><span class="comment">// var a = 1;</span></div><div class="line"><span class="comment">// var b = 2;</span></div><div class="line"><span class="comment">// var c = 3;</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</div><div class="line"><span class="comment">// var third = "baz";</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="comment">// var head // 1</span></div><div class="line"><span class="comment">// var tail // [2, 3, 4]</span></div></pre></td></tr></table></figure>
</li>
<li><p>解构赋值允许指定默认值。内部使用严格相等运算符（===），判断一个位置是否有值。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> [foo = <span class="literal">true</span>] = []; <span class="comment">// true</span></div><div class="line"><span class="keyword">var</span> [x = <span class="number">1</span>] = [<span class="literal">undefined</span>]; <span class="comment">// 1</span></div><div class="line"><span class="keyword">var</span> [x = <span class="number">1</span>] = [<span class="literal">null</span>]; <span class="comment">// null</span></div></pre></td></tr></table></figure>
<ul>
<li>如果等号的右边不是数组（不是可遍历的结构），将会报错。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span>;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</div><div class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</div></pre></td></tr></table></figure>
<h4 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> &#123; </div><div class="line">    foo, </div><div class="line">    bar </div><div class="line">&#125; = &#123; </div><div class="line">    <span class="attr">foo</span>: <span class="string">'aaa'</span>, </div><div class="line">    <span class="attr">bar</span>: <span class="string">'bbb'</span> </div><div class="line">&#125;;</div><div class="line"><span class="comment">// var foo = 'aaa';</span></div><div class="line"><span class="comment">// var bar = 'bbb';</span></div></pre></td></tr></table></figure>
<ul>
<li>如果变量名与属性名不一致，必须写成下面这样。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123; </div><div class="line">    <span class="attr">first</span>: <span class="string">'hello'</span>, </div><div class="line">    <span class="attr">last</span>: <span class="string">'world'</span> </div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> &#123; </div><div class="line">    <span class="attr">first</span>: f, </div><div class="line">    <span class="attr">last</span>: l</div><div class="line">&#125; = obj;</div><div class="line"><span class="comment">// let f = 'hello';</span></div><div class="line"><span class="comment">// let l = 'world';</span></div></pre></td></tr></table></figure>
<ul>
<li>如果要将一个已经声明的变量用于解构赋值，必须非常小心。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x;</div><div class="line">&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;; <span class="comment">// error，大括号被解析成代码块</span></div><div class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;); <span class="comment">// right</span></div></pre></td></tr></table></figure>
<h4 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</div><div class="line"><span class="comment">// const a = 'h';</span></div><div class="line"><span class="comment">// const b = 'e';</span></div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure>
<ul>
<li>类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。 </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'hello'</span>;</div><div class="line">len <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<h4 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h4><ul>
<li>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>;</div><div class="line">s === <span class="built_in">Number</span>.prototype.toString <span class="comment">// true</span></div></pre></td></tr></table></figure>
<ul>
<li>undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: x &#125; = <span class="literal">undefined</span>; <span class="comment">// TypeError</span></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: y &#125; = <span class="literal">null</span>; <span class="comment">// TypeError</span></div></pre></td></tr></table></figure>
<h4 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<ul>
<li>函数参数的解构也可以使用默认值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [x, y];</div><div class="line">&#125;</div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></div><div class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]</span></div><div class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></div><div class="line">move(); <span class="comment">// [0, 0]</span></div></pre></td></tr></table></figure>
<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><h4 id="交换变量的值"><a href="#交换变量的值" class="headerlink" title="交换变量的值"></a>交换变量的值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[x, y] = [y, x];</div></pre></td></tr></table></figure>
<h4 id="从函数返回多个值"><a href="#从函数返回多个值" class="headerlink" title="从函数返回多个值"></a>从函数返回多个值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;</div><div class="line">    Component,</div><div class="line">    Dimensions,</div><div class="line">    Image,</div><div class="line">    View,</div><div class="line">    Platform,</div><div class="line">    StyleSheet,</div><div class="line">    Text,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div></pre></td></tr></table></figure>
<h4 id="解构赋值可以方便地将一组参数与变量名对应起来。"><a href="#解构赋值可以方便地将一组参数与变量名对应起来。" class="headerlink" title="解构赋值可以方便地将一组参数与变量名对应起来。"></a>解构赋值可以方便地将一组参数与变量名对应起来。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 参数是一组有次序的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123; ... &#125;</div><div class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line"></div><div class="line"><span class="comment">// 参数是一组无次序的值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</div><div class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</div></pre></td></tr></table></figure>
<h4 id="提取JSON数据"><a href="#提取JSON数据" class="headerlink" title="提取JSON数据"></a>提取JSON数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jsonData = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">42</span>,</div><div class="line">  <span class="attr">status</span>: <span class="string">"OK"</span>,</div><div class="line">  <span class="attr">data</span>: [<span class="number">867</span>, <span class="number">5309</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</div></pre></td></tr></table></figure>
<h4 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">jQuery.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">url, &#123;</span></span></div><div class="line">    async = true,</div><div class="line">    beforeSend = function () &#123;&#125;,</div><div class="line">    cache = <span class="literal">true</span>,</div><div class="line">    complete = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    crossDomain = <span class="literal">false</span>,</div><div class="line">    global = <span class="literal">true</span></div><div class="line">&#125;)&#123;&#125;;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[模块]]></title>
      <url>http://yoursite.com/%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><blockquote>
<p>用于规定模块的对外接口</p>
</blockquote>
<ul>
<li>两种写法</li>
</ul>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 分别导出，必须在定义的时候</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="string">'a'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> b = <span class="string">'b'</span></div><div class="line"></div><div class="line"><span class="comment">// 整体导出，必须放在大括号内</span></div><div class="line"><span class="keyword">var</span> a = <span class="string">'a'</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="string">'b'</span>;</div><div class="line"><span class="keyword">export</span> <span class="comment">&#123;a, b&#125;</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>可以导出类或者函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;&#125;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>as</code>将输出的变量重命名</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">export</span> &#123;</div><div class="line">    a <span class="keyword">as</span> a1, <span class="comment">// 外部使用时，获取到的是a1</span></div><div class="line">    b <span class="keyword">as</span> b1 <span class="comment">// 外部使用时，获取到的是b1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>必须在模块顶层调用，不能处于模块内的块级作用域中</li>
</ul>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span>; <span class="comment">// babel编译直接报错</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><blockquote>
<p>加载模块</p>
</blockquote>
<ul>
<li><p>几种写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 作为整体导入)</span></div><div class="line"><span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">'./xxx'</span>; <span class="comment">// './xxx'中的所有export都会作为obj(任意定义)的属性</span></div><div class="line"></div><div class="line"><span class="comment">// *号导入</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> obj <span class="keyword">from</span> <span class="string">'./xxx'</span>; <span class="comment">// 同上一种写法相同</span></div><div class="line"></div><div class="line"><span class="comment">// 分别导入（解构赋值）</span></div><div class="line"><span class="keyword">import</span> &#123;a1, b1&#125; <span class="keyword">from</span> <span class="string">'./xxx'</span>; <span class="comment">// './xxx'中exporta1, b1</span></div><div class="line"></div><div class="line"><span class="comment">// 整体和部分导入</span></div><div class="line"><span class="keyword">import</span> obj, &#123;a1&#125; <span class="keyword">from</span> <span class="string">'./xxx'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>使用as关键字，将导入的变量重命名</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">    a1 <span class="keyword">as</span> a2 <span class="comment">// './xxx'中导出a1，这里重命名为a2</span></div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'./xxx'</span>;</div></pre></td></tr></table></figure>
<ul>
<li>import会提升到模块头部执行</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">improt &#123;a1&#125; <span class="keyword">from</span> <span class="string">'./xxx'</span>; <span class="comment">// 这句会提前到顶部执行</span></div></pre></td></tr></table></figure>
<ul>
<li>可以不导入值，进做加载执行用</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">import</span> './xxx';</span></div></pre></td></tr></table></figure>
<h3 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h3><ul>
<li>使用default导出的变量，在使用import导入时，可以任意定义导入的变量名，不需要和导出时一致。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line"><span class="keyword">import</span> Haha <span class="keyword">from</span> <span class="string">'./a'</span>;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
